{
    "accounts": {
        "ddl": "CREATE TABLE `accounts` (\n  `USER` char(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'The connection''s client user name for the connection, or NULL if an internal thread.',\n  `HOST` char(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'The connection client''s host name, or NULL if an internal thread.',\n  `CURRENT_CONNECTIONS` bigint(20) NOT NULL COMMENT 'Current connections for the account.',\n  `TOTAL_CONNECTIONS` bigint(20) NOT NULL COMMENT 'Total connections for the account.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "USER": {
                "type": "char",
                "description": "The MySQL user account name."
            },
            "HOST": {
                "type": "char",
                "description": "The host from which the user connects."
            },
            "CURRENT_CONNECTIONS": {
                "type": "bigint",
                "description": "The current number of connections for the user."
            },
            "TOTAL_CONNECTIONS": {
                "type": "bigint",
                "description": "The total number of connections that have been made for this user."
            }
        },
        "description": "The `accounts` table in the Performance Schema of MySQL is used to monitor and aggregate the resource usage and statements executed by server accounts. It collects metrics like the number of times each account has executed statements, providing insights into the activity and load contributed by different users or hosts."
    },
    "cond_instances": {
        "ddl": "CREATE TABLE `cond_instances` (\n  `NAME` varchar(128) NOT NULL COMMENT 'Client user name for the connection, or NULL if an internal thread.',\n  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned NOT NULL COMMENT 'Address in memory of the instrumented condition.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "NAME": {
                "type": "varchar",
                "description": "The instrumented condition name."
            },
            "OBJECT_INSTANCE_BEGIN": {
                "type": "bigint",
                "description": "The address in memory of the instrumented condition."
            }
        },
        "description": "The `cond_instances` table in the Performance Schema of MySQL provides information about condition synchronization objects, which are used by threads for signaling and waiting during execution. It helps in monitoring and diagnosing potential issues related to thread synchronization and locking in MySQL server operations."
    },
    "events_stages_current": {
        "ddl": "CREATE TABLE `events_stages_current` (\n  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread associated with the event. Together with EVENT_ID uniquely identifies the row.',\n  `EVENT_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread''s current event number at the start of the event. Together with THREAD_ID uniquely identifies the row.',\n  `END_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'NULL when the event starts, set to the thread''s current event number at the end of the event.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event instrument name and a NAME from the setup_instruments table',\n  `SOURCE` varchar(64) DEFAULT NULL COMMENT 'Name and line number of the source file containing the instrumented code that produced the event.',\n  `TIMER_START` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds when the event timing started or NULL if timing is not collected.',\n  `TIMER_END` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds when the event timing ended, or NULL if the event has not ended or timing is not collected.',\n  `TIMER_WAIT` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds of the event''s duration or NULL if the event has not ended or timing is not collected.',\n  `WORK_COMPLETED` bigint(20) unsigned DEFAULT NULL COMMENT 'The number of work units completed for the stage. NULL if the stage event progress is not instrumented.',\n  `WORK_ESTIMATED` bigint(20) unsigned DEFAULT NULL COMMENT 'The number of work units expected for the stage. NULL if the stage event progress is not instrumented.',\n  `NESTING_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'EVENT_ID of event within which this event nests.',\n  `NESTING_EVENT_TYPE` enum('TRANSACTION','STATEMENT','STAGE','WAIT') DEFAULT NULL COMMENT 'Nesting event type. Either transaction, statement, stage or wait.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "THREAD_ID": {
                "type": "bigint",
                "description": "A unique identifier for the thread that the event occurred on."
            },
            "EVENT_ID": {
                "type": "bigint",
                "description": "A unique identifier for the event."
            },
            "END_EVENT_ID": {
                "type": "bigint",
                "description": "The EVENT_ID of the event when it ended, NULL if the event has not ended."
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the instrumented stage event."
            },
            "SOURCE": {
                "type": "varchar",
                "description": "The source code location that triggered the event."
            },
            "TIMER_START": {
                "type": "bigint",
                "description": "The start time of the event, in picoseconds."
            },
            "TIMER_END": {
                "type": "bigint",
                "description": "The end time of the event, in picoseconds, NULL if the event has not ended."
            },
            "TIMER_WAIT": {
                "type": "bigint",
                "description": "The total time waited for the event to complete, in picoseconds, NULL if the event has not ended."
            },
            "WORK_COMPLETED": {
                "type": "bigint",
                "description": "The amount of work completed by the event at the time it ended."
            },
            "WORK_ESTIMATED": {
                "type": "bigint",
                "description": "The total amount of work estimated for the event."
            },
            "NESTING_EVENT_ID": {
                "type": "bigint",
                "description": "The EVENT_ID of the event within which this event is nested, NULL if not nested."
            },
            "NESTING_EVENT_TYPE": {
                "type": "enum",
                "description": "The type of the nesting event (e.g., STATEMENT, STAGE, WAIT)."
            }
        },
        "description": "The `events_stages_current` table in the Performance Schema of MySQL is used to monitor current stage events. This table records events that are currently in progress for each thread, providing real-time insights into what stage of operation (like sorting, parsing) a thread is currently executing."
    },
    "events_stages_history": {
        "ddl": "CREATE TABLE `events_stages_history` (\n  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread associated with the event. Together with EVENT_ID uniquely identifies the row.',\n  `EVENT_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread''s current event number at the start of the event. Together with THREAD_ID uniquely identifies the row.',\n  `END_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'NULL when the event starts, set to the thread''s current event number at the end of the event.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event instrument name and a NAME from the setup_instruments table',\n  `SOURCE` varchar(64) DEFAULT NULL COMMENT 'Name and line number of the source file containing the instrumented code that produced the event.',\n  `TIMER_START` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds when the event timing started or NULL if timing is not collected.',\n  `TIMER_END` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds when the event timing ended, or NULL if the event has not ended or timing is not collected.',\n  `TIMER_WAIT` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds of the event''s duration or NULL if the event has not ended or timing is not collected.',\n  `WORK_COMPLETED` bigint(20) unsigned DEFAULT NULL COMMENT 'The number of work units completed for the stage. NULL if the stage event progress is not instrumented.',\n  `WORK_ESTIMATED` bigint(20) unsigned DEFAULT NULL COMMENT 'The number of work units expected for the stage. NULL if the stage event progress is not instrumented.',\n  `NESTING_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'EVENT_ID of event within which this event nests.',\n  `NESTING_EVENT_TYPE` enum('TRANSACTION','STATEMENT','STAGE','WAIT') DEFAULT NULL COMMENT 'Nesting event type. Either transaction, statement, stage or wait.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "THREAD_ID": {
                "type": "bigint",
                "description": "A numeric thread identifier to associate the event with a thread"
            },
            "EVENT_ID": {
                "type": "bigint",
                "description": "A numeric identifier for the event, unique per thread"
            },
            "END_EVENT_ID": {
                "type": "bigint",
                "description": "The EVENT_ID at which this event ended, NULL if not ended"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the instrument that produced this event"
            },
            "SOURCE": {
                "type": "varchar",
                "description": "The source code location that triggered the event"
            },
            "TIMER_START": {
                "type": "bigint",
                "description": "The start time of the event, in picoseconds since a specific point in time"
            },
            "TIMER_END": {
                "type": "bigint",
                "description": "The end time of the event, in picoseconds since a specific point in time"
            },
            "TIMER_WAIT": {
                "type": "bigint",
                "description": "The duration of the event in picoseconds, calculated as TIMER_END - TIMER_START"
            },
            "WORK_COMPLETED": {
                "type": "bigint",
                "description": "Amount of work completed during the event"
            },
            "WORK_ESTIMATED": {
                "type": "bigint",
                "description": "The estimated amount of work for the event"
            },
            "NESTING_EVENT_ID": {
                "type": "bigint",
                "description": "The EVENT_ID of the event within which this event is nested"
            },
            "NESTING_EVENT_TYPE": {
                "type": "enum",
                "description": "The type of the event (stage, statement, wait) in which this event is nested"
            }
        },
        "description": "The `events_stages_history` table in the Performance Schema of MySQL stores recent events for completed stages for each thread. It helps in tracking the performance and efficiency of various stages of query execution within the server, assisting in pinpointing areas that may need optimization."
    },
    "events_stages_history_long": {
        "ddl": "CREATE TABLE `events_stages_history_long` (\n  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread associated with the event. Together with EVENT_ID uniquely identifies the row.',\n  `EVENT_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread''s current event number at the start of the event. Together with THREAD_ID uniquely identifies the row.',\n  `END_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'NULL when the event starts, set to the thread''s current event number at the end of the event.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event instrument name and a NAME from the setup_instruments table',\n  `SOURCE` varchar(64) DEFAULT NULL COMMENT 'Name and line number of the source file containing the instrumented code that produced the event.',\n  `TIMER_START` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds when the event timing started or NULL if timing is not collected.',\n  `TIMER_END` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds when the event timing ended, or NULL if the event has not ended or timing is not collected.',\n  `TIMER_WAIT` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds of the event''s duration or NULL if the event has not ended or timing is not collected.',\n  `WORK_COMPLETED` bigint(20) unsigned DEFAULT NULL COMMENT 'The number of work units completed for the stage. NULL if the stage event progress is not instrumented.',\n  `WORK_ESTIMATED` bigint(20) unsigned DEFAULT NULL COMMENT 'The number of work units expected for the stage. NULL if the stage event progress is not instrumented.',\n  `NESTING_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'EVENT_ID of event within which this event nests.',\n  `NESTING_EVENT_TYPE` enum('TRANSACTION','STATEMENT','STAGE','WAIT') DEFAULT NULL COMMENT 'Nesting event type. Either transaction, statement, stage or wait.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "THREAD_ID": {
                "type": "bigint",
                "description": "A numerical identifier for the thread that the event occurred on"
            },
            "EVENT_ID": {
                "type": "bigint",
                "description": "A number that uniquely identifies the event"
            },
            "END_EVENT_ID": {
                "type": "bigint",
                "description": "The EVENT_ID at which the event ended, NULL for currently running events"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the instrumented stage event"
            },
            "SOURCE": {
                "type": "varchar",
                "description": "The source file and line number for the event instrument"
            },
            "TIMER_START": {
                "type": "bigint",
                "description": "Start time of the event in picoseconds since some arbitrary point"
            },
            "TIMER_END": {
                "type": "bigint",
                "description": "End time of the event in picoseconds since some arbitrary point"
            },
            "TIMER_WAIT": {
                "type": "bigint",
                "description": "The total time the event took in picoseconds"
            },
            "WORK_COMPLETED": {
                "type": "bigint",
                "description": "Amount of work completed during the event, in abstract units"
            },
            "WORK_ESTIMATED": {
                "type": "bigint",
                "description": "Total amount of work estimated for the event, in abstract units"
            },
            "NESTING_EVENT_ID": {
                "type": "bigint",
                "description": "EVENT_ID of the immediate parent statement or stage"
            },
            "NESTING_EVENT_TYPE": {
                "type": "enum",
                "description": "Type of the nested event (stage, statement, etc.)"
            }
        },
        "description": "The `events_stages_history_long` table in Performance Schema is used to record a history of completed stage events, providing insights into the execution stages of server operations over a longer period. It retains more events than `events_stages_history`, offering a deeper historical analysis of stage event execution for performance tuning and troubleshooting."
    },
    "events_stages_summary_by_account_by_event_name": {
        "ddl": "CREATE TABLE `events_stages_summary_by_account_by_event_name` (\n  `USER` char(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'User. Used together with HOST and EVENT_NAME for grouping events.',\n  `HOST` char(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'Host. Used together with USER and EVENT_NAME for grouping events.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name. Used together with USER and HOST for grouping events.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events, which includes all timed and untimed events.',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the timed summarized events.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the timed summarized events.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the timed summarized events.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the timed summarized events.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "USER": {
                "type": "char",
                "description": "The MySQL account's user name part of the account that executed the instrumented stage event."
            },
            "HOST": {
                "type": "char",
                "description": "The MySQL account's host name part of the account that executed the instrumented stage event."
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the instrumented stage event."
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The number of occurrences of the instrumented stage event."
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total wait time of the instrumented stage event."
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum wait time of the instrumented stage event."
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average wait time of the instrumented stage event."
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum wait time of the instrumented stage event."
            }
        },
        "description": "The `events_stages_summary_by_account_by_event_name` table in the MySQL Performance Schema is used to aggregate stage event statistics by account and by event name. This allows for analyzing stage event performance and resource usage, facilitating the identification of areas that might benefit from optimization for specific accounts and stages within your MySQL server operations."
    },
    "events_stages_summary_by_host_by_event_name": {
        "ddl": "CREATE TABLE `events_stages_summary_by_host_by_event_name` (\n  `HOST` char(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'Host. Used together with EVENT_NAME for grouping events.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name. Used together with HOST for grouping events.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events, which includes all timed and untimed events.',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the timed summarized events.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the timed summarized events.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the timed summarized events.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the timed summarized events.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "HOST": {
                "type": "char",
                "description": "The host name of the client that issued the statement, or NULL for internal threads."
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the instrumentation event."
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The number of summarized events."
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total wait time for the summarized events."
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum wait time for the summarized events."
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average wait time for the summarized events."
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum wait time for the summarized events."
            }
        },
        "description": "The table `events_stages_summary_by_host_by_event_name` in the MySQL Performance Schema is used to collect summarized performance data about staged events, categorized by the host that issued the query and the name of the stage event. This aids in identifying and analyzing stage event performance issues, including execution time and occurrences, across different hosts."
    },
    "events_stages_summary_by_thread_by_event_name": {
        "ddl": "CREATE TABLE `events_stages_summary_by_thread_by_event_name` (\n  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread associated with the event. Together with EVENT_NAME uniquely identifies the row.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name. Used together with THREAD_ID for grouping events.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events, which includes all timed and untimed events.',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the timed summarized events.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the timed summarized events.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the timed summarized events.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the timed summarized events.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "THREAD_ID": {
                "type": "bigint",
                "description": "The thread identifier for which the summary is being collected"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the instrumentation point"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The number of summarized events"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total time spent in the events"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum timer wait for the summarized events"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average timer wait for the summarized events"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum timer wait for the summarized events"
            }
        },
        "description": "The `events_stages_summary_by_thread_by_event_name` table in the Performance Schema of MySQL aggregates stage event summaries per thread, organized by event name. It is useful for analyzing stage events (specific steps that are part of executing commands) within each thread, helping to identify performance bottlenecks at a granular level."
    },
    "events_stages_summary_by_user_by_event_name": {
        "ddl": "CREATE TABLE `events_stages_summary_by_user_by_event_name` (\n  `USER` char(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'User. Used together with EVENT_NAME for grouping events.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name. Used together with USER for grouping events.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events, which includes all timed and untimed events.',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the timed summarized events.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the timed summarized events.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the timed summarized events.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the timed summarized events.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "USER": {
                "type": "char",
                "description": "The user who triggered the stage event."
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the stage event."
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The number of times this event occurred."
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total time spent in the stage event, in picoseconds."
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum time spent in any single occurrence of this stage event, in picoseconds."
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average time spent in the stage event, in picoseconds."
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum time spent in any single occurrence of this stage event, in picoseconds."
            }
        },
        "description": "The `events_stages_summary_by_user_by_event_name` table in the Performance Schema of MySQL aggregates stage events, summarizing them by user and event name. This table is useful for identifying which stage events are consuming the most time for each user, helping in performance tuning and identifying inefficient operations or configurations per user."
    },
    "events_stages_summary_global_by_event_name": {
        "ddl": "CREATE TABLE `events_stages_summary_global_by_event_name` (\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events, which includes all timed and untimed events.',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the timed summarized events.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the timed summarized events.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the timed summarized events.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the timed summarized events.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the instrumented stage event."
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The number of times an instrumented stage event occurred."
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total time spent in the instrumented stage event, in picoseconds."
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum time spent in a single occurrence of the instrumented stage event, in picoseconds."
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average time spent per occurrence of the instrumented stage event, in picoseconds."
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum time spent in a single occurrence of the instrumented stage event, in picoseconds."
            }
        },
        "description": "The `events_stages_summary_global_by_event_name` table aggregates stage event statistics globally, grouping by the stage event name. It provides insights about stage event execution counts, total time spent, and average timing, facilitating the analysis of stage event performance across the entire MySQL server."
    },
    "events_statements_current": {
        "ddl": "CREATE TABLE `events_statements_current` (\n  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread associated with the event. Together with EVENT_ID uniquely identifies the row.',\n  `EVENT_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread''s current event number at the start of the event. Together with THREAD_ID uniquely identifies the row.',\n  `END_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'NULL when the event starts, set to the thread''s current event number at the end of the event.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event instrument name and a NAME from the setup_instruments table',\n  `SOURCE` varchar(64) DEFAULT NULL COMMENT 'Name and line number of the source file containing the instrumented code that produced the event.',\n  `TIMER_START` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds when the event timing started or NULL if timing is not collected.',\n  `TIMER_END` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds when the event timing ended, or NULL if the event has not ended or timing is not collected.',\n  `TIMER_WAIT` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds of the event''s duration or NULL if the event has not ended or timing is not collected.',\n  `LOCK_TIME` bigint(20) unsigned NOT NULL COMMENT 'Time in picoseconds spent waiting for locks. The time is calculated in microseconds but stored in picoseconds for compatibility with other timings.',\n  `SQL_TEXT` longtext DEFAULT NULL COMMENT 'The SQL statement, or NULL if the command is not associated with an SQL statement.',\n  `DIGEST` varchar(32) DEFAULT NULL COMMENT 'Statement digest.',\n  `DIGEST_TEXT` longtext DEFAULT NULL COMMENT 'Statement digest text.',\n  `CURRENT_SCHEMA` varchar(64) DEFAULT NULL COMMENT 'Statement''s default database for the statement, or NULL if there was none.',\n  `OBJECT_TYPE` varchar(64) DEFAULT NULL COMMENT 'NULL for top level statements. The parent statement object type for nested statements (stored programs).',\n  `OBJECT_SCHEMA` varchar(64) DEFAULT NULL COMMENT 'NULL for top level statements. The parent statement object schema for nested statements (stored programs).',\n  `OBJECT_NAME` varchar(64) DEFAULT NULL COMMENT 'NULL for top level statements. The parent statement object name for nested statements (stored programs).',\n  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned DEFAULT NULL COMMENT 'Address in memory of the statement object.',\n  `MYSQL_ERRNO` int(11) DEFAULT NULL COMMENT 'Error code. See MariaDB Error Codes for a full list.',\n  `RETURNED_SQLSTATE` varchar(5) DEFAULT NULL COMMENT 'The SQLSTATE value.',\n  `MESSAGE_TEXT` varchar(128) DEFAULT NULL COMMENT 'Statement error message. See MariaDB Error Codes.',\n  `ERRORS` bigint(20) unsigned NOT NULL COMMENT '0 if SQLSTATE signifies completion (starting with 00) or warning (01), otherwise 1.',\n  `WARNINGS` bigint(20) unsigned NOT NULL COMMENT 'Number of warnings from the diagnostics area.',\n  `ROWS_AFFECTED` bigint(20) unsigned NOT NULL COMMENT 'Number of rows affected the statement affected.',\n  `ROWS_SENT` bigint(20) unsigned NOT NULL COMMENT 'Number of rows returned.',\n  `ROWS_EXAMINED` bigint(20) unsigned NOT NULL COMMENT 'Number of rows read during the statement''s execution.',\n  `CREATED_TMP_DISK_TABLES` bigint(20) unsigned NOT NULL COMMENT 'Number of on-disk temp tables created by the statement.',\n  `CREATED_TMP_TABLES` bigint(20) unsigned NOT NULL COMMENT 'Number of temp tables created by the statement.',\n  `SELECT_FULL_JOIN` bigint(20) unsigned NOT NULL COMMENT 'Number of joins performed by the statement which did not use an index.',\n  `SELECT_FULL_RANGE_JOIN` bigint(20) unsigned NOT NULL COMMENT 'Number of joins performed by the statement which used a range search of the first table.',\n  `SELECT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'Number of joins performed by the statement which used a range of the first table.',\n  `SELECT_RANGE_CHECK` bigint(20) unsigned NOT NULL COMMENT 'Number of joins without keys performed by the statement that check for key usage after each row.',\n  `SELECT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'Number of joins performed by the statement which used a full scan of the first table.',\n  `SORT_MERGE_PASSES` bigint(20) unsigned NOT NULL COMMENT 'Number of merge passes by the sort algorithm performed by the statement. If too high, you may need to increase the sort_buffer_size.',\n  `SORT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'Number of sorts performed by the statement which used a range.',\n  `SORT_ROWS` bigint(20) unsigned NOT NULL COMMENT 'Number of rows sorted by the statement.',\n  `SORT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'Number of sorts performed by the statement which used a full table scan.',\n  `NO_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT '0 if the statement performed a table scan with an index, 1 if without an index.',\n  `NO_GOOD_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT '0 if a good index was found for the statement, 1 if no good index was found. See the Range checked for each record description in the EXPLAIN article.',\n  `NESTING_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'NULL for top level statements. The parent statement event id for nested statements (stored programs).',\n  `NESTING_EVENT_TYPE` enum('TRANSACTION','STATEMENT','STAGE','WAIT') DEFAULT NULL COMMENT 'NULL for top level statements. The parent statement event type for nested statements (stored programs).',\n  `NESTING_EVENT_LEVEL` int(11) DEFAULT NULL COMMENT '0 for top level statements. The parent statement level plus 1 for nested statements (stored programs).'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "THREAD_ID": {
                "type": "bigint",
                "description": "Numeric ID of the thread that executed the event"
            },
            "EVENT_ID": {
                "type": "bigint",
                "description": "Numeric ID of the current event"
            },
            "END_EVENT_ID": {
                "type": "bigint",
                "description": "End event ID for timed events"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "Name of the instrumented event"
            },
            "SOURCE": {
                "type": "varchar",
                "description": "Source code location of the instrumented event"
            },
            "TIMER_START": {
                "type": "bigint",
                "description": "Start time of the event as a high-resolution timer value"
            },
            "TIMER_END": {
                "type": "bigint",
                "description": "End time of the event as a high-resolution timer value"
            },
            "TIMER_WAIT": {
                "type": "bigint",
                "description": "Duration of the timed event"
            },
            "LOCK_TIME": {
                "type": "bigint",
                "description": "Time spent waiting for locks during the event"
            },
            "SQL_TEXT": {
                "type": "longtext",
                "description": "The SQL text of the statement"
            },
            "DIGEST": {
                "type": "varchar",
                "description": "The statement digest hash"
            },
            "DIGEST_TEXT": {
                "type": "longtext",
                "description": "Normalized statement digest text"
            },
            "CURRENT_SCHEMA": {
                "type": "varchar",
                "description": "Default database for the thread when the event started"
            },
            "OBJECT_TYPE": {
                "type": "varchar",
                "description": "Type of object accessed or affected by the event"
            },
            "OBJECT_SCHEMA": {
                "type": "varchar",
                "description": "Schema of the object accessed or affected"
            },
            "OBJECT_NAME": {
                "type": "varchar",
                "description": "Name of the object accessed or affected"
            },
            "OBJECT_INSTANCE_BEGIN": {
                "type": "bigint",
                "description": "Address in memory of the object"
            },
            "MYSQL_ERRNO": {
                "type": "int",
                "description": "MySQL error number if an error occurred"
            },
            "RETURNED_SQLSTATE": {
                "type": "varchar",
                "description": "SQLSTATE code returned by the event"
            },
            "MESSAGE_TEXT": {
                "type": "varchar",
                "description": "Error message or detail about the event"
            },
            "ERRORS": {
                "type": "bigint",
                "description": "Number of errors that occurred during event execution"
            },
            "WARNINGS": {
                "type": "bigint",
                "description": "Number of warnings that occurred during event execution"
            },
            "ROWS_AFFECTED": {
                "type": "bigint",
                "description": "Number of rows affected by the event"
            },
            "ROWS_SENT": {
                "type": "bigint",
                "description": "Number of rows sent by the event"
            },
            "ROWS_EXAMINED": {
                "type": "bigint",
                "description": "Number of rows examined by the event"
            },
            "CREATED_TMP_DISK_TABLES": {
                "type": "bigint",
                "description": "Number of temporary disk tables created by the event"
            },
            "CREATED_TMP_TABLES": {
                "type": "bigint",
                "description": "Number of in-memory temporary tables created by the event"
            },
            "SELECT_FULL_JOIN": {
                "type": "bigint",
                "description": "Number of full joins performed by the event"
            },
            "SELECT_FULL_RANGE_JOIN": {
                "type": "bigint",
                "description": "Number of range searches on reference tables performed by the event"
            },
            "SELECT_RANGE": {
                "type": "bigint",
                "description": "Number of range conditions checked by the event"
            },
            "SELECT_RANGE_CHECK": {
                "type": "bigint",
                "description": "Number of range-checked joins without keys performed by the event"
            },
            "SELECT_SCAN": {
                "type": "bigint",
                "description": "Number of full table scans performed by the event"
            },
            "SORT_MERGE_PASSES": {
                "type": "bigint",
                "description": "Number of merge passes by the sort algorithm during the event"
            },
            "SORT_RANGE": {
                "type": "bigint",
                "description": "Number of sorts that were done on ranges"
            },
            "SORT_ROWS": {
                "type": "bigint",
                "description": "Number of sorted rows during the event"
            },
            "SORT_SCAN": {
                "type": "bigint",
                "description": "Number of scans of sorted data during the event"
            },
            "NO_INDEX_USED": {
                "type": "bigint",
                "description": "Flag indicating whether the event involved table scans without using an index"
            },
            "NO_GOOD_INDEX_USED": {
                "type": "bigint",
                "description": "Flag indicating that a better index could have been used"
            },
            "NESTING_EVENT_ID": {
                "type": "bigint",
                "description": "Event ID of the immediate parent event"
            },
            "NESTING_EVENT_TYPE": {
                "type": "enum",
                "description": "Type of the immediate parent event (statement/stage/wait)"
            },
            "NESTING_EVENT_LEVEL": {
                "type": "int",
                "description": "Depth of nesting of the current event"
            }
        },
        "description": "The `events_statements_current` table within the MySQL Performance Schema is used to monitor and record current statement events. It provides detailed information about each SQL statement that is actively being executed, including timing, errors, and resource usage."
    },
    "events_statements_history": {
        "ddl": "CREATE TABLE `events_statements_history` (\n  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread associated with the event. Together with EVENT_ID uniquely identifies the row.',\n  `EVENT_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread''s current event number at the start of the event. Together with THREAD_ID uniquely identifies the row.',\n  `END_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'NULL when the event starts, set to the thread''s current event number at the end of the event.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event instrument name and a NAME from the setup_instruments table',\n  `SOURCE` varchar(64) DEFAULT NULL COMMENT 'Name and line number of the source file containing the instrumented code that produced the event.',\n  `TIMER_START` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds when the event timing started or NULL if timing is not collected.',\n  `TIMER_END` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds when the event timing ended, or NULL if the event has not ended or timing is not collected.',\n  `TIMER_WAIT` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds of the event''s duration or NULL if the event has not ended or timing is not collected.',\n  `LOCK_TIME` bigint(20) unsigned NOT NULL COMMENT 'Time in picoseconds spent waiting for locks. The time is calculated in microseconds but stored in picoseconds for compatibility with other timings.',\n  `SQL_TEXT` longtext DEFAULT NULL COMMENT 'The SQL statement, or NULL if the command is not associated with an SQL statement.',\n  `DIGEST` varchar(32) DEFAULT NULL COMMENT 'Statement digest.',\n  `DIGEST_TEXT` longtext DEFAULT NULL COMMENT 'Statement digest text.',\n  `CURRENT_SCHEMA` varchar(64) DEFAULT NULL COMMENT 'Statement''s default database for the statement, or NULL if there was none.',\n  `OBJECT_TYPE` varchar(64) DEFAULT NULL COMMENT 'NULL for top level statements. The parent statement object type for nested statements (stored programs).',\n  `OBJECT_SCHEMA` varchar(64) DEFAULT NULL COMMENT 'NULL for top level statements. The parent statement object schema for nested statements (stored programs).',\n  `OBJECT_NAME` varchar(64) DEFAULT NULL COMMENT 'NULL for top level statements. The parent statement object name for nested statements (stored programs).',\n  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned DEFAULT NULL COMMENT 'Address in memory of the statement object.',\n  `MYSQL_ERRNO` int(11) DEFAULT NULL COMMENT 'Error code. See MariaDB Error Codes for a full list.',\n  `RETURNED_SQLSTATE` varchar(5) DEFAULT NULL COMMENT 'The SQLSTATE value.',\n  `MESSAGE_TEXT` varchar(128) DEFAULT NULL COMMENT 'Statement error message. See MariaDB Error Codes.',\n  `ERRORS` bigint(20) unsigned NOT NULL COMMENT '0 if SQLSTATE signifies completion (starting with 00) or warning (01), otherwise 1.',\n  `WARNINGS` bigint(20) unsigned NOT NULL COMMENT 'Number of warnings from the diagnostics area.',\n  `ROWS_AFFECTED` bigint(20) unsigned NOT NULL COMMENT 'Number of rows affected the statement affected.',\n  `ROWS_SENT` bigint(20) unsigned NOT NULL COMMENT 'Number of rows returned.',\n  `ROWS_EXAMINED` bigint(20) unsigned NOT NULL COMMENT 'Number of rows read during the statement''s execution.',\n  `CREATED_TMP_DISK_TABLES` bigint(20) unsigned NOT NULL COMMENT 'Number of on-disk temp tables created by the statement.',\n  `CREATED_TMP_TABLES` bigint(20) unsigned NOT NULL COMMENT 'Number of temp tables created by the statement.',\n  `SELECT_FULL_JOIN` bigint(20) unsigned NOT NULL COMMENT 'Number of joins performed by the statement which did not use an index.',\n  `SELECT_FULL_RANGE_JOIN` bigint(20) unsigned NOT NULL COMMENT 'Number of joins performed by the statement which used a range search of the first table.',\n  `SELECT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'Number of joins performed by the statement which used a range of the first table.',\n  `SELECT_RANGE_CHECK` bigint(20) unsigned NOT NULL COMMENT 'Number of joins without keys performed by the statement that check for key usage after each row.',\n  `SELECT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'Number of joins performed by the statement which used a full scan of the first table.',\n  `SORT_MERGE_PASSES` bigint(20) unsigned NOT NULL COMMENT 'Number of merge passes by the sort algorithm performed by the statement. If too high, you may need to increase the sort_buffer_size.',\n  `SORT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'Number of sorts performed by the statement which used a range.',\n  `SORT_ROWS` bigint(20) unsigned NOT NULL COMMENT 'Number of rows sorted by the statement.',\n  `SORT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'Number of sorts performed by the statement which used a full table scan.',\n  `NO_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT '0 if the statement performed a table scan with an index, 1 if without an index.',\n  `NO_GOOD_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT '0 if a good index was found for the statement, 1 if no good index was found. See the Range checked for each record description in the EXPLAIN article.',\n  `NESTING_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'NULL for top level statements. The parent statement event id for nested statements (stored programs).',\n  `NESTING_EVENT_TYPE` enum('TRANSACTION','STATEMENT','STAGE','WAIT') DEFAULT NULL COMMENT 'NULL for top level statements. The parent statement event type for nested statements (stored programs).',\n  `NESTING_EVENT_LEVEL` int(11) DEFAULT NULL COMMENT '0 for top level statements. The parent statement level plus 1 for nested statements (stored programs).'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "THREAD_ID": {
                "type": "bigint",
                "description": "Identifier for the thread that issued the statement."
            },
            "EVENT_ID": {
                "type": "bigint",
                "description": "An increasing number for each event."
            },
            "END_EVENT_ID": {
                "type": "bigint",
                "description": "The event number at which this event ended."
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "Name of the event."
            },
            "SOURCE": {
                "type": "varchar",
                "description": "The source code location that triggered the event."
            },
            "TIMER_START": {
                "type": "bigint",
                "description": "When the timing of the event started."
            },
            "TIMER_END": {
                "type": "bigint",
                "description": "When the timing of the event ended."
            },
            "TIMER_WAIT": {
                "type": "bigint",
                "description": "The total time the event waited, in picoseconds."
            },
            "LOCK_TIME": {
                "type": "bigint",
                "description": "Time spent waiting for locks, in picoseconds."
            },
            "SQL_TEXT": {
                "type": "longtext",
                "description": "The SQL statement as text."
            },
            "DIGEST": {
                "type": "varchar",
                "description": "A hash value computed from the SQL statement."
            },
            "DIGEST_TEXT": {
                "type": "longtext",
                "description": "Normalized statement text for aggregation purposes."
            },
            "CURRENT_SCHEMA": {
                "type": "varchar",
                "description": "The default database when the event started."
            },
            "OBJECT_TYPE": {
                "type": "varchar",
                "description": "The type of object (TABLE, VIEW, etc.) involved in the event if any."
            },
            "OBJECT_SCHEMA": {
                "type": "varchar",
                "description": "The schema of the object involved."
            },
            "OBJECT_NAME": {
                "type": "varchar",
                "description": "The name of the object involved."
            },
            "OBJECT_INSTANCE_BEGIN": {
                "type": "bigint",
                "description": "A memory address that identifies the object."
            },
            "MYSQL_ERRNO": {
                "type": "int",
                "description": "The error number if an error occurred."
            },
            "RETURNED_SQLSTATE": {
                "type": "varchar",
                "description": "The SQLSTATE returned by the statement."
            },
            "MESSAGE_TEXT": {
                "type": "varchar",
                "description": "A human readable message if an error occurred."
            },
            "ERRORS": {
                "type": "bigint",
                "description": "The number of errors that occurred during the statement's execution."
            },
            "WARNINGS": {
                "type": "bigint",
                "description": "The number of warnings that occurred during the statement's execution."
            },
            "ROWS_AFFECTED": {
                "type": "bigint",
                "description": "The number of rows affected by the statement."
            },
            "ROWS_SENT": {
                "type": "bigint",
                "description": "The number of rows returned to the client."
            },
            "ROWS_EXAMINED": {
                "type": "bigint",
                "description": "The number of rows examined on the storage engine level."
            },
            "CREATED_TMP_DISK_TABLES": {
                "type": "bigint",
                "description": "How many disk-temporary tables were created during execution."
            },
            "CREATED_TMP_TABLES": {
                "type": "bigint",
                "description": "How many temporary tables were created during execution."
            },
            "SELECT_FULL_JOIN": {
                "type": "bigint",
                "description": "The number of joins that performed full scans because no index was used."
            },
            "SELECT_FULL_RANGE_JOIN": {
                "type": "bigint",
                "description": "The number of joins that used a range search on a reference table."
            },
            "SELECT_RANGE": {
                "type": "bigint",
                "description": "The number of joins that used a range on the first table."
            },
            "SELECT_RANGE_CHECK": {
                "type": "bigint",
                "description": "The number of joins without keys that check for key usage after each row."
            },
            "SELECT_SCAN": {
                "type": "bigint",
                "description": "The number of joins that involved a full scan of the first table."
            },
            "SORT_MERGE_PASSES": {
                "type": "bigint",
                "description": "The number of merge passes the sort algorithm had to make."
            },
            "SORT_RANGE": {
                "type": "bigint",
                "description": "The number of sorts that were done using ranges."
            },
            "SORT_ROWS": {
                "type": "bigint",
                "description": "The number of sorted rows."
            },
            "SORT_SCAN": {
                "type": "bigint",
                "description": "The number of sorts that were done by scanning the table."
            },
            "NO_INDEX_USED": {
                "type": "bigint",
                "description": "A flag indicating that no index was used."
            },
            "NO_GOOD_INDEX_USED": {
                "type": "bigint",
                "description": "A flag indicating that no good index was used."
            },
            "NESTING_EVENT_ID": {
                "type": "bigint",
                "description": "The event ID of the event within which this event is nested."
            },
            "NESTING_EVENT_TYPE": {
                "type": "enum",
                "description": "The type of the nesting event."
            },
            "NESTING_EVENT_LEVEL": {
                "type": "int",
                "description": "The level of nesting for the event."
            }
        },
        "description": "The `events_statements_history` table in the Performance Schema stores a history of executed SQL statements on a per-thread basis. It provides detailed information about each statement, including timing, errors, number of rows affected, and the SQL text itself, allowing for performance analysis and troubleshooting of MySQL queries over time."
    },
    "events_statements_history_long": {
        "ddl": "CREATE TABLE `events_statements_history_long` (\n  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread associated with the event. Together with EVENT_ID uniquely identifies the row.',\n  `EVENT_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread''s current event number at the start of the event. Together with THREAD_ID uniquely identifies the row.',\n  `END_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'NULL when the event starts, set to the thread''s current event number at the end of the event.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event instrument name and a NAME from the setup_instruments table',\n  `SOURCE` varchar(64) DEFAULT NULL COMMENT 'Name and line number of the source file containing the instrumented code that produced the event.',\n  `TIMER_START` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds when the event timing started or NULL if timing is not collected.',\n  `TIMER_END` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds when the event timing ended, or NULL if the event has not ended or timing is not collected.',\n  `TIMER_WAIT` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds of the event''s duration or NULL if the event has not ended or timing is not collected.',\n  `LOCK_TIME` bigint(20) unsigned NOT NULL COMMENT 'Time in picoseconds spent waiting for locks. The time is calculated in microseconds but stored in picoseconds for compatibility with other timings.',\n  `SQL_TEXT` longtext DEFAULT NULL COMMENT 'The SQL statement, or NULL if the command is not associated with an SQL statement.',\n  `DIGEST` varchar(32) DEFAULT NULL COMMENT 'Statement digest.',\n  `DIGEST_TEXT` longtext DEFAULT NULL COMMENT 'Statement digest text.',\n  `CURRENT_SCHEMA` varchar(64) DEFAULT NULL COMMENT 'Statement''s default database for the statement, or NULL if there was none.',\n  `OBJECT_TYPE` varchar(64) DEFAULT NULL COMMENT 'NULL for top level statements. The parent statement object type for nested statements (stored programs).',\n  `OBJECT_SCHEMA` varchar(64) DEFAULT NULL COMMENT 'NULL for top level statements. The parent statement object schema for nested statements (stored programs).',\n  `OBJECT_NAME` varchar(64) DEFAULT NULL COMMENT 'NULL for top level statements. The parent statement object name for nested statements (stored programs).',\n  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned DEFAULT NULL COMMENT 'Address in memory of the statement object.',\n  `MYSQL_ERRNO` int(11) DEFAULT NULL COMMENT 'Error code. See MariaDB Error Codes for a full list.',\n  `RETURNED_SQLSTATE` varchar(5) DEFAULT NULL COMMENT 'The SQLSTATE value.',\n  `MESSAGE_TEXT` varchar(128) DEFAULT NULL COMMENT 'Statement error message. See MariaDB Error Codes.',\n  `ERRORS` bigint(20) unsigned NOT NULL COMMENT '0 if SQLSTATE signifies completion (starting with 00) or warning (01), otherwise 1.',\n  `WARNINGS` bigint(20) unsigned NOT NULL COMMENT 'Number of warnings from the diagnostics area.',\n  `ROWS_AFFECTED` bigint(20) unsigned NOT NULL COMMENT 'Number of rows affected the statement affected.',\n  `ROWS_SENT` bigint(20) unsigned NOT NULL COMMENT 'Number of rows returned.',\n  `ROWS_EXAMINED` bigint(20) unsigned NOT NULL COMMENT 'Number of rows read during the statement''s execution.',\n  `CREATED_TMP_DISK_TABLES` bigint(20) unsigned NOT NULL COMMENT 'Number of on-disk temp tables created by the statement.',\n  `CREATED_TMP_TABLES` bigint(20) unsigned NOT NULL COMMENT 'Number of temp tables created by the statement.',\n  `SELECT_FULL_JOIN` bigint(20) unsigned NOT NULL COMMENT 'Number of joins performed by the statement which did not use an index.',\n  `SELECT_FULL_RANGE_JOIN` bigint(20) unsigned NOT NULL COMMENT 'Number of joins performed by the statement which used a range search of the first table.',\n  `SELECT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'Number of joins performed by the statement which used a range of the first table.',\n  `SELECT_RANGE_CHECK` bigint(20) unsigned NOT NULL COMMENT 'Number of joins without keys performed by the statement that check for key usage after each row.',\n  `SELECT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'Number of joins performed by the statement which used a full scan of the first table.',\n  `SORT_MERGE_PASSES` bigint(20) unsigned NOT NULL COMMENT 'Number of merge passes by the sort algorithm performed by the statement. If too high, you may need to increase the sort_buffer_size.',\n  `SORT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'Number of sorts performed by the statement which used a range.',\n  `SORT_ROWS` bigint(20) unsigned NOT NULL COMMENT 'Number of rows sorted by the statement.',\n  `SORT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'Number of sorts performed by the statement which used a full table scan.',\n  `NO_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT '0 if the statement performed a table scan with an index, 1 if without an index.',\n  `NO_GOOD_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT '0 if a good index was found for the statement, 1 if no good index was found. See the Range checked for each record description in the EXPLAIN article.',\n  `NESTING_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'NULL for top level statements. The parent statement event id for nested statements (stored programs).',\n  `NESTING_EVENT_TYPE` enum('TRANSACTION','STATEMENT','STAGE','WAIT') DEFAULT NULL COMMENT 'NULL for top level statements. The parent statement event type for nested statements (stored programs).',\n  `NESTING_EVENT_LEVEL` int(11) DEFAULT NULL COMMENT '0 for top level statements. The parent statement level plus 1 for nested statements (stored programs).'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "THREAD_ID": {
                "type": "bigint",
                "description": "The thread associated with the event"
            },
            "EVENT_ID": {
                "type": "bigint",
                "description": "Unique identifier for the event"
            },
            "END_EVENT_ID": {
                "type": "bigint",
                "description": "Event ID of the corresponding end event"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "Name of the event"
            },
            "SOURCE": {
                "type": "varchar",
                "description": "Source code location that produced the event"
            },
            "TIMER_START": {
                "type": "bigint",
                "description": "Start time of the timer for the event"
            },
            "TIMER_END": {
                "type": "bigint",
                "description": "End time of the timer for the event"
            },
            "TIMER_WAIT": {
                "type": "bigint",
                "description": "Total wait time of the timer for the event"
            },
            "LOCK_TIME": {
                "type": "bigint",
                "description": "Time spent waiting for locks during the event"
            },
            "SQL_TEXT": {
                "type": "longtext",
                "description": "The SQL text of the statement"
            },
            "DIGEST": {
                "type": "varchar",
                "description": "The statement digest hash value"
            },
            "DIGEST_TEXT": {
                "type": "longtext",
                "description": "Normalized statement text"
            },
            "CURRENT_SCHEMA": {
                "type": "varchar",
                "description": "Default schema at the time of the event"
            },
            "OBJECT_TYPE": {
                "type": "varchar",
                "description": "Type of the object (e.g., TABLE, INDEX) involved in the event"
            },
            "OBJECT_SCHEMA": {
                "type": "varchar",
                "description": "Schema of the object involved in the event"
            },
            "OBJECT_NAME": {
                "type": "varchar",
                "description": "Name of the object involved in the event"
            },
            "OBJECT_INSTANCE_BEGIN": {
                "type": "bigint",
                "description": "Memory address of the object involved"
            },
            "MYSQL_ERRNO": {
                "type": "int",
                "description": "MySQL error number if an error occurred"
            },
            "RETURNED_SQLSTATE": {
                "type": "varchar",
                "description": "SQLSTATE returned by the statement"
            },
            "MESSAGE_TEXT": {
                "type": "varchar",
                "description": "Error message text if an error occurred"
            },
            "ERRORS": {
                "type": "bigint",
                "description": "Number of errors"
            },
            "WARNINGS": {
                "type": "bigint",
                "description": "Number of warnings"
            },
            "ROWS_AFFECTED": {
                "type": "bigint",
                "description": "Number of rows affected by the statement"
            },
            "ROWS_SENT": {
                "type": "bigint",
                "description": "Number of rows returned by the statement"
            },
            "ROWS_EXAMINED": {
                "type": "bigint",
                "description": "Number of rows examined by the statement"
            },
            "CREATED_TMP_DISK_TABLES": {
                "type": "bigint",
                "description": "Number of temporary disk tables created by the statement"
            },
            "CREATED_TMP_TABLES": {
                "type": "bigint",
                "description": "Number of temporary tables created by the statement"
            },
            "SELECT_FULL_JOIN": {
                "type": "bigint",
                "description": "Number of full joins"
            },
            "SELECT_FULL_RANGE_JOIN": {
                "type": "bigint",
                "description": "Number of full range joins"
            },
            "SELECT_RANGE": {
                "type": "bigint",
                "description": "Number of range selects"
            },
            "SELECT_RANGE_CHECK": {
                "type": "bigint",
                "description": "Number of range checks"
            },
            "SELECT_SCAN": {
                "type": "bigint",
                "description": "Number of full table scans"
            },
            "SORT_MERGE_PASSES": {
                "type": "bigint",
                "description": "Number of merge passes by the sort algorithm"
            },
            "SORT_RANGE": {
                "type": "bigint",
                "description": "Number of sorts that were done using ranges"
            },
            "SORT_ROWS": {
                "type": "bigint",
                "description": "Number of sorted rows"
            },
            "SORT_SCAN": {
                "type": "bigint",
                "description": "Number of scans sorted"
            },
            "NO_INDEX_USED": {
                "type": "bigint",
                "description": "Indicates if no index was used"
            },
            "NO_GOOD_INDEX_USED": {
                "type": "bigint",
                "description": "Indicates if no good index was used"
            },
            "NESTING_EVENT_ID": {
                "type": "bigint",
                "description": "Event ID of the nesting event"
            },
            "NESTING_EVENT_TYPE": {
                "type": "enum",
                "description": "Type of the nesting event"
            },
            "NESTING_EVENT_LEVEL": {
                "type": "int",
                "description": "Level of the nesting event"
            }
        },
        "description": "The `events_statements_history_long` table in the Performance Schema of MySQL is used to store a historical record of SQL statement execution metrics, capturing detailed performance and timing information about each statement. This table maintains a longer history of executed statements compared to `events_statements_history`, allowing for more in-depth analysis over an extended period."
    },
    "events_statements_summary_by_account_by_event_name": {
        "ddl": "CREATE TABLE `events_statements_summary_by_account_by_event_name` (\n  `USER` char(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'User. Used together with HOST and EVENT_NAME for grouping events.',\n  `HOST` char(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'Host. Used together with USER and EVENT_NAME for grouping events.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name. Used together with USER and HOST for grouping events.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the summarized events that are timed.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the summarized events that are timed.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the summarized events that are timed.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the summarized events that are timed.',\n  `SUM_LOCK_TIME` bigint(20) unsigned NOT NULL COMMENT 'Sum of the LOCK_TIME column in the events_statements_current table.',\n  `SUM_ERRORS` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ERRORS column in the events_statements_current table.',\n  `SUM_WARNINGS` bigint(20) unsigned NOT NULL COMMENT 'Sum of the WARNINGS column in the events_statements_current table.',\n  `SUM_ROWS_AFFECTED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ROWS_AFFECTED column in the events_statements_current table.',\n  `SUM_ROWS_SENT` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ROWS_SENT column in the events_statements_current table.',\n  `SUM_ROWS_EXAMINED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ROWS_EXAMINED column in the events_statements_current table.',\n  `SUM_CREATED_TMP_DISK_TABLES` bigint(20) unsigned NOT NULL COMMENT 'Sum of the CREATED_TMP_DISK_TABLES column in the events_statements_current table.',\n  `SUM_CREATED_TMP_TABLES` bigint(20) unsigned NOT NULL COMMENT 'Sum of the CREATED_TMP_TABLES column in the events_statements_current table.',\n  `SUM_SELECT_FULL_JOIN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_FULL_JOIN column in the events_statements_current table.',\n  `SUM_SELECT_FULL_RANGE_JOIN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_FULL_RANGE_JOIN column in the events_statements_current table.',\n  `SUM_SELECT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_RANGE column in the events_statements_current table.',\n  `SUM_SELECT_RANGE_CHECK` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_RANGE_CHECK column in the events_statements_current table.',\n  `SUM_SELECT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_SCAN column in the events_statements_current table.',\n  `SUM_SORT_MERGE_PASSES` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_MERGE_PASSES column in the events_statements_current table.',\n  `SUM_SORT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_RANGE column in the events_statements_current table.',\n  `SUM_SORT_ROWS` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_ROWS column in the events_statements_current table.',\n  `SUM_SORT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_SCAN column in the events_statements_current table.',\n  `SUM_NO_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the NO_INDEX_USED column in the events_statements_current table.',\n  `SUM_NO_GOOD_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the NO_GOOD_INDEX_USED column in the events_statements_current table.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "USER": {
                "type": "char",
                "description": "The user who issued the SQL statement"
            },
            "HOST": {
                "type": "char",
                "description": "The host from which the user issued the statement"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the instrumented event"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The number of times this event occurred"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total time spent on this event, in picoseconds"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum time spent on a single occurrence of the event, in picoseconds"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average time spent on the event, in picoseconds"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum time spent on a single occurrence of the event, in picoseconds"
            },
            "SUM_LOCK_TIME": {
                "type": "bigint",
                "description": "The total time spent waiting for locks, in picoseconds"
            },
            "SUM_ERRORS": {
                "type": "bigint",
                "description": "The total number of errors that occurred during the event"
            },
            "SUM_WARNINGS": {
                "type": "bigint",
                "description": "The total number of warnings that occurred during the event"
            },
            "SUM_ROWS_AFFECTED": {
                "type": "bigint",
                "description": "The total number of rows affected by the event"
            },
            "SUM_ROWS_SENT": {
                "type": "bigint",
                "description": "The total number of rows sent by the event"
            },
            "SUM_ROWS_EXAMINED": {
                "type": "bigint",
                "description": "The total number of rows examined by the event"
            },
            "SUM_CREATED_TMP_DISK_TABLES": {
                "type": "bigint",
                "description": "The total number of internal on-disk temporary tables created by the event"
            },
            "SUM_CREATED_TMP_TABLES": {
                "type": "bigint",
                "description": "The total number of internal temporary tables created by the event"
            },
            "SUM_SELECT_FULL_JOIN": {
                "type": "bigint",
                "description": "The total number of full joins"
            },
            "SUM_SELECT_FULL_RANGE_JOIN": {
                "type": "bigint",
                "description": "The total number of full range joins"
            },
            "SUM_SELECT_RANGE": {
                "type": "bigint",
                "description": "The total number of selects that used ranges"
            },
            "SUM_SELECT_RANGE_CHECK": {
                "type": "bigint",
                "description": "The total number of selects that checked ranges, but did not use them"
            },
            "SUM_SELECT_SCAN": {
                "type": "bigint",
                "description": "The total number of table scans"
            },
            "SUM_SORT_MERGE_PASSES": {
                "type": "bigint",
                "description": "The total number of merge passes by the sort algorithm"
            },
            "SUM_SORT_RANGE": {
                "type": "bigint",
                "description": "The total number of sorts that were done using ranges"
            },
            "SUM_SORT_ROWS": {
                "type": "bigint",
                "description": "The total number of sorted rows"
            },
            "SUM_SORT_SCAN": {
                "type": "bigint",
                "description": "The total number of sorts that used a table scan"
            },
            "SUM_NO_INDEX_USED": {
                "type": "bigint",
                "description": "The total number of queries that did not use an index"
            },
            "SUM_NO_GOOD_INDEX_USED": {
                "type": "bigint",
                "description": "The total number of queries that did not use a good index"
            }
        },
        "description": "The `events_statements_summary_by_account_by_event_name` table in the Performance Schema is used to aggregate statement event data by account and event name. It helps in identifying the type and frequency of SQL statements executed by each account, aiding in performance analysis and troubleshooting."
    },
    "events_statements_summary_by_digest": {
        "ddl": "CREATE TABLE `events_statements_summary_by_digest` (\n  `SCHEMA_NAME` varchar(64) DEFAULT NULL COMMENT 'Database name. Records are summarised together with DIGEST.',\n  `DIGEST` varchar(32) DEFAULT NULL COMMENT 'Performance Schema digest. Records are summarised together with SCHEMA NAME.',\n  `DIGEST_TEXT` longtext DEFAULT NULL COMMENT 'The unhashed form of the digest.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the summarized events that are timed.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the summarized events that are timed.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the summarized events that are timed.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the summarized events that are timed.',\n  `SUM_LOCK_TIME` bigint(20) unsigned NOT NULL COMMENT 'Sum of the LOCK_TIME column in the events_statements_current table.',\n  `SUM_ERRORS` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ERRORS column in the events_statements_current table.',\n  `SUM_WARNINGS` bigint(20) unsigned NOT NULL COMMENT 'Sum of the WARNINGS column in the events_statements_current table.',\n  `SUM_ROWS_AFFECTED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ROWS_AFFECTED column in the events_statements_current table.',\n  `SUM_ROWS_SENT` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ROWS_SENT column in the events_statements_current table.',\n  `SUM_ROWS_EXAMINED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ROWS_EXAMINED column in the events_statements_current table.',\n  `SUM_CREATED_TMP_DISK_TABLES` bigint(20) unsigned NOT NULL COMMENT 'Sum of the CREATED_TMP_DISK_TABLES column in the events_statements_current table.',\n  `SUM_CREATED_TMP_TABLES` bigint(20) unsigned NOT NULL COMMENT 'Sum of the CREATED_TMP_TABLES column in the events_statements_current table.',\n  `SUM_SELECT_FULL_JOIN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_FULL_JOIN column in the events_statements_current table.',\n  `SUM_SELECT_FULL_RANGE_JOIN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_FULL_RANGE_JOIN column in the events_statements_current table.',\n  `SUM_SELECT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_RANGE column in the events_statements_current table.',\n  `SUM_SELECT_RANGE_CHECK` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_RANGE_CHECK column in the events_statements_current table.',\n  `SUM_SELECT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_SCAN column in the events_statements_current table.',\n  `SUM_SORT_MERGE_PASSES` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_MERGE_PASSES column in the events_statements_current table.',\n  `SUM_SORT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_RANGE column in the events_statements_current table.',\n  `SUM_SORT_ROWS` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_ROWS column in the events_statements_current table.',\n  `SUM_SORT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_SCAN column in the events_statements_current table.',\n  `SUM_NO_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the NO_INDEX_USED column in the events_statements_current table.',\n  `SUM_NO_GOOD_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the NO_GOOD_INDEX_USED column in the events_statements_current table.',\n  `FIRST_SEEN` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT 'Time at which the digest was first seen.',\n  `LAST_SEEN` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT 'Time at which the digest was most recently seen.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "SCHEMA_NAME": {
                "type": "varchar",
                "description": "Name of the schema to which the summarized event belongs"
            },
            "DIGEST": {
                "type": "varchar",
                "description": "Unique identifier for the normalized statement"
            },
            "DIGEST_TEXT": {
                "type": "longtext",
                "description": "Normalized statement text"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "Number of summarized events"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "Total wait time of the summarized events"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "Minimum wait time of the summarized events"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "Average wait time of the summarized events"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "Maximum wait time of the summarized events"
            },
            "SUM_LOCK_TIME": {
                "type": "bigint",
                "description": "Total time spent waiting for locks by the summarized events"
            },
            "SUM_ERRORS": {
                "type": "bigint",
                "description": "Total number of errors for the summarized events"
            },
            "SUM_WARNINGS": {
                "type": "bigint",
                "description": "Total number of warnings for the summarized events"
            },
            "SUM_ROWS_AFFECTED": {
                "type": "bigint",
                "description": "Total number of rows affected by the summarized events"
            },
            "SUM_ROWS_SENT": {
                "type": "bigint",
                "description": "Total number of rows sent by the summarized events"
            },
            "SUM_ROWS_EXAMINED": {
                "type": "bigint",
                "description": "Total number of rows examined by the summarized events"
            },
            "SUM_CREATED_TMP_DISK_TABLES": {
                "type": "bigint",
                "description": "Total number of internal on-disk temporary tables created by the summarized events"
            },
            "SUM_CREATED_TMP_TABLES": {
                "type": "bigint",
                "description": "Total number of internal temporary tables created by the summarized events"
            },
            "SUM_SELECT_FULL_JOIN": {
                "type": "bigint",
                "description": "Total number of full joins performed by the summarized events"
            },
            "SUM_SELECT_FULL_RANGE_JOIN": {
                "type": "bigint",
                "description": "Total number of full range joins performed by the summarized events"
            },
            "SUM_SELECT_RANGE": {
                "type": "bigint",
                "description": "Total number of range selections performed by the summarized events"
            },
            "SUM_SELECT_RANGE_CHECK": {
                "type": "bigint",
                "description": "Total number of range checks performed by the summarized events"
            },
            "SUM_SELECT_SCAN": {
                "type": "bigint",
                "description": "Total number of full table scans performed by the summarized events"
            },
            "SUM_SORT_MERGE_PASSES": {
                "type": "bigint",
                "description": "Total number of merge passes by the sort algorithm for the summarized events"
            },
            "SUM_SORT_RANGE": {
                "type": "bigint",
                "description": "Total number of sorts that used ranges for the summarized events"
            },
            "SUM_SORT_ROWS": {
                "type": "bigint",
                "description": "Total number of sorted rows for the summarized events"
            },
            "SUM_SORT_SCAN": {
                "type": "bigint",
                "description": "Total number of sorts that did a full table scan for the summarized events"
            },
            "SUM_NO_INDEX_USED": {
                "type": "bigint",
                "description": "Total number of summarized events where no index was used"
            },
            "SUM_NO_GOOD_INDEX_USED": {
                "type": "bigint",
                "description": "Total number of summarized events where no good index was used"
            },
            "FIRST_SEEN": {
                "type": "timestamp",
                "description": "Timestamp when the summarized event was first seen"
            },
            "LAST_SEEN": {
                "type": "timestamp",
                "description": "Timestamp when the summarized event was last seen"
            }
        },
        "description": "This table summarizes statement events by their digest, statements and queries, providing aggregated metrics such as execution time, CPU time, and number of executions for each unique query pattern or digest. Digest means queries or statements"
    },
    "events_statements_summary_by_host_by_event_name": {
        "ddl": "CREATE TABLE `events_statements_summary_by_host_by_event_name` (\n  `HOST` char(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'Host. Used together with EVENT_NAME for grouping events.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name. Used together with HOST for grouping events.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the summarized events that are timed.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the summarized events that are timed.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the summarized events that are timed.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the summarized events that are timed.',\n  `SUM_LOCK_TIME` bigint(20) unsigned NOT NULL COMMENT 'Sum of the LOCK_TIME column in the events_statements_currentd table.',\n  `SUM_ERRORS` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ERRORS column in the events_statements_current table.',\n  `SUM_WARNINGS` bigint(20) unsigned NOT NULL COMMENT 'Sum of the WARNINGS column in the events_statements_current table.',\n  `SUM_ROWS_AFFECTED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ROWS_AFFECTED column in the events_statements_current table.',\n  `SUM_ROWS_SENT` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ROWS_SENT column in the events_statements_current table.',\n  `SUM_ROWS_EXAMINED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ROWS_EXAMINED column in the events_statements_current table.',\n  `SUM_CREATED_TMP_DISK_TABLES` bigint(20) unsigned NOT NULL COMMENT 'Sum of the CREATED_TMP_DISK_TABLES column in the events_statements_current table.',\n  `SUM_CREATED_TMP_TABLES` bigint(20) unsigned NOT NULL COMMENT 'Sum of the CREATED_TMP_TABLES column in the events_statements_current table.',\n  `SUM_SELECT_FULL_JOIN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_FULL_JOIN column in the events_statements_current table.',\n  `SUM_SELECT_FULL_RANGE_JOIN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_FULL_RANGE_JOINW column in the events_statements_current table.',\n  `SUM_SELECT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_RANGE column in the events_statements_current table.',\n  `SUM_SELECT_RANGE_CHECK` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_RANGE_CHECK column in the events_statements_current table.',\n  `SUM_SELECT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_SCAN column in the events_statements_current table.',\n  `SUM_SORT_MERGE_PASSES` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_MERGE_PASSES column in the events_statements_current table.',\n  `SUM_SORT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_RANGE column in the events_statements_current table.',\n  `SUM_SORT_ROWS` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_ROWS column in the events_statements_current table.',\n  `SUM_SORT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_SCAN column in the events_statements_current table.',\n  `SUM_NO_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the NO_INDEX_USED column in the events_statements_current table.',\n  `SUM_NO_GOOD_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the NO_GOOD_INDEX_USED column in the events_statements_current table.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "HOST": {
                "type": "char",
                "description": "The host name of the client that issued the statement"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the event"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The number of summarized events"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total wait time of the summarized events"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum wait time of the summarized events"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average wait time of the summarized events"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum wait time for any event"
            },
            "SUM_LOCK_TIME": {
                "type": "bigint",
                "description": "The total time spent waiting for locks"
            },
            "SUM_ERRORS": {
                "type": "bigint",
                "description": "The total number of errors"
            },
            "SUM_WARNINGS": {
                "type": "bigint",
                "description": "The total number of warnings"
            },
            "SUM_ROWS_AFFECTED": {
                "type": "bigint",
                "description": "The total number of rows affected"
            },
            "SUM_ROWS_SENT": {
                "type": "bigint",
                "description": "The total number of rows sent"
            },
            "SUM_ROWS_EXAMINED": {
                "type": "bigint",
                "description": "The total number of rows examined"
            },
            "SUM_CREATED_TMP_DISK_TABLES": {
                "type": "bigint",
                "description": "The total number of temporary disk tables created"
            },
            "SUM_CREATED_TMP_TABLES": {
                "type": "bigint",
                "description": "The total number of temporary tables created"
            },
            "SUM_SELECT_FULL_JOIN": {
                "type": "bigint",
                "description": "The total number of full joins"
            },
            "SUM_SELECT_FULL_RANGE_JOIN": {
                "type": "bigint",
                "description": "The total number of full range joins"
            },
            "SUM_SELECT_RANGE": {
                "type": "bigint",
                "description": "The total number of select range operations"
            },
            "SUM_SELECT_RANGE_CHECK": {
                "type": "bigint",
                "description": "The total number of select range checks"
            },
            "SUM_SELECT_SCAN": {
                "type": "bigint",
                "description": "The total number of table scans"
            },
            "SUM_SORT_MERGE_PASSES": {
                "type": "bigint",
                "description": "The total number of merge passes by the sort algorithm"
            },
            "SUM_SORT_RANGE": {
                "type": "bigint",
                "description": "The total number of sorts that were done for ranges"
            },
            "SUM_SORT_ROWS": {
                "type": "bigint",
                "description": "The total number of sorted rows"
            },
            "SUM_SORT_SCAN": {
                "type": "bigint",
                "description": "The total number of scans for sorting"
            },
            "SUM_NO_INDEX_USED": {
                "type": "bigint",
                "description": "The total number of times no index was used"
            },
            "SUM_NO_GOOD_INDEX_USED": {
                "type": "bigint",
                "description": "The total number of times no good index was used"
            }
        },
        "description": "The `events_statements_summary_by_host_by_event_name` table in the MySQL Performance Schema is used to aggregate performance metrics for executed SQL statements, grouped by the host of the client that executed the statement and by the event name (type of statement). This table helps in identifying which types of statements are most frequently run from each host and how they impact the server, aiding in performance analysis and optimization efforts."
    },
    "events_statements_summary_by_program": {
        "ddl": "CREATE TABLE `events_statements_summary_by_program` (\n  `OBJECT_TYPE` enum('EVENT','FUNCTION','PROCEDURE','TABLE','TRIGGER') DEFAULT NULL COMMENT 'Object type for which the summary is generated.',\n  `OBJECT_SCHEMA` varchar(64) NOT NULL COMMENT 'The schema of the object for which the summary is generated.',\n  `OBJECT_NAME` varchar(64) NOT NULL COMMENT 'The name of the object for which the summary is generated.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'The number of summarized events (from events_statements_current). This value includes all events, whether timed or nontimed.',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The total wait time of the summarized timed events. This value is calculated only for timed events because nontimed events have a wait time of NULL. The same is true for the other xxx_TIMER_WAIT values.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The minimum wait time of the summarized timed events.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The average wait time of the summarized timed events.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The maximum wait time of the summarized timed events.',\n  `COUNT_STATEMENTS` bigint(20) unsigned NOT NULL COMMENT 'Total number of nested statements invoked during stored program execution.',\n  `SUM_STATEMENTS_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The total wait time of the summarized timed statements. This value is calculated only for timed statements because nontimed statements have a wait time of NULL. The same is true for the other xxx_STATEMENT_WAIT values.',\n  `MIN_STATEMENTS_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The minimum wait time of the summarized timed statements.',\n  `AVG_STATEMENTS_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The average wait time of the summarized timed statements.',\n  `MAX_STATEMENTS_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The maximum wait time of the summarized timed statements.',\n  `SUM_LOCK_TIME` bigint(20) unsigned NOT NULL COMMENT 'The total time spent (in picoseconds) waiting for table locks for the summarized statements.',\n  `SUM_ERRORS` bigint(20) unsigned NOT NULL COMMENT 'The total number of errors that occurend for the summarized statements.',\n  `SUM_WARNINGS` bigint(20) unsigned NOT NULL COMMENT 'The total number of warnings that occurend for the summarized statements.',\n  `SUM_ROWS_AFFECTED` bigint(20) unsigned NOT NULL COMMENT 'The total number of affected rows by the summarized statements.',\n  `SUM_ROWS_SENT` bigint(20) unsigned NOT NULL COMMENT 'The total number of rows returned by the summarized statements.',\n  `SUM_ROWS_EXAMINED` bigint(20) unsigned NOT NULL COMMENT 'The total number of rows examined by the summarized statements.',\n  `SUM_CREATED_TMP_DISK_TABLES` bigint(20) unsigned NOT NULL COMMENT 'The total number of on-disk temporary tables created by the summarized statements.',\n  `SUM_CREATED_TMP_TABLES` bigint(20) unsigned NOT NULL COMMENT 'The total number of in-memory temporary tables created by the summarized statements.',\n  `SUM_SELECT_FULL_JOIN` bigint(20) unsigned NOT NULL COMMENT 'The total number of full joins executed by the summarized statements.',\n  `SUM_SELECT_FULL_RANGE_JOIN` bigint(20) unsigned NOT NULL COMMENT 'The total number of range search joins executed by the summarized statements.',\n  `SUM_SELECT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'The total number of joins that used ranges on the first table executed by the summarized statements.',\n  `SUM_SELECT_RANGE_CHECK` bigint(20) unsigned NOT NULL COMMENT 'The total number of joins that check for key usage after each row executed by the summarized statements.',\n  `SUM_SELECT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'The total number of joins that did a full scan of the first table executed by the summarized statements.',\n  `SUM_SORT_MERGE_PASSES` bigint(20) unsigned NOT NULL COMMENT 'The total number of merge passes that the sort algorithm has had to do for the summarized statements.',\n  `SUM_SORT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'The total number of sorts that were done using ranges for the summarized statements.',\n  `SUM_SORT_ROWS` bigint(20) unsigned NOT NULL COMMENT 'The total number of sorted rows that were sorted by the summarized statements.',\n  `SUM_SORT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'The total number of sorts that were done by scanning the table by the summarized statements.',\n  `SUM_NO_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT 'The total number of statements that performed a table scan without using an index.',\n  `SUM_NO_GOOD_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT 'The total number of statements where no good index was found.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "OBJECT_TYPE": {
                "type": "enum",
                "description": "Type of the object (e.g., TABLE, FUNCTION, etc.)"
            },
            "OBJECT_SCHEMA": {
                "type": "varchar",
                "description": "Schema where the object resides"
            },
            "OBJECT_NAME": {
                "type": "varchar",
                "description": "Name of the object"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "Number of summarized events"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "Total time waited for the events in picoseconds"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "Minimum time waited for the events in picoseconds"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "Average time waited for the events in picoseconds"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "Maximum time waited for the events in picoseconds"
            },
            "COUNT_STATEMENTS": {
                "type": "bigint",
                "description": "Number of SQL statements executed"
            },
            "SUM_STATEMENTS_WAIT": {
                "type": "bigint",
                "description": "Total wait time for the statements in picoseconds"
            },
            "MIN_STATEMENTS_WAIT": {
                "type": "bigint",
                "description": "Minimum wait time for a statement in picoseconds"
            },
            "AVG_STATEMENTS_WAIT": {
                "type": "bigint",
                "description": "Average wait time for a statement in picoseconds"
            },
            "MAX_STATEMENTS_WAIT": {
                "type": "bigint",
                "description": "Maximum wait time for a statement in picoseconds"
            },
            "SUM_LOCK_TIME": {
                "type": "bigint",
                "description": "Total time the statement spent in locks in picoseconds"
            },
            "SUM_ERRORS": {
                "type": "bigint",
                "description": "Number of errors that occurred during the statement execution"
            },
            "SUM_WARNINGS": {
                "type": "bigint",
                "description": "Number of warnings that occurred during the statement execution"
            },
            "SUM_ROWS_AFFECTED": {
                "type": "bigint",
                "description": "Total number of rows affected by the events"
            },
            "SUM_ROWS_SENT": {
                "type": "bigint",
                "description": "Total number of rows sent by the events"
            },
            "SUM_ROWS_EXAMINED": {
                "type": "bigint",
                "description": "Total number of rows examined by the events"
            },
            "SUM_CREATED_TMP_DISK_TABLES": {
                "type": "bigint",
                "description": "Number of internal on-disk temporary tables created by the events"
            },
            "SUM_CREATED_TMP_TABLES": {
                "type": "bigint",
                "description": "Number of internal temporary tables created by the events"
            },
            "SUM_SELECT_FULL_JOIN": {
                "type": "bigint",
                "description": "Number of full joins performed"
            },
            "SUM_SELECT_FULL_RANGE_JOIN": {
                "type": "bigint",
                "description": "Number of full range joins performed"
            },
            "SUM_SELECT_RANGE": {
                "type": "bigint",
                "description": "Number of range-based selects performed"
            },
            "SUM_SELECT_RANGE_CHECK": {
                "type": "bigint",
                "description": "Number of range checks performed"
            },
            "SUM_SELECT_SCAN": {
                "type": "bigint",
                "description": "Number of full table scans performed"
            },
            "SUM_SORT_MERGE_PASSES": {
                "type": "bigint",
                "description": "Number of merge passes by the sort algorithm"
            },
            "SUM_SORT_RANGE": {
                "type": "bigint",
                "description": "Number of sorts that were done using ranges"
            },
            "SUM_SORT_ROWS": {
                "type": "bigint",
                "description": "Total number of rows sorted"
            },
            "SUM_SORT_SCAN": {
                "type": "bigint",
                "description": "Number of sorts performed by scanning the table"
            },
            "SUM_NO_INDEX_USED": {
                "type": "bigint",
                "description": "Number of joins without indexes"
            },
            "SUM_NO_GOOD_INDEX_USED": {
                "type": "bigint",
                "description": "Number of joins where a better index could be used"
            }
        },
        "description": "The `events_statements_summary_by_program` table in the Performance Schema of MySQL is used to aggregate performance metrics for SQL statements, grouped by stored program (such as stored procedures, functions, triggers, and events). It provides a way to analyze the efficiency and resource consumption of these programs, enabling administrators to identify and optimize slow or resource-intensive stored programs."
    },
    "events_statements_summary_by_thread_by_event_name": {
        "ddl": "CREATE TABLE `events_statements_summary_by_thread_by_event_name` (\n  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread associated with the event. Together with EVENT_NAME uniquely identifies the row.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name. Used together with THREAD_ID for grouping events.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the summarized events that are timed.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the summarized events that are timed.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the summarized events that are timed.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the summarized events that are timed.',\n  `SUM_LOCK_TIME` bigint(20) unsigned NOT NULL COMMENT 'Sum of the LOCK_TIME column in the events_statements_current table.',\n  `SUM_ERRORS` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ERRORS column in the events_statements_current table.',\n  `SUM_WARNINGS` bigint(20) unsigned NOT NULL COMMENT 'Sum of the WARNINGS column in the events_statements_current table.',\n  `SUM_ROWS_AFFECTED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ROWS_AFFECTED column in the events_statements_current table.',\n  `SUM_ROWS_SENT` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ROWS_SENT column in the events_statements_current table.',\n  `SUM_ROWS_EXAMINED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ROWS_EXAMINED column in the events_statements_current table.',\n  `SUM_CREATED_TMP_DISK_TABLES` bigint(20) unsigned NOT NULL COMMENT 'Sum of the CREATED_TMP_DISK_TABLES column in the events_statements_current table.',\n  `SUM_CREATED_TMP_TABLES` bigint(20) unsigned NOT NULL COMMENT 'Sum of the CREATED_TMP_TABLES column in the events_statements_current table.',\n  `SUM_SELECT_FULL_JOIN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_FULL_JOIN column in the events_statements_current table.',\n  `SUM_SELECT_FULL_RANGE_JOIN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_FULL_RANGE_JOIN column in the events_statements_current table.',\n  `SUM_SELECT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_RANGE column in the events_statements_current table.',\n  `SUM_SELECT_RANGE_CHECK` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_RANGE_CHECK column in the events_statements_current table.',\n  `SUM_SELECT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_SCAN column in the events_statements_current table.',\n  `SUM_SORT_MERGE_PASSES` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_MERGE_PASSES column in the events_statements_current table.',\n  `SUM_SORT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_RANGE column in the events_statements_current table.',\n  `SUM_SORT_ROWS` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_ROWS column in the events_statements_current table.',\n  `SUM_SORT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_SCAN column in the events_statements_current table.',\n  `SUM_NO_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the NO_INDEX_USED column in the events_statements_current table.',\n  `SUM_NO_GOOD_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the NO_GOOD_INDEX_USED column in the events_statements_current table.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "THREAD_ID": {
                "type": "bigint",
                "description": "Identifier for the thread associated with the event"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "Name of the instrumented event"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "Number of summarized events"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "Total wait time for the summarized events"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "Minimum wait time for the summarized events"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "Average wait time for the summarized events"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "Maximum wait time for the summarized events"
            },
            "SUM_LOCK_TIME": {
                "type": "bigint",
                "description": "Total time spent waiting for locks for the summarized events"
            },
            "SUM_ERRORS": {
                "type": "bigint",
                "description": "Total number of errors for the summarized events"
            },
            "SUM_WARNINGS": {
                "type": "bigint",
                "description": "Total number of warnings for the summarized events"
            },
            "SUM_ROWS_AFFECTED": {
                "type": "bigint",
                "description": "Total number of rows affected by the summarized events"
            },
            "SUM_ROWS_SENT": {
                "type": "bigint",
                "description": "Total number of rows sent by the summarized events"
            },
            "SUM_ROWS_EXAMINED": {
                "type": "bigint",
                "description": "Total number of rows examined by the summarized events"
            },
            "SUM_CREATED_TMP_DISK_TABLES": {
                "type": "bigint",
                "description": "Total number of internal on-disk temporary tables created by the summarized events"
            },
            "SUM_CREATED_TMP_TABLES": {
                "type": "bigint",
                "description": "Total number of internal memory temporary tables created by the summarized events"
            },
            "SUM_SELECT_FULL_JOIN": {
                "type": "bigint",
                "description": "Total number of full joins performed by the summarized events"
            },
            "SUM_SELECT_FULL_RANGE_JOIN": {
                "type": "bigint",
                "description": "Total number of full range joins performed by the summarized events"
            },
            "SUM_SELECT_RANGE": {
                "type": "bigint",
                "description": "Total number of range-based selects performed by the summarized events"
            },
            "SUM_SELECT_RANGE_CHECK": {
                "type": "bigint",
                "description": "Total number of range checks performed by the summarized events"
            },
            "SUM_SELECT_SCAN": {
                "type": "bigint",
                "description": "Total number of full scans performed by the summarized events"
            },
            "SUM_SORT_MERGE_PASSES": {
                "type": "bigint",
                "description": "Total number of merge passes by the sort algorithm for the summarized events"
            },
            "SUM_SORT_RANGE": {
                "type": "bigint",
                "description": "Total number of sorts that were done for ranges for the summarized events"
            },
            "SUM_SORT_ROWS": {
                "type": "bigint",
                "description": "Total number of sorted rows for the summarized events"
            },
            "SUM_SORT_SCAN": {
                "type": "bigint",
                "description": "Total number of scans that used a sort for the summarized events"
            },
            "SUM_NO_INDEX_USED": {
                "type": "bigint",
                "description": "Total number of joins that did a full scan because no index was used for the summarized events"
            },
            "SUM_NO_GOOD_INDEX_USED": {
                "type": "bigint",
                "description": "Total number of joins that did a full scan because no good index was used for the summarized events"
            }
        },
        "description": "The `events_statements_summary_by_thread_by_event_name` table in MySQL's Performance Schema is used to aggregate performance metrics for SQL statements executed, grouped by thread and event name. This helps in identifying and analyzing the performance and resource usage of SQL queries across different threads, facilitating optimization efforts."
    },
    "events_statements_summary_by_user_by_event_name": {
        "ddl": "CREATE TABLE `events_statements_summary_by_user_by_event_name` (\n  `USER` char(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'User. Used together with EVENT_NAME for grouping events.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name. Used together with USER for grouping events.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the summarized events that are timed.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the summarized events that are timed.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the summarized events that are timed.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the summarized events that are timed.',\n  `SUM_LOCK_TIME` bigint(20) unsigned NOT NULL COMMENT 'Sum of the LOCK_TIME column in the events_statements_current table.',\n  `SUM_ERRORS` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ERRORS column in the events_statements_current table.',\n  `SUM_WARNINGS` bigint(20) unsigned NOT NULL COMMENT 'Sum of the WARNINGS column in the events_statements_current table.',\n  `SUM_ROWS_AFFECTED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ROWS_AFFECTED column in the events_statements_current table.',\n  `SUM_ROWS_SENT` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ROWS_SENT column in the events_statements_current table.',\n  `SUM_ROWS_EXAMINED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ROWS_EXAMINED column in the events_statements_current table.',\n  `SUM_CREATED_TMP_DISK_TABLES` bigint(20) unsigned NOT NULL COMMENT 'Sum of the CREATED_TMP_DISK_TABLES column in the events_statements_current table.',\n  `SUM_CREATED_TMP_TABLES` bigint(20) unsigned NOT NULL COMMENT 'Sum of the CREATED_TMP_TABLES column in the events_statements_current table.',\n  `SUM_SELECT_FULL_JOIN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_FULL_JOIN column in the events_statements_current table.',\n  `SUM_SELECT_FULL_RANGE_JOIN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_FULL_RANGE_JOIN column in the events_statements_current table.',\n  `SUM_SELECT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_RANGE column in the events_statements_current table.',\n  `SUM_SELECT_RANGE_CHECK` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_RANGE_CHECK column in the events_statements_current table.',\n  `SUM_SELECT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_SCAN column in the events_statements_current table.',\n  `SUM_SORT_MERGE_PASSES` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_MERGE_PASSES column in the events_statements_current table.',\n  `SUM_SORT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_RANGE column in the events_statements_current table.',\n  `SUM_SORT_ROWS` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_ROWS column in the events_statements_current table.',\n  `SUM_SORT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_SCAN column in the events_statements_current table.',\n  `SUM_NO_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the NO_INDEX_USED column in the events_statements_current table.',\n  `SUM_NO_GOOD_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the NO_GOOD_INDEX_USED column in the events_statements_current table.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "USER": {
                "type": "char",
                "description": "The user who issued the statement"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the executed event"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The number of times this event occurred"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total time spent waiting for this event"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum time spent waiting for a single occurrence of this event"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average time spent waiting for this event"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum time spent waiting for this event"
            },
            "SUM_LOCK_TIME": {
                "type": "bigint",
                "description": "The total time spent waiting for locks by this event"
            },
            "SUM_ERRORS": {
                "type": "bigint",
                "description": "The total number of errors generated by this event"
            },
            "SUM_WARNINGS": {
                "type": "bigint",
                "description": "The total number of warnings generated by this event"
            },
            "SUM_ROWS_AFFECTED": {
                "type": "bigint",
                "description": "The total number of rows affected by this event"
            },
            "SUM_ROWS_SENT": {
                "type": "bigint",
                "description": "The total number of rows sent to the client by this event"
            },
            "SUM_ROWS_EXAMINED": {
                "type": "bigint",
                "description": "The total number of rows examined by the server for this event"
            },
            "SUM_CREATED_TMP_DISK_TABLES": {
                "type": "bigint",
                "description": "The total number of on-disk temporary tables created by this event"
            },
            "SUM_CREATED_TMP_TABLES": {
                "type": "bigint",
                "description": "The total number of temporary tables created by this event"
            },
            "SUM_SELECT_FULL_JOIN": {
                "type": "bigint",
                "description": "The total number of full joins performed by this event"
            },
            "SUM_SELECT_FULL_RANGE_JOIN": {
                "type": "bigint",
                "description": "The total number of full range joins performed by this event"
            },
            "SUM_SELECT_RANGE": {
                "type": "bigint",
                "description": "The total number of range selects performed by this event"
            },
            "SUM_SELECT_RANGE_CHECK": {
                "type": "bigint",
                "description": "The total number of range checks performed by this event"
            },
            "SUM_SELECT_SCAN": {
                "type": "bigint",
                "description": "The total number of full table scans performed by this event"
            },
            "SUM_SORT_MERGE_PASSES": {
                "type": "bigint",
                "description": "The total number of merge passes by the sort algorithm for this event"
            },
            "SUM_SORT_RANGE": {
                "type": "bigint",
                "description": "The total number of sorts that used a range for this event"
            },
            "SUM_SORT_ROWS": {
                "type": "bigint",
                "description": "The total number of rows sorted by this event"
            },
            "SUM_SORT_SCAN": {
                "type": "bigint",
                "description": "The total number of sorts that performed a scan for this event"
            },
            "SUM_NO_INDEX_USED": {
                "type": "bigint",
                "description": "The total number of queries that did not use an index by this event"
            },
            "SUM_NO_GOOD_INDEX_USED": {
                "type": "bigint",
                "description": "The total number of queries where a good index was not used by this event"
            }
        },
        "description": "The `events_statements_summary_by_user_by_event_name` table in MySQL's Performance Schema is used to aggregate statement execution statistics grouped by user and event name. This allows for analysis of database activity by observing what types of queries are being executed and how they perform for each user, aiding in identifying performance issues or optimization opportunities at a granular level."
    },
    "events_statements_summary_global_by_event_name": {
        "ddl": "CREATE TABLE `events_statements_summary_global_by_event_name` (\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the summarized events that are timed.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the summarized events that are timed.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the summarized events that are timed.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the summarized events that are timed.',\n  `SUM_LOCK_TIME` bigint(20) unsigned NOT NULL COMMENT 'Sum of the LOCK_TIME column in the events_statements_current table.',\n  `SUM_ERRORS` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ERRORS column in the events_statements_current table.',\n  `SUM_WARNINGS` bigint(20) unsigned NOT NULL COMMENT 'Sum of the WARNINGS column in the events_statements_current table.',\n  `SUM_ROWS_AFFECTED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ROWS_AFFECTED column in the events_statements_current table.',\n  `SUM_ROWS_SENT` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ROWS_SENT column in the events_statements_current table.',\n  `SUM_ROWS_EXAMINED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the ROWS_EXAMINED column in the events_statements_current table.',\n  `SUM_CREATED_TMP_DISK_TABLES` bigint(20) unsigned NOT NULL COMMENT 'Sum of the CREATED_TMP_DISK_TABLES column in the events_statements_current table.',\n  `SUM_CREATED_TMP_TABLES` bigint(20) unsigned NOT NULL COMMENT 'Sum of the CREATED_TMP_TABLES column in the events_statements_current table.',\n  `SUM_SELECT_FULL_JOIN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_FULL_JOIN column in the events_statements_current table.',\n  `SUM_SELECT_FULL_RANGE_JOIN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_FULL_RANGE_JOIN column in the events_statements_current table.',\n  `SUM_SELECT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_RANGE column in the events_statements_current table.',\n  `SUM_SELECT_RANGE_CHECK` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_RANGE_CHECK column in the events_statements_current table.',\n  `SUM_SELECT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SELECT_SCAN column in the events_statements_current table.',\n  `SUM_SORT_MERGE_PASSES` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_MERGE_PASSES column in the events_statements_current table.',\n  `SUM_SORT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_RANGE column in the events_statements_current table.',\n  `SUM_SORT_ROWS` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_ROWS column in the events_statements_current table.',\n  `SUM_SORT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'Sum of the SORT_SCAN column in the events_statements_current table.',\n  `SUM_NO_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the NO_INDEX_USED column in the events_statements_current table.',\n  `SUM_NO_GOOD_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT 'Sum of the NO_GOOD_INDEX_USED column in the events_statements_current table.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the event"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The number of times this event has occurred"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total time spent on this event, in picoseconds"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum time spent on a single occurrence of this event, in picoseconds"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average time spent per occurrence of this event, in picoseconds"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum time spent on a single occurrence of this event, in picoseconds"
            },
            "SUM_LOCK_TIME": {
                "type": "bigint",
                "description": "The total time spent waiting for locks, in picoseconds"
            },
            "SUM_ERRORS": {
                "type": "bigint",
                "description": "The total number of errors reported for this event"
            },
            "SUM_WARNINGS": {
                "type": "bigint",
                "description": "The total number of warnings reported for this event"
            },
            "SUM_ROWS_AFFECTED": {
                "type": "bigint",
                "description": "The total number of rows affected by this event"
            },
            "SUM_ROWS_SENT": {
                "type": "bigint",
                "description": "The total number of rows sent by this event"
            },
            "SUM_ROWS_EXAMINED": {
                "type": "bigint",
                "description": "The total number of rows examined by this event"
            },
            "SUM_CREATED_TMP_DISK_TABLES": {
                "type": "bigint",
                "description": "The total number of temp tables on disk created by this event"
            },
            "SUM_CREATED_TMP_TABLES": {
                "type": "bigint",
                "description": "The total number of temp tables created by this event"
            },
            "SUM_SELECT_FULL_JOIN": {
                "type": "bigint",
                "description": "The total number of full joins"
            },
            "SUM_SELECT_FULL_RANGE_JOIN": {
                "type": "bigint",
                "description": "The total number of full range joins"
            },
            "SUM_SELECT_RANGE": {
                "type": "bigint",
                "description": "The total number of select range operations"
            },
            "SUM_SELECT_RANGE_CHECK": {
                "type": "bigint",
                "description": "The total number of select range checks"
            },
            "SUM_SELECT_SCAN": {
                "type": "bigint",
                "description": "The total number of select scans"
            },
            "SUM_SORT_MERGE_PASSES": {
                "type": "bigint",
                "description": "The total number of merge passes by the sort algorithm"
            },
            "SUM_SORT_RANGE": {
                "type": "bigint",
                "description": "The total number of sorts that were done using ranges"
            },
            "SUM_SORT_ROWS": {
                "type": "bigint",
                "description": "The total number of rows sorted"
            },
            "SUM_SORT_SCAN": {
                "type": "bigint",
                "description": "The total number of sorts that were done by scanning the table"
            },
            "SUM_NO_INDEX_USED": {
                "type": "bigint",
                "description": "The total number of joins without indexes"
            },
            "SUM_NO_GOOD_INDEX_USED": {
                "type": "bigint",
                "description": "The total number of joins where a good index was not used"
            }
        },
        "description": "The `events_statements_summary_global_by_event_name` table in the MySQL Performance Schema aggregates performance metrics for all SQL statements executed on the server, grouped by their event name. It enables administrators to identify and analyze the performance characteristics, including execution counts and times, of different types of SQL operations executed globally across the server, helping in performance tuning and identifying inefficient queries."
    },
    "events_transactions_current": {
        "ddl": "CREATE TABLE `events_transactions_current` (\n  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT 'The thread associated with the event.',\n  `EVENT_ID` bigint(20) unsigned NOT NULL COMMENT 'The event id associated with the event.',\n  `END_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'This column is set to NULL when the event starts and updated to the thread current event number when the event ends.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'The name of the instrument from which the event was collected. This is a NAME value from the setup_instruments table.',\n  `STATE` enum('ACTIVE','COMMITTED','ROLLED BACK') DEFAULT NULL COMMENT 'The current transaction state. The value is ACTIVE (after START TRANSACTION or BEGIN), COMMITTED (after COMMIT), or ROLLED BACK (after ROLLBACK).',\n  `TRX_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'Unused.',\n  `GTID` varchar(64) DEFAULT NULL COMMENT 'Transaction GTID, using the format DOMAIN-SERVER_ID-SEQUENCE_NO.',\n  `XID_FORMAT_ID` int(11) DEFAULT NULL COMMENT 'XA transaction format ID for GTRID and BQUAL values.',\n  `XID_GTRID` varchar(130) DEFAULT NULL COMMENT 'XA global transaction ID.',\n  `XID_BQUAL` varchar(130) DEFAULT NULL COMMENT 'XA transaction branch qualifier.',\n  `XA_STATE` varchar(64) DEFAULT NULL COMMENT 'The state of the XA transaction. The value is ACTIVE (after XA START), IDLE (after XA END), PREPARED (after XA PREPARE), ROLLED BACK (after XA ROLLBACK), or COMMITTED (after XA COMMIT).',\n  `SOURCE` varchar(64) DEFAULT NULL COMMENT 'The name of the source file containing the instrumented code that produced the event and the line number in the file at which the instrumentation occurs.',\n  `TIMER_START` bigint(20) unsigned DEFAULT NULL COMMENT 'The unit is picoseconds. When event timing started. NULL if event has no timing information.',\n  `TIMER_END` bigint(20) unsigned DEFAULT NULL COMMENT 'The unit is picoseconds. When event timing ended. NULL if event has no timing information.',\n  `TIMER_WAIT` bigint(20) unsigned DEFAULT NULL COMMENT 'The unit is picoseconds. Event duration. NULL if event has not timing information.',\n  `ACCESS_MODE` enum('READ ONLY','READ WRITE') DEFAULT NULL COMMENT 'Transaction access mode.',\n  `ISOLATION_LEVEL` varchar(64) DEFAULT NULL COMMENT 'Transaction isolation level. One of: REPEATABLE READ, READ COMMITTED, READ UNCOMMITTED, or SERIALIZABLE.',\n  `AUTOCOMMIT` enum('YES','NO') NOT NULL COMMENT 'Whether autcommit mode was enabled when the transaction started.',\n  `NUMBER_OF_SAVEPOINTS` bigint(20) unsigned DEFAULT NULL COMMENT 'The number of SAVEPOINT statements issued during the transaction.',\n  `NUMBER_OF_ROLLBACK_TO_SAVEPOINT` bigint(20) unsigned DEFAULT NULL COMMENT 'The number of ROLLBACK_TO_SAVEPOINT statements issued during the transaction.',\n  `NUMBER_OF_RELEASE_SAVEPOINT` bigint(20) unsigned DEFAULT NULL COMMENT 'The number of RELEASE_SAVEPOINT statements issued during the transaction.',\n  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned DEFAULT NULL COMMENT 'Unused.',\n  `NESTING_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'The EVENT_ID value of the event within which this event is nested.',\n  `NESTING_EVENT_TYPE` enum('TRANSACTION','STATEMENT','STAGE','WAIT') DEFAULT NULL COMMENT 'The nesting event type.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "THREAD_ID": {
                "type": "bigint",
                "description": "Unique identifier for the thread associated with the event"
            },
            "EVENT_ID": {
                "type": "bigint",
                "description": "The sequence number of the event"
            },
            "END_EVENT_ID": {
                "type": "bigint",
                "description": "Sequence number of the event where the transaction ended"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "Name of the instrumented event"
            },
            "STATE": {
                "type": "enum",
                "description": "Current state of the transaction"
            },
            "TRX_ID": {
                "type": "bigint",
                "description": "Unique transaction identifier"
            },
            "GTID": {
                "type": "varchar",
                "description": "Global Transaction Identifier for the transaction"
            },
            "XID_FORMAT_ID": {
                "type": "int",
                "description": "Format ID part of the XID for a two-phase commit transaction"
            },
            "XID_GTRID": {
                "type": "varchar",
                "description": "Global transaction identifier part of the XID for a two-phase commit transaction"
            },
            "XID_BQUAL": {
                "type": "varchar",
                "description": "Branch qualifier part of the XID for a two-phase commit transaction"
            },
            "XA_STATE": {
                "type": "varchar",
                "description": "State of the XA transaction"
            },
            "SOURCE": {
                "type": "varchar",
                "description": "Source code location that initiated the event"
            },
            "TIMER_START": {
                "type": "bigint",
                "description": "Start time of the event"
            },
            "TIMER_END": {
                "type": "bigint",
                "description": "End time of the event"
            },
            "TIMER_WAIT": {
                "type": "bigint",
                "description": "Total time waited for the event"
            },
            "ACCESS_MODE": {
                "type": "enum",
                "description": "Access mode of the transaction (read or write)"
            },
            "ISOLATION_LEVEL": {
                "type": "varchar",
                "description": "Isolation level of the transaction"
            },
            "AUTOCOMMIT": {
                "type": "enum",
                "description": "Whether the autocommit mode is enabled"
            },
            "NUMBER_OF_SAVEPOINTS": {
                "type": "bigint",
                "description": "Number of savepoints within the transaction"
            },
            "NUMBER_OF_ROLLBACK_TO_SAVEPOINT": {
                "type": "bigint",
                "description": "Number of rollbacks to savepoint within the transaction"
            },
            "NUMBER_OF_RELEASE_SAVEPOINT": {
                "type": "bigint",
                "description": "Number of savepoints released within the transaction"
            },
            "OBJECT_INSTANCE_BEGIN": {
                "type": "bigint",
                "description": "Memory address of the instrumented object that produced the event"
            },
            "NESTING_EVENT_ID": {
                "type": "bigint",
                "description": "Event ID of the nesting event"
            },
            "NESTING_EVENT_TYPE": {
                "type": "enum",
                "description": "Type of the nesting event (e.g., statement, stage, wait)"
            }
        },
        "description": "The `events_transactions_current` table within the MySQL Performance Schema is used to monitor the currently executing transactions across all sessions. It provides detailed information on each active transaction, such as the transaction identifier, state, timing, and the thread associated with it, offering valuable insights for diagnosing issues or optimizing transaction performance."
    },
    "events_transactions_history": {
        "ddl": "CREATE TABLE `events_transactions_history` (\n  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT 'The thread associated with the event.',\n  `EVENT_ID` bigint(20) unsigned NOT NULL COMMENT 'The event id associated with the event.',\n  `END_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'This column is set to NULL when the event starts and updated to the thread current event number when the event ends.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'The name of the instrument from which the event was collected. This is a NAME value from the setup_instruments table.',\n  `STATE` enum('ACTIVE','COMMITTED','ROLLED BACK') DEFAULT NULL COMMENT 'The current transaction state. The value is ACTIVE (after START TRANSACTION or BEGIN), COMMITTED (after COMMIT), or ROLLED BACK (after ROLLBACK).',\n  `TRX_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'Unused.',\n  `GTID` varchar(64) DEFAULT NULL COMMENT 'Transaction GTID, using the format DOMAIN-SERVER_ID-SEQUENCE_NO.',\n  `XID_FORMAT_ID` int(11) DEFAULT NULL COMMENT 'XA transaction format ID for GTRID and BQUAL values.',\n  `XID_GTRID` varchar(130) DEFAULT NULL COMMENT 'XA global transaction ID.',\n  `XID_BQUAL` varchar(130) DEFAULT NULL COMMENT 'XA transaction branch qualifier.',\n  `XA_STATE` varchar(64) DEFAULT NULL COMMENT 'The state of the XA transaction. The value is ACTIVE (after XA START), IDLE (after XA END), PREPARED (after XA PREPARE), ROLLED BACK (after XA ROLLBACK), or COMMITTED (after XA COMMIT).',\n  `SOURCE` varchar(64) DEFAULT NULL COMMENT 'The name of the source file containing the instrumented code that produced the event and the line number in the file at which the instrumentation occurs.',\n  `TIMER_START` bigint(20) unsigned DEFAULT NULL COMMENT 'The unit is picoseconds. When event timing started. NULL if event has no timing information.',\n  `TIMER_END` bigint(20) unsigned DEFAULT NULL COMMENT 'The unit is picoseconds. When event timing ended. NULL if event has no timing information.',\n  `TIMER_WAIT` bigint(20) unsigned DEFAULT NULL COMMENT 'The unit is picoseconds. Event duration. NULL if event has not timing information.',\n  `ACCESS_MODE` enum('READ ONLY','READ WRITE') DEFAULT NULL COMMENT 'Transaction access mode.',\n  `ISOLATION_LEVEL` varchar(64) DEFAULT NULL COMMENT 'Transaction isolation level. One of: REPEATABLE READ, READ COMMITTED, READ UNCOMMITTED, or SERIALIZABLE.',\n  `AUTOCOMMIT` enum('YES','NO') NOT NULL COMMENT 'Whether autcommit mode was enabled when the transaction started.',\n  `NUMBER_OF_SAVEPOINTS` bigint(20) unsigned DEFAULT NULL COMMENT 'The number of SAVEPOINT statements issued during the transaction.',\n  `NUMBER_OF_ROLLBACK_TO_SAVEPOINT` bigint(20) unsigned DEFAULT NULL COMMENT 'The number of ROLLBACK_TO_SAVEPOINT statements issued during the transaction.',\n  `NUMBER_OF_RELEASE_SAVEPOINT` bigint(20) unsigned DEFAULT NULL COMMENT 'The number of RELEASE_SAVEPOINT statements issued during the transaction.',\n  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned DEFAULT NULL COMMENT 'Unused.',\n  `NESTING_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'The EVENT_ID value of the event within which this event is nested.',\n  `NESTING_EVENT_TYPE` enum('TRANSACTION','STATEMENT','STAGE','WAIT') DEFAULT NULL COMMENT 'The nesting event type.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "THREAD_ID": {
                "type": "bigint",
                "description": "The thread associated with the event."
            },
            "EVENT_ID": {
                "type": "bigint",
                "description": "A unique identifier for the event."
            },
            "END_EVENT_ID": {
                "type": "bigint",
                "description": "The EVENT_ID at which the event ended."
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "Name that identifies the event."
            },
            "STATE": {
                "type": "enum",
                "description": "The current state of the transaction."
            },
            "TRX_ID": {
                "type": "bigint",
                "description": "Unique transaction identifier."
            },
            "GTID": {
                "type": "varchar",
                "description": "Global Transaction Identifier."
            },
            "XID_FORMAT_ID": {
                "type": "int",
                "description": "The format ID part of the XID for XA transactions."
            },
            "XID_GTRID": {
                "type": "varchar",
                "description": "The global transaction identifier part of the XID for XA transactions."
            },
            "XID_BQUAL": {
                "type": "varchar",
                "description": "The branch qualifier part of the XID for XA transactions."
            },
            "XA_STATE": {
                "type": "varchar",
                "description": "The state of an XA transaction."
            },
            "SOURCE": {
                "type": "varchar",
                "description": "The source code location where the event occurred."
            },
            "TIMER_START": {
                "type": "bigint",
                "description": "The start time of the timer for the event."
            },
            "TIMER_END": {
                "type": "bigint",
                "description": "The end time of the timer for the event."
            },
            "TIMER_WAIT": {
                "type": "bigint",
                "description": "The wait time of the timer for the event."
            },
            "ACCESS_MODE": {
                "type": "enum",
                "description": "The mode of access (e.g., READ or WRITE) for the transaction."
            },
            "ISOLATION_LEVEL": {
                "type": "varchar",
                "description": "The transaction isolation level."
            },
            "AUTOCOMMIT": {
                "type": "enum",
                "description": "Whether the autocommit mode is enabled."
            },
            "NUMBER_OF_SAVEPOINTS": {
                "type": "bigint",
                "description": "The number of savepoints within the transaction."
            },
            "NUMBER_OF_ROLLBACK_TO_SAVEPOINT": {
                "type": "bigint",
                "description": "The number of rollbacks to savepoint within the transaction."
            },
            "NUMBER_OF_RELEASE_SAVEPOINT": {
                "type": "bigint",
                "description": "The number of savepoints released within the transaction."
            },
            "OBJECT_INSTANCE_BEGIN": {
                "type": "bigint",
                "description": "Memory address of the instrumented object."
            },
            "NESTING_EVENT_ID": {
                "type": "bigint",
                "description": "EVENT_ID of the nesting event."
            },
            "NESTING_EVENT_TYPE": {
                "type": "enum",
                "description": "The type of the nesting event (e.g., TRANSACTION, STATEMENT)."
            }
        },
        "description": "The `events_transactions_history` table within MySQL's Performance Schema is utilized for recording the most recent completed transactions. It helps in analyzing transaction performance by providing details about each transaction's characteristics and execution metrics."
    },
    "events_transactions_history_long": {
        "ddl": "CREATE TABLE `events_transactions_history_long` (\n  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT 'The thread associated with the event.',\n  `EVENT_ID` bigint(20) unsigned NOT NULL COMMENT 'The event id associated with the event.',\n  `END_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'This column is set to NULL when the event starts and updated to the thread current event number when the event ends.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'The name of the instrument from which the event was collected. This is a NAME value from the setup_instruments table.',\n  `STATE` enum('ACTIVE','COMMITTED','ROLLED BACK') DEFAULT NULL COMMENT 'The current transaction state. The value is ACTIVE (after START TRANSACTION or BEGIN), COMMITTED (after COMMIT), or ROLLED BACK (after ROLLBACK).',\n  `TRX_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'Unused.',\n  `GTID` varchar(64) DEFAULT NULL COMMENT 'Transaction GTID, using the format DOMAIN-SERVER_ID-SEQUENCE_NO.',\n  `XID_FORMAT_ID` int(11) DEFAULT NULL COMMENT 'XA transaction format ID for GTRID and BQUAL values.',\n  `XID_GTRID` varchar(130) DEFAULT NULL COMMENT 'XA global transaction ID.',\n  `XID_BQUAL` varchar(130) DEFAULT NULL COMMENT 'XA transaction branch qualifier.',\n  `XA_STATE` varchar(64) DEFAULT NULL COMMENT 'The state of the XA transaction. The value is ACTIVE (after XA START), IDLE (after XA END), PREPARED (after XA PREPARE), ROLLED BACK (after XA ROLLBACK), or COMMITTED (after XA COMMIT).',\n  `SOURCE` varchar(64) DEFAULT NULL COMMENT 'The name of the source file containing the instrumented code that produced the event and the line number in the file at which the instrumentation occurs.',\n  `TIMER_START` bigint(20) unsigned DEFAULT NULL COMMENT 'The unit is picoseconds. When event timing started. NULL if event has no timing information.',\n  `TIMER_END` bigint(20) unsigned DEFAULT NULL COMMENT 'The unit is picoseconds. When event timing ended. NULL if event has no timing information.',\n  `TIMER_WAIT` bigint(20) unsigned DEFAULT NULL COMMENT 'The unit is picoseconds. Event duration. NULL if event has not timing information.',\n  `ACCESS_MODE` enum('READ ONLY','READ WRITE') DEFAULT NULL COMMENT 'Transaction access mode.',\n  `ISOLATION_LEVEL` varchar(64) DEFAULT NULL COMMENT 'Transaction isolation level. One of: REPEATABLE READ, READ COMMITTED, READ UNCOMMITTED, or SERIALIZABLE.',\n  `AUTOCOMMIT` enum('YES','NO') NOT NULL COMMENT 'Whether autcommit mode was enabled when the transaction started.',\n  `NUMBER_OF_SAVEPOINTS` bigint(20) unsigned DEFAULT NULL COMMENT 'The number of SAVEPOINT statements issued during the transaction.',\n  `NUMBER_OF_ROLLBACK_TO_SAVEPOINT` bigint(20) unsigned DEFAULT NULL COMMENT 'The number of ROLLBACK_TO_SAVEPOINT statements issued during the transaction.',\n  `NUMBER_OF_RELEASE_SAVEPOINT` bigint(20) unsigned DEFAULT NULL COMMENT 'The number of RELEASE_SAVEPOINT statements issued during the transaction.',\n  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned DEFAULT NULL COMMENT 'Unused.',\n  `NESTING_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'The EVENT_ID value of the event within which this event is nested.',\n  `NESTING_EVENT_TYPE` enum('TRANSACTION','STATEMENT','STAGE','WAIT') DEFAULT NULL COMMENT 'The nesting event type.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "THREAD_ID": {
                "type": "bigint",
                "description": "The thread associated with the event"
            },
            "EVENT_ID": {
                "type": "bigint",
                "description": "A unique identifier for the event"
            },
            "END_EVENT_ID": {
                "type": "bigint",
                "description": "The event ID at which this event ended"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the event"
            },
            "STATE": {
                "type": "enum",
                "description": "The current state of the transaction"
            },
            "TRX_ID": {
                "type": "bigint",
                "description": "The transaction identifier"
            },
            "GTID": {
                "type": "varchar",
                "description": "The global transaction identifier"
            },
            "XID_FORMAT_ID": {
                "type": "int",
                "description": "The format ID part of the XID for XA transactions"
            },
            "XID_GTRID": {
                "type": "varchar",
                "description": "The global transaction identifier part of the XID for XA transactions"
            },
            "XID_BQUAL": {
                "type": "varchar",
                "description": "The branch qualifier part of the XID for XA transactions"
            },
            "XA_STATE": {
                "type": "varchar",
                "description": "The state of the XA transaction"
            },
            "SOURCE": {
                "type": "varchar",
                "description": "The source of the event, usually a file name and line number indicating where the event originated"
            },
            "TIMER_START": {
                "type": "bigint",
                "description": "The start time of the timer for the event in picoseconds"
            },
            "TIMER_END": {
                "type": "bigint",
                "description": "The end time of the timer for the event in picoseconds"
            },
            "TIMER_WAIT": {
                "type": "bigint",
                "description": "The wait time of the timer for the event in picoseconds"
            },
            "ACCESS_MODE": {
                "type": "enum",
                "description": "The access mode of the transaction (READ/WRITE)"
            },
            "ISOLATION_LEVEL": {
                "type": "varchar",
                "description": "The isolation level of the transaction"
            },
            "AUTOCOMMIT": {
                "type": "enum",
                "description": "Whether autocommit mode is enabled"
            },
            "NUMBER_OF_SAVEPOINTS": {
                "type": "bigint",
                "description": "The number of savepoints used in the transaction"
            },
            "NUMBER_OF_ROLLBACK_TO_SAVEPOINT": {
                "type": "bigint",
                "description": "The number of rollbacks to savepoints in the transaction"
            },
            "NUMBER_OF_RELEASE_SAVEPOINT": {
                "type": "bigint",
                "description": "The number of savepoints that have been released"
            },
            "OBJECT_INSTANCE_BEGIN": {
                "type": "bigint",
                "description": "A memory address indicating where an object involved in the transaction was instantiated"
            },
            "NESTING_EVENT_ID": {
                "type": "bigint",
                "description": "The ID of the event that nested this event"
            },
            "NESTING_EVENT_TYPE": {
                "type": "enum",
                "description": "The type of the event that nested this event"
            }
        },
        "description": "The `events_transactions_history_long` table within the MySQL Performance Schema is designed to capture information about transaction events that are no longer active but were executed on the server. This table retains a longer history of past transaction events, making it invaluable for analyzing past transaction performance and identifying long-term patterns or issues."
    },
    "events_transactions_summary_by_account_by_event_name": {
        "ddl": "CREATE TABLE `events_transactions_summary_by_account_by_event_name` (\n  `USER` char(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'User for which summary is generated.',\n  `HOST` char(60) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'Host for which summary is generated.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name for which summary is generated.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'The number of summarized events. This value includes all events, whether timed or nontimed.',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The total wait time of the summarized timed events. This value is calculated only for timed events because nontimed events have a wait time of NULL. The same is true for the other xxx_TIMER_WAIT values.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The minimum wait time of the summarized timed events.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The average wait time of the summarized timed events.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The maximum wait time of the summarized timed events.',\n  `COUNT_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The total number of only READ/WRITE transaction events.',\n  `SUM_TIMER_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The total wait time of only READ/WRITE transaction events.',\n  `MIN_TIMER_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The minimum wait time of only READ/WRITE transaction events.',\n  `AVG_TIMER_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The average wait time of only READ/WRITE transaction events.',\n  `MAX_TIMER_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The maximum wait time of only READ/WRITE transaction events.',\n  `COUNT_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The total number of only READ ONLY transaction events.',\n  `SUM_TIMER_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The total wait time of only READ ONLY transaction events.',\n  `MIN_TIMER_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The minimum wait time of only READ ONLY transaction events.',\n  `AVG_TIMER_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The average wait time of only READ ONLY transaction events.',\n  `MAX_TIMER_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The maximum wait time of only READ ONLY transaction events.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "USER": {
                "type": "char",
                "description": "The user name of the account for which the transaction event summary is being recorded"
            },
            "HOST": {
                "type": "char",
                "description": "The host name from which the user connected to the database for which the transaction event summary is being recorded"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the transaction event for which summaries are being collected"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The total number of summarized events"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total wait time for all summarized events"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum wait time among all summarized events"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average wait time of all summarized events"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum wait time among all summarized events"
            },
            "COUNT_READ_WRITE": {
                "type": "bigint",
                "description": "The count of read-write transactions for the event"
            },
            "SUM_TIMER_READ_WRITE": {
                "type": "bigint",
                "description": "The total wait time for all read-write transactions"
            },
            "MIN_TIMER_READ_WRITE": {
                "type": "bigint",
                "description": "The minimum wait time among all read-write transactions"
            },
            "AVG_TIMER_READ_WRITE": {
                "type": "bigint",
                "description": "The average wait time for read-write transactions"
            },
            "MAX_TIMER_READ_WRITE": {
                "type": "bigint",
                "description": "The maximum wait time among all read-write transactions"
            },
            "COUNT_READ_ONLY": {
                "type": "bigint",
                "description": "The count of read-only transactions for the event"
            },
            "SUM_TIMER_READ_ONLY": {
                "type": "bigint",
                "description": "The total wait time for all read-only transactions"
            },
            "MIN_TIMER_READ_ONLY": {
                "type": "bigint",
                "description": "The minimum wait time among all read-only transactions"
            },
            "AVG_TIMER_READ_ONLY": {
                "type": "bigint",
                "description": "The average wait time for read-only transactions"
            },
            "MAX_TIMER_READ_ONLY": {
                "type": "bigint",
                "description": "The maximum wait time among all read-only transactions"
            }
        },
        "description": "The `events_transactions_summary_by_account_by_event_name` table in the MySQL Performance Schema is used to aggregate transaction event data by account and by event name. This allows administrators to identify transaction-related performance characteristics, such as time spent in transactions, for specific accounts and transaction types, aiding in performance analysis and tuning."
    },
    "events_transactions_summary_by_host_by_event_name": {
        "ddl": "CREATE TABLE `events_transactions_summary_by_host_by_event_name` (\n  `HOST` char(60) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'Host for which summary is generated.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name for which summary is generated.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'The number of summarized events. This value includes all events, whether timed or nontimed.',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The total wait time of the summarized timed events. This value is calculated only for timed events because nontimed events have a wait time of NULL. The same is true for the other xxx_TIMER_WAIT values.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The minimum wait time of the summarized timed events.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The average wait time of the summarized timed events.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The maximum wait time of the summarized timed events.',\n  `COUNT_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The total number of only READ/WRITE transaction events.',\n  `SUM_TIMER_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The total wait time of only READ/WRITE transaction events.',\n  `MIN_TIMER_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The minimum wait time of only READ/WRITE transaction events.',\n  `AVG_TIMER_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The average wait time of only READ/WRITE transaction events.',\n  `MAX_TIMER_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The maximum wait time of only READ/WRITE transaction events.',\n  `COUNT_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The total number of only READ ONLY transaction events.',\n  `SUM_TIMER_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The total wait time of only READ ONLY transaction events.',\n  `MIN_TIMER_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The minimum wait time of only READ ONLY transaction events.',\n  `AVG_TIMER_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The average wait time of only READ ONLY transaction events.',\n  `MAX_TIMER_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The maximum wait time of only READ ONLY transaction events.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "HOST": {
                "type": "char",
                "description": "The host name of the client that initiated the transaction"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the transaction event"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The number of transactions that occurred"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total time spent waiting for all transactions, in picoseconds"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum time spent waiting for transactions, in picoseconds"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average time spent waiting for transactions, in picoseconds"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum time spent waiting for transactions, in picoseconds"
            },
            "COUNT_READ_WRITE": {
                "type": "bigint",
                "description": "The number of read-write transactions"
            },
            "SUM_TIMER_READ_WRITE": {
                "type": "bigint",
                "description": "The total time spent on read-write transactions, in picoseconds"
            },
            "MIN_TIMER_READ_WRITE": {
                "type": "bigint",
                "description": "The minimum time spent on a read-write transaction, in picoseconds"
            },
            "AVG_TIMER_READ_WRITE": {
                "type": "bigint",
                "description": "The average time spent on read-write transactions, in picoseconds"
            },
            "MAX_TIMER_READ_WRITE": {
                "type": "bigint",
                "description": "The maximum time spent on a read-write transaction, in picoseconds"
            },
            "COUNT_READ_ONLY": {
                "type": "bigint",
                "description": "The number of read-only transactions"
            },
            "SUM_TIMER_READ_ONLY": {
                "type": "bigint",
                "description": "The total time spent on read-only transactions, in picoseconds"
            },
            "MIN_TIMER_READ_ONLY": {
                "type": "bigint",
                "description": "The minimum time spent on a read-only transaction, in picoseconds"
            },
            "AVG_TIMER_READ_ONLY": {
                "type": "bigint",
                "description": "The average time spent on read-only transactions, in picoseconds"
            },
            "MAX_TIMER_READ_ONLY": {
                "type": "bigint",
                "description": "The maximum time spent on a read-only transaction, in picoseconds"
            }
        },
        "description": "The `events_transactions_summary_by_host_by_event_name` table in the Performance Schema of MySQL aggregates transaction events, grouping the data by host and by event name. This allows for tracking and analyzing the performance and resource usage of transactions initiated from different hosts, aiding in pinpointing issues or optimizing database operations."
    },
    "events_transactions_summary_by_thread_by_event_name": {
        "ddl": "CREATE TABLE `events_transactions_summary_by_thread_by_event_name` (\n  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread for which summary is generated.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name for which summary is generated.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'The number of summarized events. This value includes all events, whether timed or nontimed.',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The total wait time of the summarized timed events. This value is calculated only for timed events because nontimed events have a wait time of NULL. The same is true for the other xxx_TIMER_WAIT values.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The minimum wait time of the summarized timed events.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The average wait time of the summarized timed events.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The maximum wait time of the summarized timed events.',\n  `COUNT_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The total number of only READ/WRITE transaction events.',\n  `SUM_TIMER_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The total wait time of only READ/WRITE transaction events.',\n  `MIN_TIMER_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The minimum wait time of only READ/WRITE transaction events.',\n  `AVG_TIMER_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The average wait time of only READ/WRITE transaction events.',\n  `MAX_TIMER_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The maximum wait time of only READ/WRITE transaction events.',\n  `COUNT_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The total number of only READ ONLY transaction events.',\n  `SUM_TIMER_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The total wait time of only READ ONLY transaction events.',\n  `MIN_TIMER_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The minimum wait time of only READ ONLY transaction events.',\n  `AVG_TIMER_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The average wait time of only READ ONLY transaction events.',\n  `MAX_TIMER_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The maximum wait time of only READ ONLY transaction events.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "THREAD_ID": {
                "type": "bigint",
                "description": "Uniquely identifies the thread associated with the event"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "Name of the instrumented event"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "Number of summarized events"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "Total wait time for the summarized events"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "Minimum wait time for the summarized events"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "Average wait time for the summarized events"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "Maximum wait time for the summarized events"
            },
            "COUNT_READ_WRITE": {
                "type": "bigint",
                "description": "Number of read-write transactions"
            },
            "SUM_TIMER_READ_WRITE": {
                "type": "bigint",
                "description": "Total wait time for read-write transactions"
            },
            "MIN_TIMER_READ_WRITE": {
                "type": "bigint",
                "description": "Minimum wait time for read-write transactions"
            },
            "AVG_TIMER_READ_WRITE": {
                "type": "bigint",
                "description": "Average wait time for read-write transactions"
            },
            "MAX_TIMER_READ_WRITE": {
                "type": "bigint",
                "description": "Maximum wait time for read-write transactions"
            },
            "COUNT_READ_ONLY": {
                "type": "bigint",
                "description": "Number of read-only transactions"
            },
            "SUM_TIMER_READ_ONLY": {
                "type": "bigint",
                "description": "Total wait time for read-only transactions"
            },
            "MIN_TIMER_READ_ONLY": {
                "type": "bigint",
                "description": "Minimum wait time for read-only transactions"
            },
            "AVG_TIMER_READ_ONLY": {
                "type": "bigint",
                "description": "Average wait time for read-only transactions"
            },
            "MAX_TIMER_READ_ONLY": {
                "type": "bigint",
                "description": "Maximum wait time for read-only transactions"
            }
        },
        "description": "The `events_transactions_summary_by_thread_by_event_name` table in the Performance Schema is used to aggregate transaction events, providing summaries of transaction event characteristics grouped by thread and by the event name. This helps in diagnosing transaction performance issues by identifying which transactions are consuming the most resources or taking the longest time, on a per-thread basis."
    },
    "events_transactions_summary_by_user_by_event_name": {
        "ddl": "CREATE TABLE `events_transactions_summary_by_user_by_event_name` (\n  `USER` char(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'User for which summary is generated.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name for which summary is generated.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'The number of summarized events. This value includes all events, whether timed or nontimed.',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The total wait time of the summarized timed events. This value is calculated only for timed events because nontimed events have a wait time of NULL. The same is true for the other xxx_TIMER_WAIT values.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The minimum wait time of the summarized timed events.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The average wait time of the summarized timed events.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The maximum wait time of the summarized timed events.',\n  `COUNT_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The total number of only READ/WRITE transaction events.',\n  `SUM_TIMER_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The total wait time of only READ/WRITE transaction events.',\n  `MIN_TIMER_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The minimum wait time of only READ/WRITE transaction events.',\n  `AVG_TIMER_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The average wait time of only READ/WRITE transaction events.',\n  `MAX_TIMER_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The maximum wait time of only READ/WRITE transaction events.',\n  `COUNT_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The total number of only READ ONLY transaction events.',\n  `SUM_TIMER_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The total wait time of only READ ONLY transaction events.',\n  `MIN_TIMER_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The minimum wait time of only READ ONLY transaction events.',\n  `AVG_TIMER_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The average wait time of only READ ONLY transaction events.',\n  `MAX_TIMER_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The maximum wait time of only READ ONLY transaction events.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "USER": {
                "type": "char",
                "description": "The MySQL user who executed the transaction."
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the transaction event."
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The total number of occurrences of the event."
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total time spent waiting for the event, in picoseconds."
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum time spent waiting for a single occurrence of the event, in picoseconds."
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average time spent waiting for the event, in picoseconds."
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum time spent waiting for a single occurrence of the event, in picoseconds."
            },
            "COUNT_READ_WRITE": {
                "type": "bigint",
                "description": "The number of read-write transactions."
            },
            "SUM_TIMER_READ_WRITE": {
                "type": "bigint",
                "description": "The total time spent on read-write transactions, in picoseconds."
            },
            "MIN_TIMER_READ_WRITE": {
                "type": "bigint",
                "description": "The minimum time spent on a single read-write transaction, in picoseconds."
            },
            "AVG_TIMER_READ_WRITE": {
                "type": "bigint",
                "description": "The average time spent on read-write transactions, in picoseconds."
            },
            "MAX_TIMER_READ_WRITE": {
                "type": "bigint",
                "description": "The maximum time spent on a single read-write transaction, in picoseconds."
            },
            "COUNT_READ_ONLY": {
                "type": "bigint",
                "description": "The number of read-only transactions."
            },
            "SUM_TIMER_READ_ONLY": {
                "type": "bigint",
                "description": "The total time spent on read-only transactions, in picoseconds."
            },
            "MIN_TIMER_READ_ONLY": {
                "type": "bigint",
                "description": "The minimum time spent on a single read-only transaction, in picoseconds."
            },
            "AVG_TIMER_READ_ONLY": {
                "type": "bigint",
                "description": "The average time spent on read-only transactions, in picoseconds."
            },
            "MAX_TIMER_READ_ONLY": {
                "type": "bigint",
                "description": "The maximum time spent on a single read-only transaction, in picoseconds."
            }
        },
        "description": "The `events_transactions_summary_by_user_by_event_name` table in the MySQL Performance Schema is used to aggregate transaction event data, categorized by user and event name. It provides insights into transaction characteristics and performance, such as timing and resource usage, broken down by specific users and transaction types, aiding in performance analysis and optimization."
    },
    "events_transactions_summary_global_by_event_name": {
        "ddl": "CREATE TABLE `events_transactions_summary_global_by_event_name` (\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name for which summary is generated.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'The number of summarized events. This value includes all events, whether timed or nontimed.',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The total wait time of the summarized timed events. This value is calculated only for timed events because nontimed events have a wait time of NULL. The same is true for the other xxx_TIMER_WAIT values.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The minimum wait time of the summarized timed events.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The average wait time of the summarized timed events.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'The maximum wait time of the summarized timed events.',\n  `COUNT_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The total number of only READ/WRITE transaction events.',\n  `SUM_TIMER_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The total wait time of only READ/WRITE transaction events.',\n  `MIN_TIMER_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The minimum wait time of only READ/WRITE transaction events.',\n  `AVG_TIMER_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The average wait time of only READ/WRITE transaction events.',\n  `MAX_TIMER_READ_WRITE` bigint(20) unsigned NOT NULL COMMENT 'The maximum wait time of only READ/WRITE transaction events.',\n  `COUNT_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The total number of only READ ONLY transaction events.',\n  `SUM_TIMER_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The total wait time of only READ ONLY transaction events.',\n  `MIN_TIMER_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The minimum wait time of only READ ONLY transaction events.',\n  `AVG_TIMER_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The average wait time of only READ ONLY transaction events.',\n  `MAX_TIMER_READ_ONLY` bigint(20) unsigned NOT NULL COMMENT 'The maximum wait time of only READ ONLY transaction events.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "EVENT_NAME": {
                "type": "varchar",
                "description": "Name of the event"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The number of observed events"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total wait time for the events"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum wait time for the events"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average wait time for the events"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum wait time for the events"
            },
            "COUNT_READ_WRITE": {
                "type": "bigint",
                "description": "The number of read-write events"
            },
            "SUM_TIMER_READ_WRITE": {
                "type": "bigint",
                "description": "The total wait time for read-write events"
            },
            "MIN_TIMER_READ_WRITE": {
                "type": "bigint",
                "description": "The minimum wait time for read-write events"
            },
            "AVG_TIMER_READ_WRITE": {
                "type": "bigint",
                "description": "The average wait time for read-write events"
            },
            "MAX_TIMER_READ_WRITE": {
                "type": "bigint",
                "description": "The maximum wait time for read-write events"
            },
            "COUNT_READ_ONLY": {
                "type": "bigint",
                "description": "The number of read-only events"
            },
            "SUM_TIMER_READ_ONLY": {
                "type": "bigint",
                "description": "The total wait time for read-only events"
            },
            "MIN_TIMER_READ_ONLY": {
                "type": "bigint",
                "description": "The minimum wait time for read-only events"
            },
            "AVG_TIMER_READ_ONLY": {
                "type": "bigint",
                "description": "The average wait time for read-only events"
            },
            "MAX_TIMER_READ_ONLY": {
                "type": "bigint",
                "description": "The maximum wait time for read-only events"
            }
        },
        "description": "The table `events_transactions_summary_global_by_event_name` in the Performance Schema of MySQL provides aggregated summaries of transaction events, grouped by event name. It helps in identifying transaction characteristics and performance by offering statistics such as the number of transactions, lock times, and the total time taken by transactions globally across the server."
    },
    "events_waits_current": {
        "ddl": "CREATE TABLE `events_waits_current` (\n  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread associated with the event. Together with EVENT_ID uniquely identifies the row.',\n  `EVENT_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread''s current event number at the start of the event. Together with THREAD_ID uniquely identifies the row.',\n  `END_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'NULL when the event starts, set to the thread''s current event number at the end of the event.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event instrument name and a NAME from the setup_instruments table',\n  `SOURCE` varchar(64) DEFAULT NULL COMMENT 'Name and line number of the source file containing the instrumented code that produced the event.',\n  `TIMER_START` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds when the event timing started or NULL if timing is not collected.',\n  `TIMER_END` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds when the event timing ended, or NULL if the event has not ended or timing is not collected.',\n  `TIMER_WAIT` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds of the event''s duration or NULL if the event has not ended or timing is not collected.',\n  `SPINS` int(10) unsigned DEFAULT NULL COMMENT 'Number of spin rounds for a mutex, or NULL if spin rounds are not used, or spinning is not instrumented.',\n  `OBJECT_SCHEMA` varchar(64) DEFAULT NULL COMMENT 'Name of the schema that contains the table for table I/O objects, otherwise NULL for file I/O and synchronization objects.',\n  `OBJECT_NAME` varchar(512) DEFAULT NULL COMMENT 'File name for file I/O objects, table name for table I/O objects, the socket''s IP:PORT value for a socket object or NULL for a synchronization object.',\n  `INDEX_NAME` varchar(64) DEFAULT NULL COMMENT 'Name of the index, PRIMARY for the primary key, or NULL for no index used.',\n  `OBJECT_TYPE` varchar(64) DEFAULT NULL COMMENT 'FILE for a file object, TABLE or TEMPORARY TABLE for a table object, or NULL for a synchronization object.',\n  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned NOT NULL COMMENT 'Address in memory of the object.',\n  `NESTING_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'EVENT_ID of event within which this event nests.',\n  `NESTING_EVENT_TYPE` enum('TRANSACTION','STATEMENT','STAGE','WAIT') DEFAULT NULL COMMENT 'Nesting event type. Either statement, stage or wait.',\n  `OPERATION` varchar(32) NOT NULL COMMENT 'Operation type, for example read, write or lock',\n  `NUMBER_OF_BYTES` bigint(20) DEFAULT NULL COMMENT 'Number of bytes that the operation read or wrote, or NULL for table I/O waits.',\n  `FLAGS` int(10) unsigned DEFAULT NULL COMMENT 'Reserved for use in the future.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "THREAD_ID": {
                "type": "bigint",
                "description": "The thread within MySQL server associated with the event"
            },
            "EVENT_ID": {
                "type": "bigint",
                "description": "A unique identifier for the event"
            },
            "END_EVENT_ID": {
                "type": "bigint",
                "description": "The EVENT_ID at which the current event ended; NULL if the event has not ended"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the event instrument that produced the event"
            },
            "SOURCE": {
                "type": "varchar",
                "description": "The source code location that triggered the event"
            },
            "TIMER_START": {
                "type": "bigint",
                "description": "The start time of the event timer"
            },
            "TIMER_END": {
                "type": "bigint",
                "description": "The end time of the event timer"
            },
            "TIMER_WAIT": {
                "type": "bigint",
                "description": "The amount of time, in picoseconds, spent in the event"
            },
            "SPINS": {
                "type": "int",
                "description": "The number of mutex spins for the event"
            },
            "OBJECT_SCHEMA": {
                "type": "varchar",
                "description": "The database schema associated with the event"
            },
            "OBJECT_NAME": {
                "type": "varchar",
                "description": "The name of the database object associated with the event"
            },
            "INDEX_NAME": {
                "type": "varchar",
                "description": "The name of the database index associated with the event, if any"
            },
            "OBJECT_TYPE": {
                "type": "varchar",
                "description": "The type of the database object associated with the event"
            },
            "OBJECT_INSTANCE_BEGIN": {
                "type": "bigint",
                "description": "A memory address that represents the location of the object involved in the event"
            },
            "NESTING_EVENT_ID": {
                "type": "bigint",
                "description": "The EVENT_ID of the event that caused the current event"
            },
            "NESTING_EVENT_TYPE": {
                "type": "enum",
                "description": "The type of the event that caused the current event (e.g., statement, stage)"
            },
            "OPERATION": {
                "type": "varchar",
                "description": "The type of operation performed that triggered the event"
            },
            "NUMBER_OF_BYTES": {
                "type": "bigint",
                "description": "The number of bytes processed during the event"
            },
            "FLAGS": {
                "type": "int",
                "description": "Miscellaneous flags associated with the event"
            }
        },
        "description": "The `events_waits_current` table in the Performance Schema is used to monitor current wait events. It provides detailed information about each event that is currently in process, including the event name, the thread involved, how much time is being spent on the wait, and additional context about the wait condition."
    },
    "events_waits_history": {
        "ddl": "CREATE TABLE `events_waits_history` (\n  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread associated with the event. Together with EVENT_ID uniquely identifies the row.',\n  `EVENT_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread''s current event number at the start of the event. Together with THREAD_ID uniquely identifies the row.',\n  `END_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'NULL when the event starts, set to the thread''s current event number at the end of the event.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event instrument name and a NAME from the setup_instruments table',\n  `SOURCE` varchar(64) DEFAULT NULL COMMENT 'Name and line number of the source file containing the instrumented code that produced the event.',\n  `TIMER_START` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds when the event timing started or NULL if timing is not collected.',\n  `TIMER_END` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds when the event timing ended, or NULL if the event has not ended or timing is not collected.',\n  `TIMER_WAIT` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds of the event''s duration or NULL if the event has not ended or timing is not collected.',\n  `SPINS` int(10) unsigned DEFAULT NULL COMMENT 'Number of spin rounds for a mutex, or NULL if spin rounds are not used, or spinning is not instrumented.',\n  `OBJECT_SCHEMA` varchar(64) DEFAULT NULL COMMENT 'Name of the schema that contains the table for table I/O objects, otherwise NULL for file I/O and synchronization objects.',\n  `OBJECT_NAME` varchar(512) DEFAULT NULL COMMENT 'File name for file I/O objects, table name for table I/O objects, the socket''s IP:PORT value for a socket object or NULL for a synchronization object.',\n  `INDEX_NAME` varchar(64) DEFAULT NULL COMMENT 'Name of the index, PRIMARY for the primary key, or NULL for no index used.',\n  `OBJECT_TYPE` varchar(64) DEFAULT NULL COMMENT 'FILE for a file object, TABLE or TEMPORARY TABLE for a table object, or NULL for a synchronization object.',\n  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned NOT NULL COMMENT 'Address in memory of the object.',\n  `NESTING_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'EVENT_ID of event within which this event nests.',\n  `NESTING_EVENT_TYPE` enum('TRANSACTION','STATEMENT','STAGE','WAIT') DEFAULT NULL COMMENT 'Nesting event type. Either statement, stage or wait.',\n  `OPERATION` varchar(32) NOT NULL COMMENT 'Operation type, for example read, write or lock',\n  `NUMBER_OF_BYTES` bigint(20) DEFAULT NULL COMMENT 'Number of bytes that the operation read or wrote, or NULL for table I/O waits.',\n  `FLAGS` int(10) unsigned DEFAULT NULL COMMENT 'Reserved for use in the future.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "THREAD_ID": {
                "type": "bigint",
                "description": "Unique identifier for the thread that issued the wait event"
            },
            "EVENT_ID": {
                "type": "bigint",
                "description": "Unique identifier for the event"
            },
            "END_EVENT_ID": {
                "type": "bigint",
                "description": "Event ID when the wait event ended"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "Name of the instrumented wait event"
            },
            "SOURCE": {
                "type": "varchar",
                "description": "Source code location that produced the event"
            },
            "TIMER_START": {
                "type": "bigint",
                "description": "Start time of the timer for the event"
            },
            "TIMER_END": {
                "type": "bigint",
                "description": "End time of the timer for the event"
            },
            "TIMER_WAIT": {
                "type": "bigint",
                "description": "Duration of the wait"
            },
            "SPINS": {
                "type": "int",
                "description": "Number of spin rounds for a mutex or a rw-lock"
            },
            "OBJECT_SCHEMA": {
                "type": "varchar",
                "description": "Schema of the object involved in the event"
            },
            "OBJECT_NAME": {
                "type": "varchar",
                "description": "Name of the object involved in the event"
            },
            "INDEX_NAME": {
                "type": "varchar",
                "description": "Name of the index involved in the event, if any"
            },
            "OBJECT_TYPE": {
                "type": "varchar",
                "description": "Type of the object involved in the event"
            },
            "OBJECT_INSTANCE_BEGIN": {
                "type": "bigint",
                "description": "Address in memory of the object involved in the event"
            },
            "NESTING_EVENT_ID": {
                "type": "bigint",
                "description": "Event ID of the event within which this event is nested"
            },
            "NESTING_EVENT_TYPE": {
                "type": "enum",
                "description": "Type of the event (statement, stage, wait) within which this event is nested"
            },
            "OPERATION": {
                "type": "varchar",
                "description": "Operation performed on the object"
            },
            "NUMBER_OF_BYTES": {
                "type": "bigint",
                "description": "Number of bytes read or written during the event"
            },
            "FLAGS": {
                "type": "int",
                "description": "Flags providing additional information about the event"
            }
        },
        "description": "The `events_waits_history` table in the Performance Schema of MySQL is used to record the most recent wait events that have ended, providing a chronological log of these events. This table helps in diagnosing system performance issues by allowing you to analyze what types of wait events have recently occurred and how long they lasted."
    },
    "events_waits_history_long": {
        "ddl": "CREATE TABLE `events_waits_history_long` (\n  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread associated with the event. Together with EVENT_ID uniquely identifies the row.',\n  `EVENT_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread''s current event number at the start of the event. Together with THREAD_ID uniquely identifies the row.',\n  `END_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'NULL when the event starts, set to the thread''s current event number at the end of the event.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event instrument name and a NAME from the setup_instruments table',\n  `SOURCE` varchar(64) DEFAULT NULL COMMENT 'Name and line number of the source file containing the instrumented code that produced the event.',\n  `TIMER_START` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds when the event timing started or NULL if timing is not collected.',\n  `TIMER_END` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds when the event timing ended, or NULL if the event has not ended or timing is not collected.',\n  `TIMER_WAIT` bigint(20) unsigned DEFAULT NULL COMMENT 'Value in picoseconds of the event''s duration or NULL if the event has not ended or timing is not collected.',\n  `SPINS` int(10) unsigned DEFAULT NULL COMMENT 'Number of spin rounds for a mutex, or NULL if spin rounds are not used, or spinning is not instrumented.',\n  `OBJECT_SCHEMA` varchar(64) DEFAULT NULL COMMENT 'Name of the schema that contains the table for table I/O objects, otherwise NULL for file I/O and synchronization objects.',\n  `OBJECT_NAME` varchar(512) DEFAULT NULL COMMENT 'File name for file I/O objects, table name for table I/O objects, the socket''s IP:PORT value for a socket object or NULL for a synchronization object.',\n  `INDEX_NAME` varchar(64) DEFAULT NULL COMMENT 'Name of the index, PRIMARY for the primary key, or NULL for no index used.',\n  `OBJECT_TYPE` varchar(64) DEFAULT NULL COMMENT 'FILE for a file object, TABLE or TEMPORARY TABLE for a table object, or NULL for a synchronization object.',\n  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned NOT NULL COMMENT 'Address in memory of the object.',\n  `NESTING_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'EVENT_ID of event within which this event nests.',\n  `NESTING_EVENT_TYPE` enum('TRANSACTION','STATEMENT','STAGE','WAIT') DEFAULT NULL COMMENT 'Nesting event type. Either statement, stage or wait.',\n  `OPERATION` varchar(32) NOT NULL COMMENT 'Operation type, for example read, write or lock',\n  `NUMBER_OF_BYTES` bigint(20) DEFAULT NULL COMMENT 'Number of bytes that the operation read or wrote, or NULL for table I/O waits.',\n  `FLAGS` int(10) unsigned DEFAULT NULL COMMENT 'Reserved for use in the future.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "THREAD_ID": {
                "type": "bigint",
                "description": "The thread within which the event occurred"
            },
            "EVENT_ID": {
                "type": "bigint",
                "description": "The event identifier"
            },
            "END_EVENT_ID": {
                "type": "bigint",
                "description": "The event identifier at which this event ended"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the event"
            },
            "SOURCE": {
                "type": "varchar",
                "description": "The source code location that triggered the event"
            },
            "TIMER_START": {
                "type": "bigint",
                "description": "Start time of the timer for the event"
            },
            "TIMER_END": {
                "type": "bigint",
                "description": "End time of the timer for the event"
            },
            "TIMER_WAIT": {
                "type": "bigint",
                "description": "The time waited for the event, in picoseconds"
            },
            "SPINS": {
                "type": "int",
                "description": "The number of spins for the event"
            },
            "OBJECT_SCHEMA": {
                "type": "varchar",
                "description": "The schema of the object involved in the event"
            },
            "OBJECT_NAME": {
                "type": "varchar",
                "description": "The name of the object involved in the event"
            },
            "INDEX_NAME": {
                "type": "varchar",
                "description": "The name of the index involved in the event, if any"
            },
            "OBJECT_TYPE": {
                "type": "varchar",
                "description": "The type of object involved in the event"
            },
            "OBJECT_INSTANCE_BEGIN": {
                "type": "bigint",
                "description": "The address in memory of the object involved in the event"
            },
            "NESTING_EVENT_ID": {
                "type": "bigint",
                "description": "The event ID of the event within which this event is nested"
            },
            "NESTING_EVENT_TYPE": {
                "type": "enum",
                "description": "The type of event within which this event is nested"
            },
            "OPERATION": {
                "type": "varchar",
                "description": "The type of operation being waited on"
            },
            "NUMBER_OF_BYTES": {
                "type": "bigint",
                "description": "The number of bytes processed during the operation, if applicable"
            },
            "FLAGS": {
                "type": "int",
                "description": "Flags providing additional information about the event"
            }
        },
        "description": "The `events_waits_history_long` table in the Performance Schema serves as a record of the most recent wait events across all threads, capturing a wider and longer-term range of events than its counterpart, the `events_waits_history` table. It provides detailed information about wait events, including type, timing, and source, which is crucial for diagnosing performance issues by tracking resource waits over an extended period."
    },
    "events_waits_summary_by_account_by_event_name": {
        "ddl": "CREATE TABLE `events_waits_summary_by_account_by_event_name` (\n  `USER` char(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'User. Used together with HOST and EVENT_NAME for grouping events.',\n  `HOST` char(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'Host. Used together with USER and EVENT_NAME for grouping events.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name. Used together with USER and HOST for grouping events.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the summarized events that are timed.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the summarized events that are timed.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the summarized events that are timed.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the summarized events that are timed.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "USER": {
                "type": "char",
                "description": "The user who issued the statement causing the wait."
            },
            "HOST": {
                "type": "char",
                "description": "The host from which the user issued the statement."
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the event that produced the wait."
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The number of waits that occurred."
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total time waited for the event, in picoseconds."
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum time waited for a single occurrence of the event, in picoseconds."
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average time waited per occurrence of the event, in picoseconds."
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum time waited for a single occurrence of the event, in picoseconds."
            }
        },
        "description": "The `events_waits_summary_by_account_by_event_name` table in the Performance Schema of MySQL aggregates wait event statistics by account and event name. It provides detailed insights into the wait events experienced by different user accounts, assisting in performance analysis and troubleshooting at a granular level."
    },
    "events_waits_summary_by_host_by_event_name": {
        "ddl": "CREATE TABLE `events_waits_summary_by_host_by_event_name` (\n  `HOST` char(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'Host. Used together with EVENT_NAME for grouping events.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name. Used together with USER and HOST for grouping events.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the summarized events that are timed.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the summarized events that are timed.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the summarized events that are timed.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the summarized events that are timed.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "HOST": {
                "type": "char",
                "description": "Stores the host name of the client that issued the statement."
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "Contains the name of the instrumented event."
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The number of occurrences of the event."
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total time spent waiting for the event (in picoseconds)."
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum time spent in a single occurrence of the event (in picoseconds)."
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average time spent per occurrence of the event (in picoseconds)."
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum time spent in a single occurrence of the event (in picoseconds)."
            }
        },
        "description": "The `events_waits_summary_by_host_by_event_name` table in the MySQL Performance Schema provides aggregated summaries of wait events, organized by host and event name. This allows for analyzing the wait events (such as lock waits, IO waits, etc.) experienced by different hosts, useful in identifying bottlenecks or performance issues at the host level."
    },
    "events_waits_summary_by_instance": {
        "ddl": "CREATE TABLE `events_waits_summary_by_instance` (\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name. Used together with OBJECT_INSTANCE_BEGIN for grouping events.',\n  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned NOT NULL COMMENT 'If an instrument creates multiple instances, each instance has a unique OBJECT_INSTANCE_BEGIN value to allow for grouping by instance.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the summarized events that are timed.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the summarized events that are timed.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the summarized events that are timed.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the summarized events that are timed.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "EVENT_NAME": {
                "type": "varchar",
                "description": "Name of the instrumented event"
            },
            "OBJECT_INSTANCE_BEGIN": {
                "type": "bigint",
                "description": "The address in memory of the instrumented object"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The number of summarized events"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total time spent on the event"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum time spent on any occurrence of the event"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average time spent on the event"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum time spent on any occurrence of the event"
            }
        },
        "description": "The `events_waits_summary_by_instance` table in the MySQL Performance Schema provides detailed wait event statistics, aggregated by each instance (object) that experienced wait events, such as specific file, mutex, or socket. It allows for the analysis of performance issues by identifying which particular instance is causing delays, aiding in precise troubleshooting and optimization efforts."
    },
    "events_waits_summary_by_thread_by_event_name": {
        "ddl": "CREATE TABLE `events_waits_summary_by_thread_by_event_name` (\n  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread associated with the event. Together with EVENT_NAME uniquely identifies the row.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name. Used together with THREAD_ID for grouping events.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the summarized events that are timed.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the summarized events that are timed.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the summarized events that are timed.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the summarized events that are timed.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "THREAD_ID": {
                "type": "bigint",
                "description": "The thread to which the summarized events belong"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the instrumented event"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The number of summarized events"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total wait time for the summarized events"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum wait time among the summarized events"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average wait time for the summarized events"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum wait time among the summarized events"
            }
        },
        "description": "The `events_waits_summary_by_thread_by_event_name` table in the Performance Schema provides aggregated summaries of wait events, organized by thread and event name. It's useful for identifying and analyzing wait-related performance issues on a per-thread basis, enabling targeted optimization efforts."
    },
    "events_waits_summary_by_user_by_event_name": {
        "ddl": "CREATE TABLE `events_waits_summary_by_user_by_event_name` (\n  `USER` char(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'User. Used together with EVENT_NAME for grouping events.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name. Used together with USER for grouping events.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the summarized events that are timed.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the summarized events that are timed.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the summarized events that are timed.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the summarized events that are timed.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "USER": {
                "type": "char",
                "description": "The user who issued the SQL statement"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the wait event"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The number of times this event has occurred"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total time spent on this event, in picoseconds"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum time spent on a single occurrence of this event, in picoseconds"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average time spent on this event, in picoseconds"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum time spent on a single occurrence of this event, in picoseconds"
            }
        },
        "description": "The `events_waits_summary_by_user_by_event_name` table in the Performance Schema aggregates wait events by user and event name. This table helps in identifying and analyzing the wait events (such as IO waits, lock waits, etc.) experienced by different users, facilitating performance tuning and identifying bottlenecks at the user level."
    },
    "events_waits_summary_global_by_event_name": {
        "ddl": "CREATE TABLE `events_waits_summary_global_by_event_name` (\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the summarized events that are timed.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the summarized events that are timed.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the summarized events that are timed.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the summarized events that are timed.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the instrumented event"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The count of events"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total wait time for the counted events"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum wait time seen for these events"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average wait time for these events"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum wait time seen for these events"
            }
        },
        "description": "The `events_waits_summary_global_by_event_name` table in MySQL's Performance Schema provides aggregated summaries of wait events, categorized by event name. It is used to track and analyze system performance issues related to wait events, helping in identifying bottlenecks or areas requiring optimization."
    },
    "file_instances": {
        "ddl": "CREATE TABLE `file_instances` (\n  `FILE_NAME` varchar(512) NOT NULL COMMENT 'File name.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Instrument name associated with the file.',\n  `OPEN_COUNT` int(10) unsigned NOT NULL COMMENT 'Open handles on the file. A value of greater than zero means that the file is currently open.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "FILE_NAME": {
                "type": "varchar",
                "description": "Stores the fully qualified name of the file."
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "Stores the instrument name associated with the file."
            },
            "OPEN_COUNT": {
                "type": "int",
                "description": "Stores the number of times the file has been opened."
            }
        },
        "description": "The `file_instances` table in the Performance Schema of MySQL is used to monitor and provide information about open file instances within the server. This includes details such as the file name, its event name, and the file's open/close status, thus aiding in tracking file usage and identifying potential file-related performance issues."
    },
    "file_summary_by_event_name": {
        "ddl": "CREATE TABLE `file_summary_by_event_name` (\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the summarized events that are timed.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the summarized events that are timed.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the summarized events that are timed.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the summarized events that are timed.',\n  `COUNT_READ` bigint(20) unsigned NOT NULL COMMENT 'Number of all read operations, including FGETS, FGETC, FREAD, and READ.',\n  `SUM_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all read operations that are timed.',\n  `MIN_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all read operations that are timed.',\n  `AVG_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all read operations that are timed.',\n  `MAX_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all read operations that are timed.',\n  `SUM_NUMBER_OF_BYTES_READ` bigint(20) NOT NULL COMMENT 'Bytes read by read operations.',\n  `COUNT_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Number of all write operations, including FPUTS, FPUTC, FPRINTF, VFPRINTF, FWRITE, and PWRITE.',\n  `SUM_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all write operations that are timed.',\n  `MIN_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all write operations that are timed.',\n  `AVG_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all write operations that are timed.',\n  `MAX_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all write operations that are timed.',\n  `SUM_NUMBER_OF_BYTES_WRITE` bigint(20) NOT NULL COMMENT 'Bytes written by write operations.',\n  `COUNT_MISC` bigint(20) unsigned NOT NULL COMMENT 'Number of all miscellaneous operations not counted above, including CREATE, DELETE, OPEN, CLOSE, STREAM_OPEN, STREAM_CLOSE, SEEK, TELL, FLUSH, STAT, FSTAT, CHSIZE, RENAME, and SYNC.',\n  `SUM_TIMER_MISC` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all miscellaneous operations that are timed.',\n  `MIN_TIMER_MISC` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all miscellaneous operations that are timed.',\n  `AVG_TIMER_MISC` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all miscellaneous operations that are timed.',\n  `MAX_TIMER_MISC` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all miscellaneous operations that are timed.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the event being summarized"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The number of occurrences for the summarized event"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total time waited for the summarized event"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum time waited for a single occurrence of the summarized event"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average time waited for the summarized event"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum time waited for a single occurrence of the summarized event"
            },
            "COUNT_READ": {
                "type": "bigint",
                "description": "The number of read operations for the summarized event"
            },
            "SUM_TIMER_READ": {
                "type": "bigint",
                "description": "The total time waited for read operations for the summarized event"
            },
            "MIN_TIMER_READ": {
                "type": "bigint",
                "description": "The minimum time waited for a single read operation for the summarized event"
            },
            "AVG_TIMER_READ": {
                "type": "bigint",
                "description": "The average time waited for read operations for the summarized event"
            },
            "MAX_TIMER_READ": {
                "type": "bigint",
                "description": "The maximum time waited for a single read operation for the summarized event"
            },
            "SUM_NUMBER_OF_BYTES_READ": {
                "type": "bigint",
                "description": "The sum of bytes read during the summarized event"
            },
            "COUNT_WRITE": {
                "type": "bigint",
                "description": "The number of write operations for the summarized event"
            },
            "SUM_TIMER_WRITE": {
                "type": "bigint",
                "description": "The total time waited for write operations for the summarized event"
            },
            "MIN_TIMER_WRITE": {
                "type": "bigint",
                "description": "The minimum time waited for a single write operation for the summarized event"
            },
            "AVG_TIMER_WRITE": {
                "type": "bigint",
                "description": "The average time waited for write operations for the summarized event"
            },
            "MAX_TIMER_WRITE": {
                "type": "bigint",
                "description": "The maximum time waited for a single write operation for the summarized event"
            },
            "SUM_NUMBER_OF_BYTES_WRITE": {
                "type": "bigint",
                "description": "The sum of bytes written during the summarized event"
            },
            "COUNT_MISC": {
                "type": "bigint",
                "description": "The number of miscellaneous operations for the summarized event"
            },
            "SUM_TIMER_MISC": {
                "type": "bigint",
                "description": "The total time waited for miscellaneous operations for the summarized event"
            },
            "MIN_TIMER_MISC": {
                "type": "bigint",
                "description": "The minimum time waited for a single miscellaneous operation for the summarized event"
            },
            "AVG_TIMER_MISC": {
                "type": "bigint",
                "description": "The average time waited for miscellaneous operations for the summarized event"
            },
            "MAX_TIMER_MISC": {
                "type": "bigint",
                "description": "The maximum time waited for a single miscellaneous operation for the summarized event"
            }
        },
        "description": "The `file_summary_by_event_name` table in MySQL's Performance Schema is used to summarize file I/O events, aggregating them by the event name. This table helps in identifying the total number and types of file I/O operations, facilitating the analysis of file I/O performance and potential bottlenecks."
    },
    "file_summary_by_instance": {
        "ddl": "CREATE TABLE `file_summary_by_instance` (\n  `FILE_NAME` varchar(512) NOT NULL COMMENT 'File name.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name.',\n  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned NOT NULL COMMENT 'Address in memory. Together with FILE_NAME and EVENT_NAME uniquely identifies a row.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the summarized events that are timed.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the summarized events that are timed.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the summarized events that are timed.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the summarized events that are timed.',\n  `COUNT_READ` bigint(20) unsigned NOT NULL COMMENT 'Number of all read operations, including FGETS, FGETC, FREAD, and READ.',\n  `SUM_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all read operations that are timed.',\n  `MIN_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all read operations that are timed.',\n  `AVG_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all read operations that are timed.',\n  `MAX_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all read operations that are timed.',\n  `SUM_NUMBER_OF_BYTES_READ` bigint(20) NOT NULL COMMENT 'Bytes read by read operations.',\n  `COUNT_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Number of all write operations, including FPUTS, FPUTC, FPRINTF, VFPRINTF, FWRITE, and PWRITE.',\n  `SUM_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all write operations that are timed.',\n  `MIN_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all write operations that are timed.',\n  `AVG_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all write operations that are timed.',\n  `MAX_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all write operations that are timed.',\n  `SUM_NUMBER_OF_BYTES_WRITE` bigint(20) NOT NULL COMMENT 'Bytes written by write operations.',\n  `COUNT_MISC` bigint(20) unsigned NOT NULL COMMENT 'Number of all miscellaneous operations not counted above, including CREATE, DELETE, OPEN, CLOSE, STREAM_OPEN, STREAM_CLOSE, SEEK, TELL, FLUSH, STAT, FSTAT, CHSIZE, RENAME, and SYNC.',\n  `SUM_TIMER_MISC` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all miscellaneous operations that are timed.',\n  `MIN_TIMER_MISC` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all miscellaneous operations that are timed.',\n  `AVG_TIMER_MISC` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all miscellaneous operations that are timed.',\n  `MAX_TIMER_MISC` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all miscellaneous operations that are timed.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "FILE_NAME": {
                "type": "varchar",
                "description": "Stores the name of the file that the event is associated with"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "Stores the name of the event that occurred"
            },
            "OBJECT_INSTANCE_BEGIN": {
                "type": "bigint",
                "description": "Stores a unique identifier for the instance of the object that the event is associated with"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "Stores the total count of events"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "Stores the total time waited for the event in picoseconds"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "Stores the minimum time waited for the event in picoseconds"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "Stores the average time waited for the event in picoseconds"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "Stores the maximum time waited for the event in picoseconds"
            },
            "COUNT_READ": {
                "type": "bigint",
                "description": "Stores the total count of read operations"
            },
            "SUM_TIMER_READ": {
                "type": "bigint",
                "description": "Stores the total time waited for read operations in picoseconds"
            },
            "MIN_TIMER_READ": {
                "type": "bigint",
                "description": "Stores the minimum time waited for read operations in picoseconds"
            },
            "AVG_TIMER_READ": {
                "type": "bigint",
                "description": "Stores the average time waited for read operations in picoseconds"
            },
            "MAX_TIMER_READ": {
                "type": "bigint",
                "description": "Stores the maximum time waited for read operations in picoseconds"
            },
            "SUM_NUMBER_OF_BYTES_READ": {
                "type": "bigint",
                "description": "Stores the sum of bytes read"
            },
            "COUNT_WRITE": {
                "type": "bigint",
                "description": "Stores the total count of write operations"
            },
            "SUM_TIMER_WRITE": {
                "type": "bigint",
                "description": "Stores the total time waited for write operations in picoseconds"
            },
            "MIN_TIMER_WRITE": {
                "type": "bigint",
                "description": "Stores the minimum time waited for write operations in picoseconds"
            },
            "AVG_TIMER_WRITE": {
                "type": "bigint",
                "description": "Stores the average time waited for write operations in picoseconds"
            },
            "MAX_TIMER_WRITE": {
                "type": "bigint",
                "description": "Stores the maximum time waited for write operations in picoseconds"
            },
            "SUM_NUMBER_OF_BYTES_WRITE": {
                "type": "bigint",
                "description": "Stores the sum of bytes written"
            },
            "COUNT_MISC": {
                "type": "bigint",
                "description": "Stores the total count of miscellaneous operations"
            },
            "SUM_TIMER_MISC": {
                "type": "bigint",
                "description": "Stores the total time waited for miscellaneous operations in picoseconds"
            },
            "MIN_TIMER_MISC": {
                "type": "bigint",
                "description": "Stores the minimum time waited for miscellaneous operations in picoseconds"
            },
            "AVG_TIMER_MISC": {
                "type": "bigint",
                "description": "Stores the average time waited for miscellaneous operations in picoseconds"
            },
            "MAX_TIMER_MISC": {
                "type": "bigint",
                "description": "Stores the maximum time waited for miscellaneous operations in picoseconds"
            }
        },
        "description": "The `file_summary_by_instance` table in the MySQL Performance Schema provides detailed statistics about file I/O operations, aggregated by individual file instances. It helps in diagnosing performance issues by allowing analysis of I/O activities, including counts and timing of reads, writes, and other file operations per file."
    },
    "global_status": {
        "ddl": "CREATE TABLE `global_status` (\n  `VARIABLE_NAME` varchar(64) NOT NULL COMMENT 'The global status variable name.',\n  `VARIABLE_VALUE` varchar(1024) DEFAULT NULL COMMENT 'The global status variable value.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "VARIABLE_NAME": {
                "type": "varchar",
                "description": "The name of the server system variable."
            },
            "VARIABLE_VALUE": {
                "type": "varchar",
                "description": "The current value of the server system variable."
            }
        },
        "description": "The `global_status` table in the Performance Schema provides a snapshot of the current global status variables for the MySQL server. It is used to monitor server-wide metrics such as the number of connections or queries being processed."
    },
    "host_cache": {
        "ddl": "CREATE TABLE `host_cache` (\n  `IP` varchar(64) NOT NULL COMMENT 'Client IP address.',\n  `HOST` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'IP''s resolved DNS host name, or NULL if unknown.',\n  `HOST_VALIDATED` enum('YES','NO') NOT NULL COMMENT 'YES if the IP-to-host DNS lookup was successful, and the HOST column can be used to avoid DNS calls, or NO if unsuccessful, in which case DNS lookup is performed for each connect until either successful or a permanent error.',\n  `SUM_CONNECT_ERRORS` bigint(20) NOT NULL COMMENT 'Number of connection errors. Counts only protocol handshake errors for hosts that passed validation. These errors count towards max_connect_errors.',\n  `COUNT_HOST_BLOCKED_ERRORS` bigint(20) NOT NULL COMMENT 'Number of blocked connections because SUM_CONNECT_ERRORS exceeded the max_connect_errors system variable.',\n  `COUNT_NAMEINFO_TRANSIENT_ERRORS` bigint(20) NOT NULL COMMENT 'Number of transient errors during IP-to-host DNS lookups.',\n  `COUNT_NAMEINFO_PERMANENT_ERRORS` bigint(20) NOT NULL COMMENT 'Number of permanent errors during IP-to-host DNS lookups.',\n  `COUNT_FORMAT_ERRORS` bigint(20) NOT NULL COMMENT 'Number of host name format errors, for example a numeric host column.',\n  `COUNT_ADDRINFO_TRANSIENT_ERRORS` bigint(20) NOT NULL COMMENT 'Number of transient errors during host-to-IP reverse DNS lookups.',\n  `COUNT_ADDRINFO_PERMANENT_ERRORS` bigint(20) NOT NULL COMMENT 'Number of permanent errors during host-to-IP reverse DNS lookups.',\n  `COUNT_FCRDNS_ERRORS` bigint(20) NOT NULL COMMENT 'Number of forward-confirmed reverse DNS errors, which occur when IP-to-host DNS lookup does not match the originating IP address.',\n  `COUNT_HOST_ACL_ERRORS` bigint(20) NOT NULL COMMENT 'Number of errors occurring because no user from the host is permitted to log in. These attempts return error code 1130 ER_HOST_NOT_PRIVILEGED and do not proceed to username and password authentication.',\n  `COUNT_NO_AUTH_PLUGIN_ERRORS` bigint(20) NOT NULL COMMENT 'Number of errors due to requesting an authentication plugin that was not available. This can be due to the plugin never having been loaded, or the load attempt failing.',\n  `COUNT_AUTH_PLUGIN_ERRORS` bigint(20) NOT NULL COMMENT 'Number of errors reported by an authentication plugin. Plugins can increment COUNT_AUTHENTICATION_ERRORS or COUNT_HANDSHAKE_ERRORS instead, but, if specified or the error is unknown, this column is incremented.',\n  `COUNT_HANDSHAKE_ERRORS` bigint(20) NOT NULL COMMENT 'Number of errors detected at the wire protocol level.',\n  `COUNT_PROXY_USER_ERRORS` bigint(20) NOT NULL COMMENT 'Number of errors detected when a proxy user is proxied to a user that does not exist.',\n  `COUNT_PROXY_USER_ACL_ERRORS` bigint(20) NOT NULL COMMENT 'Number of errors detected when a proxy user is proxied to a user that exists, but the proxy user doesn''t have the PROXY privilege.',\n  `COUNT_AUTHENTICATION_ERRORS` bigint(20) NOT NULL COMMENT 'Number of errors where authentication failed.',\n  `COUNT_SSL_ERRORS` bigint(20) NOT NULL COMMENT 'Number of errors due to TLS problems.',\n  `COUNT_MAX_USER_CONNECTIONS_ERRORS` bigint(20) NOT NULL COMMENT 'Number of errors due to the per-user quota being exceeded.',\n  `COUNT_MAX_USER_CONNECTIONS_PER_HOUR_ERRORS` bigint(20) NOT NULL COMMENT 'Number of errors due to the per-hour quota being exceeded.',\n  `COUNT_DEFAULT_DATABASE_ERRORS` bigint(20) NOT NULL COMMENT 'Number of errors due to the user not having permission to access the specified default database, or it not existing.',\n  `COUNT_INIT_CONNECT_ERRORS` bigint(20) NOT NULL COMMENT 'Number of errors due to statements in the init_connect system variable.',\n  `COUNT_LOCAL_ERRORS` bigint(20) NOT NULL COMMENT 'Number of local server errors, such as out-of-memory errors, unrelated to network, authentication, or authorization.',\n  `COUNT_UNKNOWN_ERRORS` bigint(20) NOT NULL COMMENT 'Number of unknown errors that cannot be allocated to another column.',\n  `FIRST_SEEN` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT 'Timestamp of the first connection attempt by the IP.',\n  `LAST_SEEN` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT 'Timestamp of the most recent connection attempt by the IP.',\n  `FIRST_ERROR_SEEN` timestamp NULL DEFAULT '0000-00-00 00:00:00' COMMENT 'Timestamp of the first error seen from the IP.',\n  `LAST_ERROR_SEEN` timestamp NULL DEFAULT '0000-00-00 00:00:00' COMMENT 'Timestamp of the most recent error seen from the IP.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "IP": {
                "type": "varchar",
                "description": "Stores the IP address of the client that attempted to connect"
            },
            "HOST": {
                "type": "varchar",
                "description": "Stores the host name of the client that attempted to connect"
            },
            "HOST_VALIDATED": {
                "type": "enum",
                "description": "Indicates whether the host name has been validated against the IP address"
            },
            "SUM_CONNECT_ERRORS": {
                "type": "bigint",
                "description": "Cumulative sum of connection errors from this host"
            },
            "COUNT_HOST_BLOCKED_ERRORS": {
                "type": "bigint",
                "description": "Number of errors due to the host being blocked (e.g., by the MySQL server)"
            },
            "COUNT_NAMEINFO_TRANSIENT_ERRORS": {
                "type": "bigint",
                "description": "Number of transient name resolution errors"
            },
            "COUNT_NAMEINFO_PERMANENT_ERRORS": {
                "type": "bigint",
                "description": "Number of permanent name resolution errors"
            },
            "COUNT_FORMAT_ERRORS": {
                "type": "bigint",
                "description": "Number of errors due to bad packet format"
            },
            "COUNT_ADDRINFO_TRANSIENT_ERRORS": {
                "type": "bigint",
                "description": "Number of transient errors during IP address resolution"
            },
            "COUNT_ADDRINFO_PERMANENT_ERRORS": {
                "type": "bigint",
                "description": "Number of permanent errors during IP address resolution"
            },
            "COUNT_FCRDNS_ERRORS": {
                "type": "bigint",
                "description": "Number of errors related to forward-confirmed reverse DNS validation"
            },
            "COUNT_HOST_ACL_ERRORS": {
                "type": "bigint",
                "description": "Number of errors due to host not matching the host ACL"
            },
            "COUNT_NO_AUTH_PLUGIN_ERRORS": {
                "type": "bigint",
                "description": "Number of errors due to no authentication plugin being found"
            },
            "COUNT_AUTH_PLUGIN_ERRORS": {
                "type": "bigint",
                "description": "Number of errors related to authentication plugin failures"
            },
            "COUNT_HANDSHAKE_ERRORS": {
                "type": "bigint",
                "description": "Number of errors during the handshake process"
            },
            "COUNT_PROXY_USER_ERRORS": {
                "type": "bigint",
                "description": "Number of errors related to proxy users"
            },
            "COUNT_PROXY_USER_ACL_ERRORS": {
                "type": "bigint",
                "description": "Number of errors related to proxy user access control lists"
            },
            "COUNT_AUTHENTICATION_ERRORS": {
                "type": "bigint",
                "description": "Number of authentication errors"
            },
            "COUNT_SSL_ERRORS": {
                "type": "bigint",
                "description": "Number of SSL-related errors"
            },
            "COUNT_MAX_USER_CONNECTIONS_ERRORS": {
                "type": "bigint",
                "description": "Number of errors due to exceeding the maximum user connections limit"
            },
            "COUNT_MAX_USER_CONNECTIONS_PER_HOUR_ERRORS": {
                "type": "bigint",
                "description": "Number of errors due to exceeding the maximum user connections per hour limit"
            },
            "COUNT_DEFAULT_DATABASE_ERRORS": {
                "type": "bigint",
                "description": "Number of errors related to default database access"
            },
            "COUNT_INIT_CONNECT_ERRORS": {
                "type": "bigint",
                "description": "Number of errors during initial connection"
            },
            "COUNT_LOCAL_ERRORS": {
                "type": "bigint",
                "description": "Number of errors related to local issues on the server side"
            },
            "COUNT_UNKNOWN_ERRORS": {
                "type": "bigint",
                "description": "Number of unknown errors"
            },
            "FIRST_SEEN": {
                "type": "timestamp",
                "description": "Timestamp of the first connection attempt from this host"
            },
            "LAST_SEEN": {
                "type": "timestamp",
                "description": "Timestamp of the last connection attempt from this host"
            },
            "FIRST_ERROR_SEEN": {
                "type": "timestamp",
                "description": "Timestamp of the first error seen from this host"
            },
            "LAST_ERROR_SEEN": {
                "type": "timestamp",
                "description": "Timestamp of the last error seen from this host"
            }
        },
        "description": "The `host_cache` table in the MySQL Performance Schema provides information about the host cache, which contains client host name and IP address information. It is used to track connection attempts to the server, including success rates, errors, and other related performance and security metrics for each client host."
    },
    "hosts": {
        "ddl": "CREATE TABLE `hosts` (\n  `HOST` char(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'Host name used by the client to connect, NULL for internal threads or user sessions that failed to authenticate.',\n  `CURRENT_CONNECTIONS` bigint(20) NOT NULL COMMENT 'Current number of the host''s connections.',\n  `TOTAL_CONNECTIONS` bigint(20) NOT NULL COMMENT 'Total number of the host''s connections'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "HOST": {
                "type": "char",
                "description": "Stores the host name for which the server maintains a connection status summary."
            },
            "CURRENT_CONNECTIONS": {
                "type": "bigint",
                "description": "Shows the current number of connections to the server from a given host."
            },
            "TOTAL_CONNECTIONS": {
                "type": "bigint",
                "description": "Indicates the total number of connections that have been established from a particular host since the server started."
            }
        },
        "description": "The `hosts` table in the Performance Schema of MySQL is used to track performance metrics related to client hosts that have made connections to the MySQL server. It provides aggregated statistics about the activity and resource usage for each host, aiding in performance analysis and troubleshooting."
    },
    "memory_summary_by_account_by_event_name": {
        "ddl": "CREATE TABLE `memory_summary_by_account_by_event_name` (\n  `USER` char(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'User portion of the account.',\n  `HOST` char(60) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'Host portion of the account.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name.',\n  `COUNT_ALLOC` bigint(20) unsigned NOT NULL COMMENT 'Total number of allocations to memory.',\n  `COUNT_FREE` bigint(20) unsigned NOT NULL COMMENT 'Total number of attempts to free the allocated memory.',\n  `SUM_NUMBER_OF_BYTES_ALLOC` bigint(20) unsigned NOT NULL COMMENT 'Total number of bytes allocated.',\n  `SUM_NUMBER_OF_BYTES_FREE` bigint(20) unsigned NOT NULL COMMENT 'Total number of bytes freed',\n  `LOW_COUNT_USED` bigint(20) NOT NULL COMMENT 'Lowest number of allocated blocks (lowest value of CURRENT_COUNT_USED).',\n  `CURRENT_COUNT_USED` bigint(20) NOT NULL COMMENT 'Currently allocated blocks that have not been freed (COUNT_ALLOC minus COUNT_FREE).',\n  `HIGH_COUNT_USED` bigint(20) NOT NULL COMMENT 'Highest number of allocated blocks (highest value of CURRENT_COUNT_USED).',\n  `LOW_NUMBER_OF_BYTES_USED` bigint(20) NOT NULL COMMENT 'Lowest number of bytes used.',\n  `CURRENT_NUMBER_OF_BYTES_USED` bigint(20) NOT NULL COMMENT 'Current number of bytes used (total allocated minus total freed).',\n  `HIGH_NUMBER_OF_BYTES_USED` bigint(20) NOT NULL COMMENT 'Highest number of bytes used.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "USER": {
                "type": "char",
                "description": "The user account associated with the memory event"
            },
            "HOST": {
                "type": "char",
                "description": "The host from which the user account initiated the memory event"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the memory event"
            },
            "COUNT_ALLOC": {
                "type": "bigint",
                "description": "The count of memory allocation operations"
            },
            "COUNT_FREE": {
                "type": "bigint",
                "description": "The count of memory deallocation operations"
            },
            "SUM_NUMBER_OF_BYTES_ALLOC": {
                "type": "bigint",
                "description": "The sum of bytes allocated"
            },
            "SUM_NUMBER_OF_BYTES_FREE": {
                "type": "bigint",
                "description": "The sum of bytes deallocated"
            },
            "LOW_COUNT_USED": {
                "type": "bigint",
                "description": "The lowest count of memory objects in use"
            },
            "CURRENT_COUNT_USED": {
                "type": "bigint",
                "description": "The current count of memory objects in use"
            },
            "HIGH_COUNT_USED": {
                "type": "bigint",
                "description": "The highest count of memory objects in use"
            },
            "LOW_NUMBER_OF_BYTES_USED": {
                "type": "bigint",
                "description": "The lowest amount of memory (in bytes) that has been used"
            },
            "CURRENT_NUMBER_OF_BYTES_USED": {
                "type": "bigint",
                "description": "The current amount of memory (in bytes) in use"
            },
            "HIGH_NUMBER_OF_BYTES_USED": {
                "type": "bigint",
                "description": "The highest amount of memory (in bytes) that has been used"
            }
        },
        "description": "The `memory_summary_by_account_by_event_name` table in the Performance Schema provides aggregated memory usage statistics for each account (user/host combination) and for each instrumented memory event. It helps in identifying how different accounts are contributing to the overall memory usage, allowing for targeted optimization and troubleshooting of memory-related issues."
    },
    "memory_summary_by_host_by_event_name": {
        "ddl": "CREATE TABLE `memory_summary_by_host_by_event_name` (\n  `HOST` char(60) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'Host portion of the account.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name.',\n  `COUNT_ALLOC` bigint(20) unsigned NOT NULL COMMENT 'Total number of allocations to memory.',\n  `COUNT_FREE` bigint(20) unsigned NOT NULL COMMENT 'Total number of attempts to free the allocated memory.',\n  `SUM_NUMBER_OF_BYTES_ALLOC` bigint(20) unsigned NOT NULL COMMENT 'Total number of bytes allocated.',\n  `SUM_NUMBER_OF_BYTES_FREE` bigint(20) unsigned NOT NULL COMMENT 'Total number of bytes freed',\n  `LOW_COUNT_USED` bigint(20) NOT NULL COMMENT 'Lowest number of allocated blocks (lowest value of CURRENT_COUNT_USED).',\n  `CURRENT_COUNT_USED` bigint(20) NOT NULL COMMENT 'Currently allocated blocks that have not been freed (COUNT_ALLOC minus COUNT_FREE).',\n  `HIGH_COUNT_USED` bigint(20) NOT NULL COMMENT 'Highest number of allocated blocks (highest value of CURRENT_COUNT_USED).',\n  `LOW_NUMBER_OF_BYTES_USED` bigint(20) NOT NULL COMMENT 'Lowest number of bytes used.',\n  `CURRENT_NUMBER_OF_BYTES_USED` bigint(20) NOT NULL COMMENT 'Current number of bytes used (total allocated minus total freed).',\n  `HIGH_NUMBER_OF_BYTES_USED` bigint(20) NOT NULL COMMENT 'Highest number of bytes used.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "HOST": {
                "type": "char",
                "description": "The host from which the server received the connection"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the instrumented event"
            },
            "COUNT_ALLOC": {
                "type": "bigint",
                "description": "The number of times memory was allocated"
            },
            "COUNT_FREE": {
                "type": "bigint",
                "description": "The number of times memory was freed"
            },
            "SUM_NUMBER_OF_BYTES_ALLOC": {
                "type": "bigint",
                "description": "The total number of bytes allocated"
            },
            "SUM_NUMBER_OF_BYTES_FREE": {
                "type": "bigint",
                "description": "The total number of bytes freed"
            },
            "LOW_COUNT_USED": {
                "type": "bigint",
                "description": "The lowest number of allocations that were in use at one time"
            },
            "CURRENT_COUNT_USED": {
                "type": "bigint",
                "description": "The current number of allocations in use"
            },
            "HIGH_COUNT_USED": {
                "type": "bigint",
                "description": "The highest number of allocations that were in use at one time"
            },
            "LOW_NUMBER_OF_BYTES_USED": {
                "type": "bigint",
                "description": "The lowest number of bytes that were in use at one time"
            },
            "CURRENT_NUMBER_OF_BYTES_USED": {
                "type": "bigint",
                "description": "The current number of bytes in use"
            },
            "HIGH_NUMBER_OF_BYTES_USED": {
                "type": "bigint",
                "description": "The highest number of bytes that were in use at one time"
            }
        },
        "description": "The `memory_summary_by_host_by_event_name` table in MySQL's Performance Schema provides aggregated memory usage statistics, broken down by host and event name. It is useful for identifying how much memory different hosts are consuming for specific operations/events, aiding in diagnosing memory issues or optimizing memory usage across various hosts."
    },
    "memory_summary_by_thread_by_event_name": {
        "ddl": "CREATE TABLE `memory_summary_by_thread_by_event_name` (\n  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT 'Thread id.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name.',\n  `COUNT_ALLOC` bigint(20) unsigned NOT NULL COMMENT 'Total number of allocations to memory.',\n  `COUNT_FREE` bigint(20) unsigned NOT NULL COMMENT 'Total number of attempts to free the allocated memory.',\n  `SUM_NUMBER_OF_BYTES_ALLOC` bigint(20) unsigned NOT NULL COMMENT 'Total number of bytes allocated.',\n  `SUM_NUMBER_OF_BYTES_FREE` bigint(20) unsigned NOT NULL COMMENT 'Total number of bytes freed',\n  `LOW_COUNT_USED` bigint(20) NOT NULL COMMENT 'Lowest number of allocated blocks (lowest value of CURRENT_COUNT_USED).',\n  `CURRENT_COUNT_USED` bigint(20) NOT NULL COMMENT 'Currently allocated blocks that have not been freed (COUNT_ALLOC minus COUNT_FREE).',\n  `HIGH_COUNT_USED` bigint(20) NOT NULL COMMENT 'Highest number of allocated blocks (highest value of CURRENT_COUNT_USED).',\n  `LOW_NUMBER_OF_BYTES_USED` bigint(20) NOT NULL COMMENT 'Lowest number of bytes used.',\n  `CURRENT_NUMBER_OF_BYTES_USED` bigint(20) NOT NULL COMMENT 'Current number of bytes used (total allocated minus total freed).',\n  `HIGH_NUMBER_OF_BYTES_USED` bigint(20) NOT NULL COMMENT 'Highest number of bytes used.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "THREAD_ID": {
                "type": "bigint",
                "description": "Unique identifier for the thread associated with the event"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "Name of the instrumented event"
            },
            "COUNT_ALLOC": {
                "type": "bigint",
                "description": "Count of allocations made"
            },
            "COUNT_FREE": {
                "type": "bigint",
                "description": "Count of frees made"
            },
            "SUM_NUMBER_OF_BYTES_ALLOC": {
                "type": "bigint",
                "description": "Total number of bytes allocated"
            },
            "SUM_NUMBER_OF_BYTES_FREE": {
                "type": "bigint",
                "description": "Total number of bytes freed"
            },
            "LOW_COUNT_USED": {
                "type": "bigint",
                "description": "Lowest count of objects used"
            },
            "CURRENT_COUNT_USED": {
                "type": "bigint",
                "description": "Current count of objects used"
            },
            "HIGH_COUNT_USED": {
                "type": "bigint",
                "description": "Highest count of objects used"
            },
            "LOW_NUMBER_OF_BYTES_USED": {
                "type": "bigint",
                "description": "Lowest number of bytes used"
            },
            "CURRENT_NUMBER_OF_BYTES_USED": {
                "type": "bigint",
                "description": "Current number of bytes used"
            },
            "HIGH_NUMBER_OF_BYTES_USED": {
                "type": "bigint",
                "description": "Highest number of bytes used"
            }
        },
        "description": "The `memory_summary_by_thread_by_event_name` table in the Performance Schema of MySQL provides aggregated memory usage information by thread, categorized by event name. It helps in identifying which threads are consuming the most memory and for what specific operations or events, aiding in performance optimization and memory management."
    },
    "memory_summary_by_user_by_event_name": {
        "ddl": "CREATE TABLE `memory_summary_by_user_by_event_name` (\n  `USER` char(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'User portion of the account.',\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name.',\n  `COUNT_ALLOC` bigint(20) unsigned NOT NULL COMMENT 'Total number of allocations to memory.',\n  `COUNT_FREE` bigint(20) unsigned NOT NULL COMMENT 'Total number of attempts to free the allocated memory.',\n  `SUM_NUMBER_OF_BYTES_ALLOC` bigint(20) unsigned NOT NULL COMMENT 'Total number of bytes allocated.',\n  `SUM_NUMBER_OF_BYTES_FREE` bigint(20) unsigned NOT NULL COMMENT 'Total number of bytes freed',\n  `LOW_COUNT_USED` bigint(20) NOT NULL COMMENT 'Lowest number of allocated blocks (lowest value of CURRENT_COUNT_USED).',\n  `CURRENT_COUNT_USED` bigint(20) NOT NULL COMMENT 'Currently allocated blocks that have not been freed (COUNT_ALLOC minus COUNT_FREE).',\n  `HIGH_COUNT_USED` bigint(20) NOT NULL COMMENT 'Highest number of allocated blocks (highest value of CURRENT_COUNT_USED).',\n  `LOW_NUMBER_OF_BYTES_USED` bigint(20) NOT NULL COMMENT 'Lowest number of bytes used.',\n  `CURRENT_NUMBER_OF_BYTES_USED` bigint(20) NOT NULL COMMENT 'Current number of bytes used (total allocated minus total freed).',\n  `HIGH_NUMBER_OF_BYTES_USED` bigint(20) NOT NULL COMMENT 'Highest number of bytes used.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "USER": {
                "type": "char",
                "description": "The user who triggered the event"
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the event being monitored"
            },
            "COUNT_ALLOC": {
                "type": "bigint",
                "description": "The number of times memory was allocated"
            },
            "COUNT_FREE": {
                "type": "bigint",
                "description": "The number of times memory was freed"
            },
            "SUM_NUMBER_OF_BYTES_ALLOC": {
                "type": "bigint",
                "description": "The total number of bytes allocated"
            },
            "SUM_NUMBER_OF_BYTES_FREE": {
                "type": "bigint",
                "description": "The total number of bytes freed"
            },
            "LOW_COUNT_USED": {
                "type": "bigint",
                "description": "The lowest recorded number of uses for a particular memory allocation"
            },
            "CURRENT_COUNT_USED": {
                "type": "bigint",
                "description": "The current number of uses for a particular memory allocation"
            },
            "HIGH_COUNT_USED": {
                "type": "bigint",
                "description": "The highest recorded number of uses for a particular memory allocation"
            },
            "LOW_NUMBER_OF_BYTES_USED": {
                "type": "bigint",
                "description": "The lowest recorded amount of memory used"
            },
            "CURRENT_NUMBER_OF_BYTES_USED": {
                "type": "bigint",
                "description": "The current amount of memory used"
            },
            "HIGH_NUMBER_OF_BYTES_USED": {
                "type": "bigint",
                "description": "The highest recorded amount of memory used"
            }
        },
        "description": "The `memory_summary_by_user_by_event_name` table in MySQL's Performance Schema provides aggregated memory usage statistics, categorized both by user and by the type of operation (event name). This helps in identifying which users and operations are consuming the most memory, facilitating better resource management and optimization."
    },
    "memory_summary_global_by_event_name": {
        "ddl": "CREATE TABLE `memory_summary_global_by_event_name` (\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Event name.',\n  `COUNT_ALLOC` bigint(20) unsigned NOT NULL COMMENT 'Total number of allocations to memory.',\n  `COUNT_FREE` bigint(20) unsigned NOT NULL COMMENT 'Total number of attempts to free the allocated memory.',\n  `SUM_NUMBER_OF_BYTES_ALLOC` bigint(20) unsigned NOT NULL COMMENT 'Total number of bytes allocated.',\n  `SUM_NUMBER_OF_BYTES_FREE` bigint(20) unsigned NOT NULL COMMENT 'Total number of bytes freed',\n  `LOW_COUNT_USED` bigint(20) NOT NULL COMMENT 'Lowest number of allocated blocks (lowest value of CURRENT_COUNT_USED).',\n  `CURRENT_COUNT_USED` bigint(20) NOT NULL COMMENT 'Currently allocated blocks that have not been freed (COUNT_ALLOC minus COUNT_FREE).',\n  `HIGH_COUNT_USED` bigint(20) NOT NULL COMMENT 'Highest number of allocated blocks (highest value of CURRENT_COUNT_USED).',\n  `LOW_NUMBER_OF_BYTES_USED` bigint(20) NOT NULL COMMENT 'Lowest number of bytes used.',\n  `CURRENT_NUMBER_OF_BYTES_USED` bigint(20) NOT NULL COMMENT 'Current number of bytes used (total allocated minus total freed).',\n  `HIGH_NUMBER_OF_BYTES_USED` bigint(20) NOT NULL COMMENT 'Highest number of bytes used.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "EVENT_NAME": {
                "type": "varchar",
                "description": "Name of the instrumented event"
            },
            "COUNT_ALLOC": {
                "type": "bigint",
                "description": "The count of allocation operations"
            },
            "COUNT_FREE": {
                "type": "bigint",
                "description": "The count of deallocation operations"
            },
            "SUM_NUMBER_OF_BYTES_ALLOC": {
                "type": "bigint",
                "description": "The sum of bytes allocated"
            },
            "SUM_NUMBER_OF_BYTES_FREE": {
                "type": "bigint",
                "description": "The sum of bytes freed"
            },
            "LOW_COUNT_USED": {
                "type": "bigint",
                "description": "The lowest count of blocks used"
            },
            "CURRENT_COUNT_USED": {
                "type": "bigint",
                "description": "The current count of blocks used"
            },
            "HIGH_COUNT_USED": {
                "type": "bigint",
                "description": "The highest count of blocks used"
            },
            "LOW_NUMBER_OF_BYTES_USED": {
                "type": "bigint",
                "description": "The smallest amount of bytes used"
            },
            "CURRENT_NUMBER_OF_BYTES_USED": {
                "type": "bigint",
                "description": "The current amount of bytes used"
            },
            "HIGH_NUMBER_OF_BYTES_USED": {
                "type": "bigint",
                "description": "The largest amount of bytes used"
            }
        },
        "description": "The `memory_summary_global_by_event_name` table in the Performance Schema of MySQL is used to aggregate memory usage information by event name globally across the server. It helps in identifying and analyzing how memory is allocated and used by different components and operations within MySQL, aiding in performance optimization and troubleshooting memory-related issues."
    },
    "metadata_locks": {
        "ddl": "CREATE TABLE `metadata_locks` (\n  `OBJECT_TYPE` varchar(64) NOT NULL COMMENT 'Object type. One of BACKUP, COMMIT, EVENT, FUNCTION, GLOBAL, LOCKING SERVICE, PROCEDURE, SCHEMA, TABLE, TABLESPACE, TRIGGER (unused) or USER LEVEL LOCK.',\n  `OBJECT_SCHEMA` varchar(64) DEFAULT NULL COMMENT 'Object schema.',\n  `OBJECT_NAME` varchar(64) DEFAULT NULL COMMENT 'Object name.',\n  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned NOT NULL COMMENT 'Address in memory of the instrumented object.',\n  `LOCK_TYPE` varchar(32) NOT NULL COMMENT 'Lock type. One of BACKUP_FTWRL1, BACKUP_START, BACKUP_TRANS_DML, EXCLUSIVE, INTENTION_EXCLUSIVE, SHARED, SHARED_HIGH_PRIO, SHARED_NO_READ_WRITE, SHARED_NO_WRITE, SHARED_READ, SHARED_UPGRADABLE or SHARED_WRITE.',\n  `LOCK_DURATION` varchar(32) NOT NULL COMMENT 'Lock duration. One of EXPLICIT (locks released by explicit action, for example a global lock acquired with FLUSH TABLES WITH READ LOCK) , STATEMENT (locks implicitly released at statement end) or TRANSACTION (locks implicitly released at transaction end).',\n  `LOCK_STATUS` varchar(32) NOT NULL COMMENT 'Lock status. One of GRANTED, KILLED, PENDING, POST_RELEASE_NOTIFY, PRE_ACQUIRE_NOTIFY, TIMEOUT or VICTIM.',\n  `SOURCE` varchar(64) DEFAULT NULL COMMENT 'Source file containing the instrumented code that produced the event, as well as the line number where the instrumentation occurred. This allows one to examine the source code involved.',\n  `OWNER_THREAD_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'Thread that requested the lock.',\n  `OWNER_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'Event that requested the lock.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "OBJECT_TYPE": {
                "type": "varchar",
                "description": "Specifies the type of the object on which the lock is held (e.g., 'TABLE', 'TRIGGER')."
            },
            "OBJECT_SCHEMA": {
                "type": "varchar",
                "description": "The name of the schema that the locked object belongs to."
            },
            "OBJECT_NAME": {
                "type": "varchar",
                "description": "The name of the object that the lock is held on."
            },
            "OBJECT_INSTANCE_BEGIN": {
                "type": "bigint",
                "description": "A memory address pointing to the specific instance of the object being locked."
            },
            "LOCK_TYPE": {
                "type": "varchar",
                "description": "Describes the type of the lock (e.g., 'SHARED', 'EXCLUSIVE')."
            },
            "LOCK_DURATION": {
                "type": "varchar",
                "description": "Indicates the duration of the lock (e.g., 'TRANSACTION', 'STATEMENT')."
            },
            "LOCK_STATUS": {
                "type": "varchar",
                "description": "The current status of the lock (e.g., 'GRANTED', 'PENDING')."
            },
            "SOURCE": {
                "type": "varchar",
                "description": "The source code location that requested the lock."
            },
            "OWNER_THREAD_ID": {
                "type": "bigint",
                "description": "The ID of the thread that owns the lock."
            },
            "OWNER_EVENT_ID": {
                "type": "bigint",
                "description": "The event ID within the owning thread's history that caused the lock to be acquired."
            }
        },
        "description": "The `metadata_locks` table in the Performance Schema provides information about metadata locks held by or requested by server threads. It is useful for detecting and diagnosing locking issues related to DDL statements (e.g., ALTER TABLE) and DML statements (e.g., SELECT, INSERT, UPDATE, DELETE) that interact with database object metadata, helping to identify potential sources of locks that can cause delays or deadlocks."
    },
    "mutex_instances": {
        "ddl": "CREATE TABLE `mutex_instances` (\n  `NAME` varchar(128) NOT NULL COMMENT 'Instrument name associated with the mutex.',\n  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned NOT NULL COMMENT 'Memory address of the instrumented mutex.',\n  `LOCKED_BY_THREAD_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'The THREAD_ID of the locking thread if a thread has a mutex locked, otherwise NULL.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "NAME": {
                "type": "varchar",
                "description": "The instrumented mutex name"
            },
            "OBJECT_INSTANCE_BEGIN": {
                "type": "bigint",
                "description": "The address in memory of the instrumented mutex"
            },
            "LOCKED_BY_THREAD_ID": {
                "type": "bigint",
                "description": "The ID of the thread holding the lock, if any"
            }
        },
        "description": "The `mutex_instances` table in the Performance Schema is used to monitor mutex (mutual exclusion object) usage across the MySQL server. It provides detailed information about each mutex instance, including which thread is holding it and the source code location where it was instantiated, facilitating the identification and diagnosis of potential contention or performance issues related to mutex locking."
    },
    "objects_summary_global_by_type": {
        "ddl": "CREATE TABLE `objects_summary_global_by_type` (\n  `OBJECT_TYPE` varchar(64) DEFAULT NULL COMMENT 'Groups records together with OBJECT_SCHEMA and OBJECT_NAME.',\n  `OBJECT_SCHEMA` varchar(64) DEFAULT NULL COMMENT 'Groups records together with OBJECT_TYPE and OBJECT_NAME.',\n  `OBJECT_NAME` varchar(64) DEFAULT NULL COMMENT 'Groups records together with OBJECT_SCHEMA and OBJECT_TYPE.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the summarized events that are timed.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the summarized events that are timed.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the summarized events that are timed.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the summarized events that are timed.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "OBJECT_TYPE": {
                "type": "varchar",
                "description": "The type of the object (e.g., TABLE, INDEX, etc.)"
            },
            "OBJECT_SCHEMA": {
                "type": "varchar",
                "description": "The schema in which the object is located"
            },
            "OBJECT_NAME": {
                "type": "varchar",
                "description": "The name of the object"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The number of summarized events"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total wait time of the summarized events"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum wait time of the summarized events"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average wait time of the summarized events"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum wait time of the summarized events"
            }
        },
        "description": "The `objects_summary_global_by_type` table in the Performance Schema of MySQL provides aggregated statistics about database objects (such as tables, indexes, and stored programs) grouped by their type. It helps in identifying which types of objects are most heavily accessed or involved in performance-critical operations within the database environment."
    },
    "performance_timers": {
        "ddl": "CREATE TABLE `performance_timers` (\n  `TIMER_NAME` enum('CYCLE','NANOSECOND','MICROSECOND','MILLISECOND','TICK') NOT NULL COMMENT 'Time name, used in the setup_timers table.',\n  `TIMER_FREQUENCY` bigint(20) DEFAULT NULL COMMENT 'Number of timer units per second. Dependent on the processor speed.',\n  `TIMER_RESOLUTION` bigint(20) DEFAULT NULL COMMENT 'Number of timer units by which timed values increase each time.',\n  `TIMER_OVERHEAD` bigint(20) DEFAULT NULL COMMENT 'Minimum timer overhead, determined during initialization by calling the timer 20 times and selecting the smallest value. Total overhead will be at least double this, as the timer is called at the beginning and end of each timed event.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "TIMER_NAME": {
                "type": "enum",
                "description": "The name of the timer, identifying the specific timer used."
            },
            "TIMER_FREQUENCY": {
                "type": "bigint",
                "description": "The frequency at which the timer increments."
            },
            "TIMER_RESOLUTION": {
                "type": "bigint",
                "description": "The smallest measurable interval of the timer."
            },
            "TIMER_OVERHEAD": {
                "type": "bigint",
                "description": "The overhead in picoseconds of invoking a timer once."
            }
        },
        "description": "The `performance_timers` table in MySQL's Performance Schema provides information about the timers used for measuring event timing within the server. It lists the available timer types, such as CYCLE, NANOSECOND, MICROSECOND, and MILLISECOND, along with their current status and resolution."
    },
    "prepared_statements_instances": {
        "ddl": "CREATE TABLE `prepared_statements_instances` (\n  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned NOT NULL COMMENT 'The address in memory of the instrumented prepared statement.',\n  `STATEMENT_ID` bigint(20) unsigned NOT NULL COMMENT 'The internal statement ID assigned by the server.',\n  `STATEMENT_NAME` varchar(64) DEFAULT NULL COMMENT 'For the binary protocol, this column is NULL. For the text protocol, this column is the external statement name assigned by the user.',\n  `SQL_TEXT` longtext NOT NULL COMMENT 'The prepared statement text, with ? placeholder markers.',\n  `OWNER_THREAD_ID` bigint(20) unsigned NOT NULL COMMENT 'Event thread id that created the prepared statement.',\n  `OWNER_EVENT_ID` bigint(20) unsigned NOT NULL COMMENT 'Event id that created the prepared statement.',\n  `OWNER_OBJECT_TYPE` enum('EVENT','FUNCTION','PROCEDURE','TABLE','TRIGGER') DEFAULT NULL COMMENT 'NULL for a prepared statement created by a client session. Type of the stored program that created the prepared statement.',\n  `OWNER_OBJECT_SCHEMA` varchar(64) DEFAULT NULL COMMENT 'NULL for a prepared statement created by a client session. Schema of the stored program that created the prepared statement.',\n  `OWNER_OBJECT_NAME` varchar(64) DEFAULT NULL COMMENT 'NULL for a prepared statement created by a client session. Name of the stored program that created the prepared statement.',\n  `TIMER_PREPARE` bigint(20) unsigned NOT NULL COMMENT 'The time spent executing the statement preparation itself.',\n  `COUNT_REPREPARE` bigint(20) unsigned NOT NULL COMMENT 'The number of times the statement was reprepared internally.',\n  `COUNT_EXECUTE` bigint(20) unsigned NOT NULL COMMENT 'Total times the prepared statement was executed.',\n  `SUM_TIMER_EXECUTE` bigint(20) unsigned NOT NULL COMMENT 'Total time spent executing all prepared statements.',\n  `MIN_TIMER_EXECUTE` bigint(20) unsigned NOT NULL COMMENT 'Minimum time spent executing any of the prepared statements.',\n  `AVG_TIMER_EXECUTE` bigint(20) unsigned NOT NULL COMMENT 'Average time spent executing any of the prepared statements.',\n  `MAX_TIMER_EXECUTE` bigint(20) unsigned NOT NULL COMMENT 'Maximum time spent executing any of the prepared statements.',\n  `SUM_LOCK_TIME` bigint(20) unsigned NOT NULL COMMENT 'The total time spent (in picoseconds) waiting for table locks for the prepared statements.',\n  `SUM_ERRORS` bigint(20) unsigned NOT NULL COMMENT 'The total number of errors that occurend for the prepared statements.',\n  `SUM_WARNINGS` bigint(20) unsigned NOT NULL COMMENT 'The total number of warnings that occurend for the prepared statements.',\n  `SUM_ROWS_AFFECTED` bigint(20) unsigned NOT NULL COMMENT 'The total number of affected rows by the prepared statements.',\n  `SUM_ROWS_SENT` bigint(20) unsigned NOT NULL COMMENT 'The total number of rows returned by the prepared statements.',\n  `SUM_ROWS_EXAMINED` bigint(20) unsigned NOT NULL COMMENT 'The total number of rows examined by the prepared statements.',\n  `SUM_CREATED_TMP_DISK_TABLES` bigint(20) unsigned NOT NULL COMMENT 'The total number of on-disk temporary tables created by the prepared statements.',\n  `SUM_CREATED_TMP_TABLES` bigint(20) unsigned NOT NULL COMMENT 'The total number of in-memory temporary tables created by the prepared statements.',\n  `SUM_SELECT_FULL_JOIN` bigint(20) unsigned NOT NULL COMMENT 'The total number of full joins executed by the prepared statements.',\n  `SUM_SELECT_FULL_RANGE_JOIN` bigint(20) unsigned NOT NULL COMMENT 'The total number of range search joins executed by the prepared statements.',\n  `SUM_SELECT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'The total number of joins that used ranges on the first table executed by the prepared statements.',\n  `SUM_SELECT_RANGE_CHECK` bigint(20) unsigned NOT NULL COMMENT 'The total number of joins that check for key usage after each row executed by the prepared statements.',\n  `SUM_SELECT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'The total number of joins that did a full scan of the first table executed by the prepared statements.',\n  `SUM_SORT_MERGE_PASSES` bigint(20) unsigned NOT NULL COMMENT 'The total number of merge passes that the sort algorithm has had to do for the prepared statements.',\n  `SUM_SORT_RANGE` bigint(20) unsigned NOT NULL COMMENT 'The total number of sorts that were done using ranges for the prepared statements.',\n  `SUM_SORT_ROWS` bigint(20) unsigned NOT NULL COMMENT 'The total number of sorted rows that were sorted by the prepared statements.',\n  `SUM_SORT_SCAN` bigint(20) unsigned NOT NULL COMMENT 'The total number of sorts that were done by scanning the table by the prepared statements.',\n  `SUM_NO_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT 'The total number of statements that performed a table scan without using an index.',\n  `SUM_NO_GOOD_INDEX_USED` bigint(20) unsigned NOT NULL COMMENT 'The total number of statements where no good index was found.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "OBJECT_INSTANCE_BEGIN": {
                "type": "bigint",
                "description": "Memory address of the prepared statement instrumented"
            },
            "STATEMENT_ID": {
                "type": "bigint",
                "description": "Unique identifier for the prepared statement"
            },
            "STATEMENT_NAME": {
                "type": "varchar",
                "description": "Name of the prepared statement assigned by the user"
            },
            "SQL_TEXT": {
                "type": "longtext",
                "description": "Text of the SQL statement prepared"
            },
            "OWNER_THREAD_ID": {
                "type": "bigint",
                "description": "Thread identifier of the thread that owns this statement"
            },
            "OWNER_EVENT_ID": {
                "type": "bigint",
                "description": "Event identifier of the event within the owning thread"
            },
            "OWNER_OBJECT_TYPE": {
                "type": "enum",
                "description": "Type of the object that owns this statement, if any"
            },
            "OWNER_OBJECT_SCHEMA": {
                "type": "varchar",
                "description": "Schema of the object that owns this statement, if any"
            },
            "OWNER_OBJECT_NAME": {
                "type": "varchar",
                "description": "Name of the object that owns this statement, if any"
            },
            "TIMER_PREPARE": {
                "type": "bigint",
                "description": "Time spent preparing the statement"
            },
            "COUNT_REPREPARE": {
                "type": "bigint",
                "description": "Number of times the statement was re-prepared"
            },
            "COUNT_EXECUTE": {
                "type": "bigint",
                "description": "Number of times the statement was executed"
            },
            "SUM_TIMER_EXECUTE": {
                "type": "bigint",
                "description": "Total time spent executing the statement"
            },
            "MIN_TIMER_EXECUTE": {
                "type": "bigint",
                "description": "Minimum execution time for the statement"
            },
            "AVG_TIMER_EXECUTE": {
                "type": "bigint",
                "description": "Average execution time for the statement"
            },
            "MAX_TIMER_EXECUTE": {
                "type": "bigint",
                "description": "Maximum execution time for the statement"
            },
            "SUM_LOCK_TIME": {
                "type": "bigint",
                "description": "Total time the statement waited for locks"
            },
            "SUM_ERRORS": {
                "type": "bigint",
                "description": "Total number of errors generated by the statement"
            },
            "SUM_WARNINGS": {
                "type": "bigint",
                "description": "Total number of warnings generated by the statement"
            },
            "SUM_ROWS_AFFECTED": {
                "type": "bigint",
                "description": "Total number of rows affected by the statement"
            },
            "SUM_ROWS_SENT": {
                "type": "bigint",
                "description": "Total number of rows sent by the statement"
            },
            "SUM_ROWS_EXAMINED": {
                "type": "bigint",
                "description": "Total number of rows examined by the statement"
            },
            "SUM_CREATED_TMP_DISK_TABLES": {
                "type": "bigint",
                "description": "Total number of temporary tables on disk created by the statement"
            },
            "SUM_CREATED_TMP_TABLES": {
                "type": "bigint",
                "description": "Total number of temporary tables in memory created by the statement"
            },
            "SUM_SELECT_FULL_JOIN": {
                "type": "bigint",
                "description": "Total number of full joins performed by the statement"
            },
            "SUM_SELECT_FULL_RANGE_JOIN": {
                "type": "bigint",
                "description": "Total number of full range joins performed by the statement"
            },
            "SUM_SELECT_RANGE": {
                "type": "bigint",
                "description": "Total number of range scans performed by the statement"
            },
            "SUM_SELECT_RANGE_CHECK": {
                "type": "bigint",
                "description": "Total number of range checks performed by the statement"
            },
            "SUM_SELECT_SCAN": {
                "type": "bigint",
                "description": "Total number of full table scans performed by the statement"
            },
            "SUM_SORT_MERGE_PASSES": {
                "type": "bigint",
                "description": "Total number of merge passes by the sort algorithm for the statement"
            },
            "SUM_SORT_RANGE": {
                "type": "bigint",
                "description": "Total number of sorts that used a range for the statement"
            },
            "SUM_SORT_ROWS": {
                "type": "bigint",
                "description": "Total number of sorted rows by the statement"
            },
            "SUM_SORT_SCAN": {
                "type": "bigint",
                "description": "Total number of sorts that performed a scan for the statement"
            },
            "SUM_NO_INDEX_USED": {
                "type": "bigint",
                "description": "Total number of executions where no index was used"
            },
            "SUM_NO_GOOD_INDEX_USED": {
                "type": "bigint",
                "description": "Total number of executions where no good index was used"
            }
        },
        "description": "The `prepared_statements_instances` table in the Performance Schema of MySQL provides information about prepared statements that are currently active within the server. It includes details such as the SQL text, the number of executions, memory used, and the owner of each prepared statement, enabling effective monitoring and analysis of prepared statement usage and performance."
    },
    "replication_applier_configuration": {
        "ddl": "CREATE TABLE `replication_applier_configuration` (\n  `CHANNEL_NAME` varchar(256) NOT NULL COMMENT 'Replication channel name.',\n  `DESIRED_DELAY` int(11) NOT NULL COMMENT 'Target number of seconds the replica should be delayed to the master.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "CHANNEL_NAME": {
                "type": "varchar",
                "description": "The name of the replication channel, used to identify the source in multi-source replication setups."
            },
            "DESIRED_DELAY": {
                "type": "int",
                "description": "The delay, in seconds, that the slave SQL thread should lag behind the master."
            }
        },
        "description": "The `replication_applier_configuration` table in the Performance Schema provides information about the configuration settings for the replica applier (SQL thread) in a MySQL replication setup. It lists the configuration options that affect how the replication SQL thread applies transactions to the replica."
    },
    "replication_applier_status": {
        "ddl": "CREATE TABLE `replication_applier_status` (\n  `CHANNEL_NAME` varchar(256) NOT NULL COMMENT 'The replication channel name.',\n  `SERVICE_STATE` enum('ON','OFF') NOT NULL COMMENT 'Shows ON when the replication channel''s applier threads are active or idle, OFF means that the applier threads are not active.',\n  `REMAINING_DELAY` int(10) unsigned DEFAULT NULL COMMENT 'Seconds the replica needs to wait to reach the desired delay from master.',\n  `COUNT_TRANSACTIONS_RETRIES` bigint(20) unsigned NOT NULL COMMENT 'The number of retries that were made because the replication SQL thread failed to apply a transaction.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "CHANNEL_NAME": {
                "type": "varchar",
                "description": "The name of the replication channel associated with the applier status information"
            },
            "SERVICE_STATE": {
                "type": "enum",
                "description": "Indicates the current state of the replication SQL thread: ON, OFF, or CONNECTING"
            },
            "REMAINING_DELAY": {
                "type": "int",
                "description": "The remaining delay in seconds for the SQL_THREAD before applying the next event, in a delayed replication"
            },
            "COUNT_TRANSACTIONS_RETRIES": {
                "type": "bigint",
                "description": "The number of times the transactions have been retried by the applier module"
            }
        },
        "description": "The `replication_applier_status` table in MySQL Performance Schema is used for monitoring the status of the replication applier (SQL thread) on a replication slave. It provides detailed information such as the service state, last error number, message, and timestamp, making it essential for troubleshooting and maintaining replication health."
    },
    "replication_applier_status_by_coordinator": {
        "ddl": "CREATE TABLE `replication_applier_status_by_coordinator` (\n  `CHANNEL_NAME` varchar(256) NOT NULL COMMENT 'Replication channel name.',\n  `THREAD_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'The SQL/coordinator thread ID.',\n  `SERVICE_STATE` enum('ON','OFF') NOT NULL COMMENT 'ON (thread exists and is active or idle) or OFF (thread no longer exists).',\n  `LAST_ERROR_NUMBER` int(11) NOT NULL COMMENT 'Last error number that caused the SQL/coordinator thread to stop.',\n  `LAST_ERROR_MESSAGE` varchar(1024) NOT NULL COMMENT 'Last error message that caused the SQL/coordinator thread to stop.',\n  `LAST_ERROR_TIMESTAMP` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp() COMMENT 'Timestamp that shows when the most recent SQL/coordinator error occured.',\n  `LAST_SEEN_TRANSACTION` char(57) NOT NULL COMMENT 'The transaction the worker has last seen.',\n  `LAST_TRANS_RETRY_COUNT` int(11) NOT NULL COMMENT 'Total number of retries attempted by last transaction.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "CHANNEL_NAME": {
                "type": "varchar",
                "description": "The name of the replication channel that the status is being reported for."
            },
            "THREAD_ID": {
                "type": "bigint",
                "description": "The thread ID of the SQL thread for the given channel."
            },
            "SERVICE_STATE": {
                "type": "enum",
                "description": "The current service state of the coordinator thread (ON/OFF)."
            },
            "LAST_ERROR_NUMBER": {
                "type": "int",
                "description": "The error number of the last error that occurred."
            },
            "LAST_ERROR_MESSAGE": {
                "type": "varchar",
                "description": "The error message of the last error that occurred."
            },
            "LAST_ERROR_TIMESTAMP": {
                "type": "timestamp",
                "description": "The timestamp of when the last error occurred."
            },
            "LAST_SEEN_TRANSACTION": {
                "type": "char"
            },
            "LAST_TRANS_RETRY_COUNT": {
                "type": "int"
            }
        },
        "description": "The `replication_applier_status_by_coordinator` table in MySQL's Performance Schema provides information about the status of the applier coordinator thread in a replication setup. It includes details like the coordination thread's service state (e.g., running, stopped), and the last transaction applied, aiding in monitoring and troubleshooting replication performance and issues."
    },
    "replication_applier_status_by_worker": {
        "ddl": "CREATE TABLE `replication_applier_status_by_worker` (\n  `CHANNEL_NAME` varchar(256) NOT NULL COMMENT 'Name of replication channel through which the transaction is received.',\n  `THREAD_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'Thread_Id as displayed in the performance_schema.threads table for thread with name ''thread/sql/rpl_parallel_thread''. THREAD_ID will be NULL when worker threads are stopped due to error/force stop.',\n  `SERVICE_STATE` enum('ON','OFF') NOT NULL COMMENT 'Whether or not the thread is running.',\n  `LAST_SEEN_TRANSACTION` char(57) NOT NULL COMMENT 'Last GTID executed by worker',\n  `LAST_ERROR_NUMBER` int(11) NOT NULL COMMENT 'Last Error that occurred on a particular worker.',\n  `LAST_ERROR_MESSAGE` varchar(1024) NOT NULL COMMENT 'Last error specific message.',\n  `LAST_ERROR_TIMESTAMP` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp() COMMENT 'Time stamp of last error.',\n  `WORKER_IDLE_TIME` bigint(20) unsigned NOT NULL COMMENT 'Total idle time in seconds that the worker thread has spent waiting for work from SQL thread.',\n  `LAST_TRANS_RETRY_COUNT` int(11) NOT NULL COMMENT 'Total number of retries attempted by last transaction.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "CHANNEL_NAME": {
                "type": "varchar",
                "description": "The name of the replication channel that the worker thread is using"
            },
            "THREAD_ID": {
                "type": "bigint",
                "description": "The thread ID of the worker in the MySQL server"
            },
            "SERVICE_STATE": {
                "type": "enum",
                "description": "Current service state of the worker; shows whether it is running"
            },
            "LAST_SEEN_TRANSACTION": {
                "type": "char"
            },
            "LAST_ERROR_NUMBER": {
                "type": "int",
                "description": "The number of the last error that occurred on this worker"
            },
            "LAST_ERROR_MESSAGE": {
                "type": "varchar",
                "description": "Description of the last error that occurred on this worker"
            },
            "LAST_ERROR_TIMESTAMP": {
                "type": "timestamp",
                "description": "Timestamp of the last error that occurred on this worker"
            },
            "WORKER_IDLE_TIME": {
                "type": "bigint"
            },
            "LAST_TRANS_RETRY_COUNT": {
                "type": "int"
            }
        },
        "description": "The `replication_applier_status_by_worker` table in the Performance Schema provides detailed status information about the replication applier threads that are responsible for applying transactions to the replica. This includes the worker thread's ID, the current transaction being applied, and error information if the application of a transaction failed."
    },
    "replication_connection_configuration": {
        "ddl": "CREATE TABLE `replication_connection_configuration` (\n  `CHANNEL_NAME` varchar(256) NOT NULL COMMENT 'The replication channel used.',\n  `HOST` char(60) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT 'The host name of the source that the replica is connected to.',\n  `PORT` int(11) NOT NULL COMMENT 'The port used to connect to the source.',\n  `USER` char(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT 'The user name of the replication user account used to connect to the source.',\n  `USING_GTID` enum('NO','CURRENT_POS','SLAVE_POS') NOT NULL COMMENT 'Whether replication is using GTIDs or not',\n  `SSL_ALLOWED` enum('YES','NO','IGNORED') NOT NULL COMMENT 'Whether SSL is allowed for the replica connection.',\n  `SSL_CA_FILE` varchar(512) NOT NULL COMMENT 'Path to the file that contains one or more certificates for trusted Certificate Authorities (CA) to use for TLS.',\n  `SSL_CA_PATH` varchar(512) NOT NULL COMMENT 'Path to a directory that contains one or more PEM files that contain X509 certificates for a trusted Certificate Authority (CA) to use for TLS.',\n  `SSL_CERTIFICATE` varchar(512) NOT NULL COMMENT 'Path to the certificate used to authenticate the master.',\n  `SSL_CIPHER` varchar(512) NOT NULL COMMENT 'Which cipher is used for encription.',\n  `SSL_KEY` varchar(512) NOT NULL COMMENT 'Path to the private key used for TLS.',\n  `SSL_VERIFY_SERVER_CERTIFICATE` enum('YES','NO') NOT NULL COMMENT 'Whether the server certificate is verified as part of the SSL connection',\n  `SSL_CRL_FILE` varchar(255) NOT NULL COMMENT 'Path to the PEM file containing one or more revoked X.509 certificates.',\n  `SSL_CRL_PATH` varchar(255) NOT NULL COMMENT 'PATH to a folder containing PEM files containing one or more revoked X.509 certificates.',\n  `CONNECTION_RETRY_INTERVAL` int(11) NOT NULL COMMENT 'The number of seconds between connect retries.',\n  `CONNECTION_RETRY_COUNT` bigint(20) unsigned NOT NULL COMMENT 'The number of times the replica can attempt to reconnect to the source in the event of a lost connection.',\n  `HEARTBEAT_INTERVAL` double(10,3) unsigned NOT NULL COMMENT 'Number of seconds after which a heartbeat will be sent.',\n  `IGNORE_SERVER_IDS` longtext NOT NULL COMMENT 'Binary log events from servers (ids) to ignore.',\n  `REPL_DO_DOMAIN_IDS` longtext NOT NULL COMMENT 'Only apply binary logs from these domain ids.',\n  `REPL_IGNORE_DOMAIN_IDS` longtext NOT NULL COMMENT 'Binary log events from domains to ignore.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "CHANNEL_NAME": {
                "type": "varchar",
                "description": "The name of the replication channel"
            },
            "HOST": {
                "type": "char",
                "description": "The host name of the MySQL server in the master-slave replication setup"
            },
            "PORT": {
                "type": "int",
                "description": "The network port of the master server"
            },
            "USER": {
                "type": "char",
                "description": "The user name used to connect to the master"
            },
            "USING_GTID": {
                "type": "enum"
            },
            "SSL_ALLOWED": {
                "type": "enum",
                "description": "Indicates whether SSL is allowed for the connection"
            },
            "SSL_CA_FILE": {
                "type": "varchar",
                "description": "The path to the SSL Certificate Authority file"
            },
            "SSL_CA_PATH": {
                "type": "varchar",
                "description": "The path to the SSL Certificate Authority directory"
            },
            "SSL_CERTIFICATE": {
                "type": "varchar",
                "description": "The path to the SSL certificate file"
            },
            "SSL_CIPHER": {
                "type": "varchar",
                "description": "The SSL cipher to use"
            },
            "SSL_KEY": {
                "type": "varchar",
                "description": "The path to the SSL key file"
            },
            "SSL_VERIFY_SERVER_CERTIFICATE": {
                "type": "enum",
                "description": "Indicates whether to verify the server SSL certificate"
            },
            "SSL_CRL_FILE": {
                "type": "varchar",
                "description": "The path to the SSL Certificate Revocation List file"
            },
            "SSL_CRL_PATH": {
                "type": "varchar",
                "description": "The path to the SSL Certificate Revocation List directory"
            },
            "CONNECTION_RETRY_INTERVAL": {
                "type": "int",
                "description": "The interval between reconnection attempts"
            },
            "CONNECTION_RETRY_COUNT": {
                "type": "bigint",
                "description": "The number of reconnection attempts before giving up"
            },
            "HEARTBEAT_INTERVAL": {
                "type": "double",
                "description": "The interval between replication heartbeats"
            },
            "IGNORE_SERVER_IDS": {
                "type": "longtext"
            },
            "REPL_DO_DOMAIN_IDS": {
                "type": "longtext"
            },
            "REPL_IGNORE_DOMAIN_IDS": {
                "type": "longtext"
            }
        },
        "description": "The `replication_connection_configuration` table in MySQL's Performance Schema provides information about the configuration settings of replication connections for a slave server. It includes various settings such as the master host, port, connection retry interval, and other parameters related to the replication source configuration."
    },
    "rwlock_instances": {
        "ddl": "CREATE TABLE `rwlock_instances` (\n  `NAME` varchar(128) NOT NULL COMMENT 'Instrument name associated with the read write lock',\n  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned NOT NULL COMMENT 'Address in memory of the instrumented lock',\n  `WRITE_LOCKED_BY_THREAD_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'THREAD_ID of the locking thread if locked in write (exclusive) mode, otherwise NULL.',\n  `READ_LOCKED_BY_COUNT` int(10) unsigned NOT NULL COMMENT 'Count of current read locks held'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "NAME": {
                "type": "varchar",
                "description": "The name of the instrumented rwlock."
            },
            "OBJECT_INSTANCE_BEGIN": {
                "type": "bigint",
                "description": "The address in memory of the instrumented rwlock."
            },
            "WRITE_LOCKED_BY_THREAD_ID": {
                "type": "bigint",
                "description": "The thread ID of the thread that has taken a write lock on the rwlock, if any."
            },
            "READ_LOCKED_BY_COUNT": {
                "type": "int",
                "description": "The number of threads that have taken a read lock on the rwlock."
            }
        },
        "description": "The `rwlock_instances` table in the MySQL Performance Schema provides detailed information about read-write lock instances that are currently active within the MySQL server. It helps in identifying and diagnosing issues related to lock contention and performance bottlenecks by offering insights into where and how read-write locks are being utilized."
    },
    "session_account_connect_attrs": {
        "ddl": "CREATE TABLE `session_account_connect_attrs` (\n  `PROCESSLIST_ID` int(11) NOT NULL COMMENT 'Session connection identifier.',\n  `ATTR_NAME` varchar(32) NOT NULL COMMENT 'Attribute name.',\n  `ATTR_VALUE` varchar(1024) DEFAULT NULL COMMENT 'Attribute value.',\n  `ORDINAL_POSITION` int(11) DEFAULT NULL COMMENT 'Order in which attribute was added to the connection attributes.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin",
        "columns": {
            "PROCESSLIST_ID": {
                "type": "int",
                "description": "Stores the thread ID of the session that issued the statement"
            },
            "ATTR_NAME": {
                "type": "varchar",
                "description": "Stores the name of the connection attribute"
            },
            "ATTR_VALUE": {
                "type": "varchar",
                "description": "Stores the value of the connection attribute"
            },
            "ORDINAL_POSITION": {
                "type": "int",
                "description": "Stores the position of the attribute in the series of connection attributes sent by the client"
            }
        },
        "description": "The `session_account_connect_attrs` table in the Performance Schema of MySQL provides a record of connection attributes submitted by clients upon establishing a session. These include various metadata such as program name, client library version, and more, offering insights into the context of each session for performance analysis and debugging."
    },
    "session_connect_attrs": {
        "ddl": "CREATE TABLE `session_connect_attrs` (\n  `PROCESSLIST_ID` int(11) NOT NULL COMMENT 'Session connection identifier.',\n  `ATTR_NAME` varchar(32) NOT NULL COMMENT 'Attribute name.',\n  `ATTR_VALUE` varchar(1024) DEFAULT NULL COMMENT 'Attribute value.',\n  `ORDINAL_POSITION` int(11) DEFAULT NULL COMMENT 'Order in which attribute was added to the connection attributes.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin",
        "columns": {
            "PROCESSLIST_ID": {
                "type": "int",
                "description": "A unique identifier for the thread, matching the ID in the performance_schema.threads table"
            },
            "ATTR_NAME": {
                "type": "varchar",
                "description": "The name of the connection attribute"
            },
            "ATTR_VALUE": {
                "type": "varchar",
                "description": "The value of the connection attribute"
            },
            "ORDINAL_POSITION": {
                "type": "int",
                "description": "The position of the attribute in the connection attribute sequence"
            }
        },
        "description": "The `session_connect_attrs` table in the MySQL Performance Schema stores attributes about client connections to the server. These attributes can include connection-specific information like the program name, client version, and OS, which are useful for auditing and monitoring purposes."
    },
    "session_status": {
        "ddl": "CREATE TABLE `session_status` (\n  `VARIABLE_NAME` varchar(64) NOT NULL COMMENT 'The session status variable name.',\n  `VARIABLE_VALUE` varchar(1024) DEFAULT NULL COMMENT 'The session status variable value.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "VARIABLE_NAME": {
                "type": "varchar",
                "description": "Stores the name of the status variable for the session."
            },
            "VARIABLE_VALUE": {
                "type": "varchar",
                "description": "Contains the current value of the status variable for the session."
            }
        },
        "description": "The `session_status` table in the Performance Schema of MySQL provides real-time status data specifically for the current session. It allows for the inspection of various session-specific status variables, aiding in performance analysis and troubleshooting within that session's context."
    },
    "setup_actors": {
        "ddl": "CREATE TABLE `setup_actors` (\n  `HOST` char(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '%' COMMENT 'Host name, either a literal, or the % wildcard representing any host.',\n  `USER` char(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '%' COMMENT 'User name, either a literal or the % wildcard representing any name.',\n  `ROLE` char(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '%' COMMENT 'Unused',\n  `ENABLED` enum('YES','NO') NOT NULL DEFAULT 'YES' COMMENT 'Whether to enable instrumentation for foreground threads matched by the row.',\n  `HISTORY` enum('YES','NO') NOT NULL DEFAULT 'YES' COMMENT 'Whether to log historical events for foreground threads matched by the row.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "HOST": {
                "type": "char"
            },
            "USER": {
                "type": "char"
            },
            "ROLE": {
                "type": "char"
            },
            "ENABLED": {
                "type": "enum"
            },
            "HISTORY": {
                "type": "enum"
            }
        },
        "description": "The `setup_actors` table in the Performance Schema of MySQL is used to configure which users, hosts, and accounts are considered for monitoring. It allows for fine-tuning by specifying exactly which actors (combinations of user, host) should have their activities tracked, enabling or disabling monitoring on a per-account basis."
    },
    "setup_consumers": {
        "ddl": "CREATE TABLE `setup_consumers` (\n  `NAME` varchar(64) NOT NULL COMMENT 'Consumer name',\n  `ENABLED` enum('YES','NO') NOT NULL COMMENT 'YES or NO for whether or not the consumer is enabled. You can modify this column to ensure that event information is added, or is not added.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "NAME": {
                "type": "varchar",
                "description": "Identifies the specific consumer the row refers to in the setup_consumers table of the Performance Schema."
            },
            "ENABLED": {
                "type": "enum",
                "description": "Indicates whether the consumer is enabled ('YES') or disabled ('NO') in the setup_consumers table of the Performance Schema."
            }
        },
        "description": "The `setup_consumers` table in the Performance Schema of MySQL is used to control which types of instruments (such as wait events, stages, statements) are collected. By enabling or disabling specific consumers in this table, you can fine-tune the overhead and the type of performance data being collected by the Performance Schema."
    },
    "setup_instruments": {
        "ddl": "CREATE TABLE `setup_instruments` (\n  `NAME` varchar(128) NOT NULL COMMENT 'Instrument name',\n  `ENABLED` enum('YES','NO') NOT NULL COMMENT 'Whether or not the instrument is enabled. It can be disabled, and the instrument will produce no events.',\n  `TIMED` enum('YES','NO') NOT NULL COMMENT 'Whether or not the instrument is timed. It can be set, but if disabled, events produced by the instrument will have NULL values for the corresponding TIMER_START, TIMER_END, and TIMER_WAIT values.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "NAME": {
                "type": "varchar",
                "description": "The name of the instrument reported in the performance schema."
            },
            "ENABLED": {
                "type": "enum",
                "description": "Indicates whether the instrument is enabled or not."
            },
            "TIMED": {
                "type": "enum",
                "description": "Shows if the instrument measures timing information."
            }
        },
        "description": "The `setup_instruments` table in the Performance Schema of MySQL is used to configure the instruments that are available for monitoring. It allows you to enable or disable the monitoring of specific instruments, thus controlling which aspects of server operation are monitored for performance analysis."
    },
    "setup_objects": {
        "ddl": "CREATE TABLE `setup_objects` (\n  `OBJECT_TYPE` enum('EVENT','FUNCTION','PROCEDURE','TABLE','TRIGGER') NOT NULL DEFAULT 'TABLE' COMMENT 'Type of object to instrument.',\n  `OBJECT_SCHEMA` varchar(64) DEFAULT '%' COMMENT 'Schema containing the object, either the literal or % for any schema.',\n  `OBJECT_NAME` varchar(64) NOT NULL DEFAULT '%' COMMENT 'Name of the instrumented object, either the literal or % for any object.',\n  `ENABLED` enum('YES','NO') NOT NULL DEFAULT 'YES' COMMENT 'Whether the object''s events are instrumented or not. Can be disabled, in which case monitoring is not enabled for those objects.',\n  `TIMED` enum('YES','NO') NOT NULL DEFAULT 'YES' COMMENT 'Whether the object''s events are timed or not. Can be modified.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "OBJECT_TYPE": {
                "type": "enum",
                "description": "Indicates the type of the object (e.g., TABLE, FUNCTION, etc.) for which performance schema instrumentation is available."
            },
            "OBJECT_SCHEMA": {
                "type": "varchar",
                "description": "The schema that the instrumented object belongs to."
            },
            "OBJECT_NAME": {
                "type": "varchar",
                "description": "The name of the instrumented object."
            },
            "ENABLED": {
                "type": "enum",
                "description": "Indicates whether the instrumentation for the specific object is enabled or not."
            },
            "TIMED": {
                "type": "enum",
                "description": "Indicates whether the instrumentation for the specific object is timed or not."
            }
        },
        "description": "The `setup_objects` table in the MySQL Performance Schema is used to control the collection of objects (like tables, and databases) for which statistics are gathered. It allows users to filter and specify exactly which objects should be monitored or ignored by the Performance Schema, enhancing performance monitoring granularity and efficiency."
    },
    "setup_timers": {
        "ddl": "CREATE TABLE `setup_timers` (\n  `NAME` varchar(64) NOT NULL COMMENT 'Type of instrument the timer is used for.',\n  `TIMER_NAME` enum('CYCLE','NANOSECOND','MICROSECOND','MILLISECOND','TICK') NOT NULL COMMENT 'Timer applying to the instrument type. Can be modified.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "NAME": {
                "type": "varchar"
            },
            "TIMER_NAME": {
                "type": "enum"
            }
        }
    },
    "socket_instances": {
        "ddl": "CREATE TABLE `socket_instances` (\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'NAME from the setup_instruments table, and the name of the wait/io/socket/* instrument that produced the event.',\n  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned NOT NULL COMMENT 'Memory address of the object.',\n  `THREAD_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'Thread identifier that the server assigns to each socket.',\n  `SOCKET_ID` int(11) NOT NULL COMMENT 'The socket''s internal file handle.',\n  `IP` varchar(64) NOT NULL COMMENT 'Client IP address. Blank for Unix socket file, otherwise an IPv4 or IPv6 address. Together with the PORT identifies the connection.',\n  `PORT` int(11) NOT NULL COMMENT 'TCP/IP port number, from 0 to 65535. Together with the IP identifies the connection.',\n  `STATE` enum('IDLE','ACTIVE') NOT NULL COMMENT 'Socket status, either IDLE if waiting to receive a request from a client, or ACTIVE'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "EVENT_NAME": {
                "type": "varchar",
                "description": "Name of the instrumented event that produced this row, indicating the specific action or operation on the socket."
            },
            "OBJECT_INSTANCE_BEGIN": {
                "type": "bigint",
                "description": "Memory address of the instrumented object, used to uniquely identify the socket instance."
            },
            "THREAD_ID": {
                "type": "bigint",
                "description": "Internal thread identifier that performed the operation on the socket, linking to the threads table."
            },
            "SOCKET_ID": {
                "type": "int",
                "description": "Unique identifier for the socket instance, used to distinguish between different sockets in use."
            },
            "IP": {
                "type": "varchar",
                "description": "IP address associated with the socket, indicating the remote or local address in use."
            },
            "PORT": {
                "type": "int",
                "description": "Port number associated with the socket, specifying the communication endpoint."
            },
            "STATE": {
                "type": "enum",
                "description": "Current state of the socket, indicating the state of the socket operation or connection."
            }
        },
        "description": "The `socket_instances` table in the Performance Schema of MySQL provides detailed information about each socket (network communication endpoints) used by the MySQL server instance. It includes data on the socket's identifier, status, IP address, port, and the thread associated with the socket, helping in monitoring and diagnosing network-related performance and issues."
    },
    "socket_summary_by_event_name": {
        "ddl": "CREATE TABLE `socket_summary_by_event_name` (\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Socket instrument.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the summarized events that are timed.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the summarized events that are timed.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the summarized events that are timed.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the summarized events that are timed.',\n  `COUNT_READ` bigint(20) unsigned NOT NULL COMMENT 'Number of all read operations, including RECV, RECVFROM, and RECVMSG.',\n  `SUM_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all read operations that are timed.',\n  `MIN_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all read operations that are timed.',\n  `AVG_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all read operations that are timed.',\n  `MAX_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all read operations that are timed.',\n  `SUM_NUMBER_OF_BYTES_READ` bigint(20) unsigned NOT NULL COMMENT 'Bytes read by read operations.',\n  `COUNT_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Number of all write operations, including SEND, SENDTO, and SENDMSG.',\n  `SUM_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all write operations that are timed.',\n  `MIN_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all write operations that are timed.',\n  `AVG_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all write operations that are timed.',\n  `MAX_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all write operations that are timed.',\n  `SUM_NUMBER_OF_BYTES_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Bytes written by write operations.',\n  `COUNT_MISC` bigint(20) unsigned NOT NULL COMMENT 'Number of all miscellaneous operations not counted above, including CONNECT, LISTEN, ACCEPT, CLOSE, and SHUTDOWN.',\n  `SUM_TIMER_MISC` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all miscellaneous operations that are timed.',\n  `MIN_TIMER_MISC` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all miscellaneous operations that are timed.',\n  `AVG_TIMER_MISC` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all miscellaneous operations that are timed.',\n  `MAX_TIMER_MISC` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all miscellaneous operations that are timed.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the event."
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The total number of observed events."
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total wait time for all events."
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum wait time for the events."
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average wait time for the events."
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum wait time for the events."
            },
            "COUNT_READ": {
                "type": "bigint",
                "description": "The number of read events."
            },
            "SUM_TIMER_READ": {
                "type": "bigint",
                "description": "The total wait time for read events."
            },
            "MIN_TIMER_READ": {
                "type": "bigint",
                "description": "The minimum wait time for read events."
            },
            "AVG_TIMER_READ": {
                "type": "bigint",
                "description": "The average wait time for read events."
            },
            "MAX_TIMER_READ": {
                "type": "bigint",
                "description": "The maximum wait time for read events."
            },
            "SUM_NUMBER_OF_BYTES_READ": {
                "type": "bigint",
                "description": "The total number of bytes read."
            },
            "COUNT_WRITE": {
                "type": "bigint",
                "description": "The number of write events."
            },
            "SUM_TIMER_WRITE": {
                "type": "bigint",
                "description": "The total wait time for write events."
            },
            "MIN_TIMER_WRITE": {
                "type": "bigint",
                "description": "The minimum wait time for write events."
            },
            "AVG_TIMER_WRITE": {
                "type": "bigint",
                "description": "The average wait time for write events."
            },
            "MAX_TIMER_WRITE": {
                "type": "bigint",
                "description": "The maximum wait time for write events."
            },
            "SUM_NUMBER_OF_BYTES_WRITE": {
                "type": "bigint",
                "description": "The total number of bytes written."
            },
            "COUNT_MISC": {
                "type": "bigint",
                "description": "The number of miscellaneous events."
            },
            "SUM_TIMER_MISC": {
                "type": "bigint",
                "description": "The total wait time for miscellaneous events."
            },
            "MIN_TIMER_MISC": {
                "type": "bigint",
                "description": "The minimum wait time for miscellaneous events."
            },
            "AVG_TIMER_MISC": {
                "type": "bigint",
                "description": "The average wait time for miscellaneous events."
            },
            "MAX_TIMER_MISC": {
                "type": "bigint",
                "description": "The maximum wait time for miscellaneous events."
            }
        },
        "description": "The `socket_summary_by_event_name` table in the MySQL Performance Schema aggregates statistics about network socket I/O activity, grouped by the event name. This table helps in identifying and analyzing the network I/O performance by providing detailed metrics like the number of bytes sent and received, and the number of socket I/O calls, allowing for a better understanding of network efficiency and potential bottlenecks related to socket operations."
    },
    "socket_summary_by_instance": {
        "ddl": "CREATE TABLE `socket_summary_by_instance` (\n  `EVENT_NAME` varchar(128) NOT NULL COMMENT 'Socket instrument.',\n  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned NOT NULL COMMENT 'Address in memory.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the summarized events that are timed.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the summarized events that are timed.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the summarized events that are timed.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the summarized events that are timed.',\n  `COUNT_READ` bigint(20) unsigned NOT NULL COMMENT 'Number of all read operations, including RECV, RECVFROM, and RECVMSG.',\n  `SUM_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all read operations that are timed.',\n  `MIN_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all read operations that are timed.',\n  `AVG_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all read operations that are timed.',\n  `MAX_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all read operations that are timed.',\n  `SUM_NUMBER_OF_BYTES_READ` bigint(20) unsigned NOT NULL COMMENT 'Bytes read by read operations.',\n  `COUNT_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Number of all write operations, including SEND, SENDTO, and SENDMSG.',\n  `SUM_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all write operations that are timed.',\n  `MIN_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all write operations that are timed.',\n  `AVG_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all write operations that are timed.',\n  `MAX_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all write operations that are timed.',\n  `SUM_NUMBER_OF_BYTES_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Bytes written by write operations.',\n  `COUNT_MISC` bigint(20) unsigned NOT NULL COMMENT 'Number of all miscellaneous operations not counted above, including CONNECT, LISTEN, ACCEPT, CLOSE, and SHUTDOWN.',\n  `SUM_TIMER_MISC` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all miscellaneous operations that are timed.',\n  `MIN_TIMER_MISC` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all miscellaneous operations that are timed.',\n  `AVG_TIMER_MISC` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all miscellaneous operations that are timed.',\n  `MAX_TIMER_MISC` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all miscellaneous operations that are timed.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the event"
            },
            "OBJECT_INSTANCE_BEGIN": {
                "type": "bigint",
                "description": "The address in memory of the object that opened the socket"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The total number of observed events"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total time waited for the events in picoseconds"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum time waited for the events in picoseconds"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average time waited for the events in picoseconds"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum time waited for the events in picoseconds"
            },
            "COUNT_READ": {
                "type": "bigint",
                "description": "The number of read operations"
            },
            "SUM_TIMER_READ": {
                "type": "bigint",
                "description": "The total time waited for read operations in picoseconds"
            },
            "MIN_TIMER_READ": {
                "type": "bigint",
                "description": "The minimum time waited for read operations in picoseconds"
            },
            "AVG_TIMER_READ": {
                "type": "bigint",
                "description": "The average time waited for read operations in picoseconds"
            },
            "MAX_TIMER_READ": {
                "type": "bigint",
                "description": "The maximum time waited for read operations in picoseconds"
            },
            "SUM_NUMBER_OF_BYTES_READ": {
                "type": "bigint",
                "description": "The sum of the number of bytes read"
            },
            "COUNT_WRITE": {
                "type": "bigint",
                "description": "The number of write operations"
            },
            "SUM_TIMER_WRITE": {
                "type": "bigint",
                "description": "The total time waited for write operations in picoseconds"
            },
            "MIN_TIMER_WRITE": {
                "type": "bigint",
                "description": "The minimum time waited for write operations in picoseconds"
            },
            "AVG_TIMER_WRITE": {
                "type": "bigint",
                "description": "The average time waited for write operations in picoseconds"
            },
            "MAX_TIMER_WRITE": {
                "type": "bigint",
                "description": "The maximum time waited for write operations in picoseconds"
            },
            "SUM_NUMBER_OF_BYTES_WRITE": {
                "type": "bigint",
                "description": "The sum of the number of bytes written"
            },
            "COUNT_MISC": {
                "type": "bigint",
                "description": "The count of miscellaneous operations"
            },
            "SUM_TIMER_MISC": {
                "type": "bigint",
                "description": "The total time waited for miscellaneous operations in picoseconds"
            },
            "MIN_TIMER_MISC": {
                "type": "bigint",
                "description": "The minimum time waited for miscellaneous operations in picoseconds"
            },
            "AVG_TIMER_MISC": {
                "type": "bigint",
                "description": "The average time waited for miscellaneous operations in picoseconds"
            },
            "MAX_TIMER_MISC": {
                "type": "bigint",
                "description": "The maximum time waited for miscellaneous operations in picoseconds"
            }
        },
        "description": "The `socket_summary_by_instance` table within the MySQL Performance Schema provides aggregated statistics about network socket I/O activity, grouped by each socket instance. It helps in identifying and analyzing the network activity and performance of MySQL server by socket, including the number of bytes received and sent, and error counts."
    },
    "status_by_account": {
        "ddl": "CREATE TABLE `status_by_account` (\n  `USER` char(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'User for which the status variable is reported.',\n  `HOST` char(60) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'Host for which the status variable is reported.',\n  `VARIABLE_NAME` varchar(64) NOT NULL COMMENT 'Status variable name.',\n  `VARIABLE_VALUE` varchar(1024) DEFAULT NULL COMMENT 'Aggregated status variable value.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "USER": {
                "type": "char",
                "description": "The MySQL account user name part of the account attempting to access the server."
            },
            "HOST": {
                "type": "char",
                "description": "The host name part of the account attempting to access the server."
            },
            "VARIABLE_NAME": {
                "type": "varchar",
                "description": "The name of the session status variable."
            },
            "VARIABLE_VALUE": {
                "type": "varchar",
                "description": "The current value of the session status variable."
            }
        },
        "description": "The `status_by_account` table in the MySQL Performance Schema provides a summary of global status variables for each user account that has accessed the server. This table is used to track and analyze the performance and resource usage of different accounts, helping administrators identify and resolve issues related to specific user activities."
    },
    "status_by_host": {
        "ddl": "CREATE TABLE `status_by_host` (\n  `HOST` char(60) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'Host for which the status variable is reported.',\n  `VARIABLE_NAME` varchar(64) NOT NULL COMMENT 'Status variable name.',\n  `VARIABLE_VALUE` varchar(1024) DEFAULT NULL COMMENT 'Aggregated status variable value.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "HOST": {
                "type": "char",
                "description": "The host name of the client that issued the status request, null for internal threads"
            },
            "VARIABLE_NAME": {
                "type": "varchar",
                "description": "The name of the status variable"
            },
            "VARIABLE_VALUE": {
                "type": "varchar",
                "description": "The value of the status variable"
            }
        },
        "description": "The `status_by_host` table in the Performance Schema of MySQL is designed to provide aggregated status variable information, filtered by host. It helps in identifying and analyzing the status variables associated with each client host that has connected to the MySQL server, aiding in performance monitoring and troubleshooting specifically by host."
    },
    "status_by_thread": {
        "ddl": "CREATE TABLE `status_by_thread` (\n  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT 'The thread identifier of the session in which the status variable is defined.',\n  `VARIABLE_NAME` varchar(64) NOT NULL COMMENT 'Status variable name.',\n  `VARIABLE_VALUE` varchar(1024) DEFAULT NULL COMMENT 'Aggregated status variable value.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "THREAD_ID": {
                "type": "bigint",
                "description": "A thread identifier specific to MySQL, representing the thread associated with a given status variable"
            },
            "VARIABLE_NAME": {
                "type": "varchar",
                "description": "The name of the server status variable for the thread"
            },
            "VARIABLE_VALUE": {
                "type": "varchar",
                "description": "The value of the server status variable for the thread"
            }
        },
        "description": "The `status_by_thread` table in the Performance Schema provides information about the status variables for each thread. It allows users to monitor and understand the performance and activity status of different threads within the MySQL server on a per-thread basis."
    },
    "status_by_user": {
        "ddl": "CREATE TABLE `status_by_user` (\n  `USER` char(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'User for which the status variable is reported.',\n  `VARIABLE_NAME` varchar(64) NOT NULL COMMENT 'Status variable name.',\n  `VARIABLE_VALUE` varchar(1024) DEFAULT NULL COMMENT 'Aggregated status variable value.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "USER": {
                "type": "char",
                "description": "The MySQL user account associated with a session or connection, used to aggregate status variables."
            },
            "VARIABLE_NAME": {
                "type": "varchar",
                "description": "The name of the server status variable."
            },
            "VARIABLE_VALUE": {
                "type": "varchar",
                "description": "The current value of the server status variable."
            }
        },
        "description": "The `status_by_user` table in the Performance Schema of MySQL provides aggregated statistics of global status variables, grouped by user. This allows for analysis of database activity and resource usage on a per-user basis, aiding in identifying which users may be impacting the server's performance the most."
    },
    "table_handles": {
        "ddl": "CREATE TABLE `table_handles` (\n  `OBJECT_TYPE` varchar(64) NOT NULL COMMENT 'The table opened by a table handle.',\n  `OBJECT_SCHEMA` varchar(64) NOT NULL COMMENT 'The schema that contains the object.',\n  `OBJECT_NAME` varchar(64) NOT NULL COMMENT 'The name of the instrumented object.',\n  `OBJECT_INSTANCE_BEGIN` bigint(20) unsigned NOT NULL COMMENT 'The table handle address in memory.',\n  `OWNER_THREAD_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'The thread owning the table handle.',\n  `OWNER_EVENT_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'The event which caused the table handle to be opened.',\n  `INTERNAL_LOCK` varchar(64) DEFAULT NULL COMMENT 'The table lock used at the SQL level.',\n  `EXTERNAL_LOCK` varchar(64) DEFAULT NULL COMMENT 'The table lock used at the storage engine level.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "OBJECT_TYPE": {
                "type": "varchar",
                "description": "The type of the object (such as TABLE, TEMPORARY TABLE, etc.)"
            },
            "OBJECT_SCHEMA": {
                "type": "varchar",
                "description": "The schema name of the object"
            },
            "OBJECT_NAME": {
                "type": "varchar",
                "description": "The name of the object"
            },
            "OBJECT_INSTANCE_BEGIN": {
                "type": "bigint",
                "description": "Memory address of the object instance"
            },
            "OWNER_THREAD_ID": {
                "type": "bigint",
                "description": "Thread ID of the owner or NULL if there is no owner"
            },
            "OWNER_EVENT_ID": {
                "type": "bigint",
                "description": "Event ID of the current statement on the owner thread or NULL if there is no owner"
            },
            "INTERNAL_LOCK": {
                "type": "varchar",
                "description": "The type of internal lock held on the table"
            },
            "EXTERNAL_LOCK": {
                "type": "varchar",
                "description": "The type of external lock held on the table"
            }
        },
        "description": "The `table_handles` table in the Performance Schema provides information about currently open table handles. It helps in identifying which tables are open, how many instances of each table are open, and which thread is accessing them, aiding in performance diagnosis and optimization tasks."
    },
    "table_io_waits_summary_by_index_usage": {
        "ddl": "CREATE TABLE `table_io_waits_summary_by_index_usage` (\n  `OBJECT_TYPE` varchar(64) DEFAULT NULL COMMENT 'TABLE in the case of all indexes.',\n  `OBJECT_SCHEMA` varchar(64) DEFAULT NULL COMMENT 'Schema name.',\n  `OBJECT_NAME` varchar(64) DEFAULT NULL COMMENT 'Table name.',\n  `INDEX_NAME` varchar(64) DEFAULT NULL COMMENT 'Index name, or PRIMARY for the primary index, NULL for no index (inserts are counted in this case).',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events and the sum of the x_READ and x_WRITE columns.',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the summarized events that are timed.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the summarized events that are timed.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the summarized events that are timed.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the summarized events that are timed.',\n  `COUNT_READ` bigint(20) unsigned NOT NULL COMMENT 'Number of all read operations, and the sum of the equivalent x_FETCH columns.',\n  `SUM_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all read operations that are timed.',\n  `MIN_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all read operations that are timed.',\n  `AVG_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all read operations that are timed.',\n  `MAX_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all read operations that are timed.',\n  `COUNT_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Number of all write operations, and the sum of the equivalent x_INSERT, x_UPDATE and x_DELETE columns.',\n  `SUM_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all write operations that are timed.',\n  `MIN_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all write operations that are timed.',\n  `AVG_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all write operations that are timed.',\n  `MAX_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all write operations that are timed.',\n  `COUNT_FETCH` bigint(20) unsigned NOT NULL COMMENT 'Number of all fetch operations.',\n  `SUM_TIMER_FETCH` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all fetch operations that are timed.',\n  `MIN_TIMER_FETCH` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all fetch operations that are timed.',\n  `AVG_TIMER_FETCH` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all fetch operations that are timed.',\n  `MAX_TIMER_FETCH` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all fetch operations that are timed.',\n  `COUNT_INSERT` bigint(20) unsigned NOT NULL COMMENT 'Number of all insert operations.',\n  `SUM_TIMER_INSERT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all insert operations that are timed.',\n  `MIN_TIMER_INSERT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all insert operations that are timed.',\n  `AVG_TIMER_INSERT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all insert operations that are timed.',\n  `MAX_TIMER_INSERT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all insert operations that are timed.',\n  `COUNT_UPDATE` bigint(20) unsigned NOT NULL COMMENT 'Number of all update operations.',\n  `SUM_TIMER_UPDATE` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all update operations that are timed.',\n  `MIN_TIMER_UPDATE` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all update operations that are timed.',\n  `AVG_TIMER_UPDATE` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all update operations that are timed.',\n  `MAX_TIMER_UPDATE` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all update operations that are timed.',\n  `COUNT_DELETE` bigint(20) unsigned NOT NULL COMMENT 'Number of all delete operations.',\n  `SUM_TIMER_DELETE` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all delete operations that are timed.',\n  `MIN_TIMER_DELETE` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all delete operations that are timed.',\n  `AVG_TIMER_DELETE` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all delete operations that are timed.',\n  `MAX_TIMER_DELETE` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all delete operations that are timed.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "OBJECT_TYPE": {
                "type": "varchar",
                "description": "Type of the object (e.g., TABLE)"
            },
            "OBJECT_SCHEMA": {
                "type": "varchar",
                "description": "Schema where the object is located"
            },
            "OBJECT_NAME": {
                "type": "varchar",
                "description": "Name of the object"
            },
            "INDEX_NAME": {
                "type": "varchar",
                "description": "Name of the index, if any, involved in the IO"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "Total number of IO operations"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "Total time waited for IO operations in picoseconds"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "Minimum time waited for an IO operation in picoseconds"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "Average time waited for IO operations in picoseconds"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "Maximum time waited for an IO operation in picoseconds"
            },
            "COUNT_READ": {
                "type": "bigint",
                "description": "Total number of read operations"
            },
            "SUM_TIMER_READ": {
                "type": "bigint",
                "description": "Total time waited for read operations in picoseconds"
            },
            "MIN_TIMER_READ": {
                "type": "bigint",
                "description": "Minimum time waited for a read operation in picoseconds"
            },
            "AVG_TIMER_READ": {
                "type": "bigint",
                "description": "Average time waited for read operations in picoseconds"
            },
            "MAX_TIMER_READ": {
                "type": "bigint",
                "description": "Maximum time waited for a read operation in picoseconds"
            },
            "COUNT_WRITE": {
                "type": "bigint",
                "description": "Total number of write operations"
            },
            "SUM_TIMER_WRITE": {
                "type": "bigint",
                "description": "Total time waited for write operations in picoseconds"
            },
            "MIN_TIMER_WRITE": {
                "type": "bigint",
                "description": "Minimum time waited for a write operation in picoseconds"
            },
            "AVG_TIMER_WRITE": {
                "type": "bigint",
                "description": "Average time waited for write operations in picoseconds"
            },
            "MAX_TIMER_WRITE": {
                "type": "bigint",
                "description": "Maximum time waited for a write operation in picoseconds"
            },
            "COUNT_FETCH": {
                "type": "bigint",
                "description": "Total number of fetch operations"
            },
            "SUM_TIMER_FETCH": {
                "type": "bigint",
                "description": "Total time waited for fetch operations in picoseconds"
            },
            "MIN_TIMER_FETCH": {
                "type": "bigint",
                "description": "Minimum time waited for a fetch operation in picoseconds"
            },
            "AVG_TIMER_FETCH": {
                "type": "bigint",
                "description": "Average time waited for fetch operations in picoseconds"
            },
            "MAX_TIMER_FETCH": {
                "type": "bigint",
                "description": "Maximum time waited for a fetch operation in picoseconds"
            },
            "COUNT_INSERT": {
                "type": "bigint",
                "description": "Total number of insert operations"
            },
            "SUM_TIMER_INSERT": {
                "type": "bigint",
                "description": "Total time waited for insert operations in picoseconds"
            },
            "MIN_TIMER_INSERT": {
                "type": "bigint",
                "description": "Minimum time waited for an insert operation in picoseconds"
            },
            "AVG_TIMER_INSERT": {
                "type": "bigint",
                "description": "Average time waited for insert operations in picoseconds"
            },
            "MAX_TIMER_INSERT": {
                "type": "bigint",
                "description": "Maximum time waited for an insert operation in picoseconds"
            },
            "COUNT_UPDATE": {
                "type": "bigint",
                "description": "Total number of update operations"
            },
            "SUM_TIMER_UPDATE": {
                "type": "bigint",
                "description": "Total time waited for update operations in picoseconds"
            },
            "MIN_TIMER_UPDATE": {
                "type": "bigint",
                "description": "Minimum time waited for an update operation in picoseconds"
            },
            "AVG_TIMER_UPDATE": {
                "type": "bigint",
                "description": "Average time waited for update operations in picoseconds"
            },
            "MAX_TIMER_UPDATE": {
                "type": "bigint",
                "description": "Maximum time waited for an update operation in picoseconds"
            },
            "COUNT_DELETE": {
                "type": "bigint",
                "description": "Total number of delete operations"
            },
            "SUM_TIMER_DELETE": {
                "type": "bigint",
                "description": "Total time waited for delete operations in picoseconds"
            },
            "MIN_TIMER_DELETE": {
                "type": "bigint",
                "description": "Minimum time waited for a delete operation in picoseconds"
            },
            "AVG_TIMER_DELETE": {
                "type": "bigint",
                "description": "Average time waited for delete operations in picoseconds"
            },
            "MAX_TIMER_DELETE": {
                "type": "bigint",
                "description": "Maximum time waited for a delete operation in picoseconds"
            }
        },
        "description": "The `table_io_waits_summary_by_index_usage` table in Performance Schema is used to aggregate wait events for table I/O operations by table and index. It helps in understanding which tables and indexes are experiencing the most wait times due to disk I/O, aiding in identifying potential performance bottlenecks."
    },
    "table_io_waits_summary_by_table": {
        "ddl": "CREATE TABLE `table_io_waits_summary_by_table` (\n  `OBJECT_TYPE` varchar(64) DEFAULT NULL COMMENT 'Since this table records waits by table, always set to TABLE.',\n  `OBJECT_SCHEMA` varchar(64) DEFAULT NULL COMMENT 'Schema name.',\n  `OBJECT_NAME` varchar(64) DEFAULT NULL COMMENT 'Table name.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events and the sum of the x_READ and x_WRITE columns.',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the summarized events that are timed.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the summarized events that are timed.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the summarized events that are timed.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the summarized events that are timed.',\n  `COUNT_READ` bigint(20) unsigned NOT NULL COMMENT 'Number of all read operations, and the sum of the equivalent x_FETCH columns.',\n  `SUM_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all read operations that are timed.',\n  `MIN_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all read operations that are timed.',\n  `AVG_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all read operations that are timed.',\n  `MAX_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all read operations that are timed.',\n  `COUNT_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Number of all write operations, and the sum of the equivalent x_INSERT, x_UPDATE and x_DELETE columns.',\n  `SUM_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all write operations that are timed.',\n  `MIN_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all write operations that are timed.',\n  `AVG_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all write operations that are timed.',\n  `MAX_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all write operations that are timed.',\n  `COUNT_FETCH` bigint(20) unsigned NOT NULL COMMENT 'Number of all fetch operations.',\n  `SUM_TIMER_FETCH` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all fetch operations that are timed.',\n  `MIN_TIMER_FETCH` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all fetch operations that are timed.',\n  `AVG_TIMER_FETCH` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all fetch operations that are timed.',\n  `MAX_TIMER_FETCH` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all fetch operations that are timed.',\n  `COUNT_INSERT` bigint(20) unsigned NOT NULL COMMENT 'Number of all insert operations.',\n  `SUM_TIMER_INSERT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all insert operations that are timed.',\n  `MIN_TIMER_INSERT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all insert operations that are timed.',\n  `AVG_TIMER_INSERT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all insert operations that are timed.',\n  `MAX_TIMER_INSERT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all insert operations that are timed.',\n  `COUNT_UPDATE` bigint(20) unsigned NOT NULL COMMENT 'Number of all update operations.',\n  `SUM_TIMER_UPDATE` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all update operations that are timed.',\n  `MIN_TIMER_UPDATE` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all update operations that are timed.',\n  `AVG_TIMER_UPDATE` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all update operations that are timed.',\n  `MAX_TIMER_UPDATE` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all update operations that are timed.',\n  `COUNT_DELETE` bigint(20) unsigned NOT NULL COMMENT 'Number of all delete operations.',\n  `SUM_TIMER_DELETE` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all delete operations that are timed.',\n  `MIN_TIMER_DELETE` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all delete operations that are timed.',\n  `AVG_TIMER_DELETE` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all delete operations that are timed.',\n  `MAX_TIMER_DELETE` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all delete operations that are timed.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "OBJECT_TYPE": {
                "type": "varchar",
                "description": "Type of the object for which IO stats are collected (e.g., 'TABLE')"
            },
            "OBJECT_SCHEMA": {
                "type": "varchar",
                "description": "Name of the schema that the object belongs to"
            },
            "OBJECT_NAME": {
                "type": "varchar",
                "description": "Name of the object for which IO stats are collected"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "Total number of IO operations"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "Total time waited for IO operations in picoseconds"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "Minimum time waited for an IO operation in picoseconds"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "Average time waited for IO operations in picoseconds"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "Maximum time waited for an IO operation in picoseconds"
            },
            "COUNT_READ": {
                "type": "bigint",
                "description": "Total number of read operations"
            },
            "SUM_TIMER_READ": {
                "type": "bigint",
                "description": "Total time waited for read operations in picoseconds"
            },
            "MIN_TIMER_READ": {
                "type": "bigint",
                "description": "Minimum time waited for a read operation in picoseconds"
            },
            "AVG_TIMER_READ": {
                "type": "bigint",
                "description": "Average time waited for read operations in picoseconds"
            },
            "MAX_TIMER_READ": {
                "type": "bigint",
                "description": "Maximum time waited for a read operation in picoseconds"
            },
            "COUNT_WRITE": {
                "type": "bigint",
                "description": "Total number of write operations"
            },
            "SUM_TIMER_WRITE": {
                "type": "bigint",
                "description": "Total time waited for write operations in picoseconds"
            },
            "MIN_TIMER_WRITE": {
                "type": "bigint",
                "description": "Minimum time waited for a write operation in picoseconds"
            },
            "AVG_TIMER_WRITE": {
                "type": "bigint",
                "description": "Average time waited for write operations in picoseconds"
            },
            "MAX_TIMER_WRITE": {
                "type": "bigint",
                "description": "Maximum time waited for a write operation in picoseconds"
            },
            "COUNT_FETCH": {
                "type": "bigint",
                "description": "Total number of fetch operations"
            },
            "SUM_TIMER_FETCH": {
                "type": "bigint",
                "description": "Total time waited for fetch operations in picoseconds"
            },
            "MIN_TIMER_FETCH": {
                "type": "bigint",
                "description": "Minimum time waited for a fetch operation in picoseconds"
            },
            "AVG_TIMER_FETCH": {
                "type": "bigint",
                "description": "Average time waited for fetch operations in picoseconds"
            },
            "MAX_TIMER_FETCH": {
                "type": "bigint",
                "description": "Maximum time waited for a fetch operation in picoseconds"
            },
            "COUNT_INSERT": {
                "type": "bigint",
                "description": "Total number of insert operations"
            },
            "SUM_TIMER_INSERT": {
                "type": "bigint",
                "description": "Total time waited for insert operations in picoseconds"
            },
            "MIN_TIMER_INSERT": {
                "type": "bigint",
                "description": "Minimum time waited for an insert operation in picoseconds"
            },
            "AVG_TIMER_INSERT": {
                "type": "bigint",
                "description": "Average time waited for insert operations in picoseconds"
            },
            "MAX_TIMER_INSERT": {
                "type": "bigint",
                "description": "Maximum time waited for an insert operation in picoseconds"
            },
            "COUNT_UPDATE": {
                "type": "bigint",
                "description": "Total number of update operations"
            },
            "SUM_TIMER_UPDATE": {
                "type": "bigint",
                "description": "Total time waited for update operations in picoseconds"
            },
            "MIN_TIMER_UPDATE": {
                "type": "bigint",
                "description": "Minimum time waited for an update operation in picoseconds"
            },
            "AVG_TIMER_UPDATE": {
                "type": "bigint",
                "description": "Average time waited for update operations in picoseconds"
            },
            "MAX_TIMER_UPDATE": {
                "type": "bigint",
                "description": "Maximum time waited for an update operation in picoseconds"
            },
            "COUNT_DELETE": {
                "type": "bigint",
                "description": "Total number of delete operations"
            },
            "SUM_TIMER_DELETE": {
                "type": "bigint",
                "description": "Total time waited for delete operations in picoseconds"
            },
            "MIN_TIMER_DELETE": {
                "type": "bigint",
                "description": "Minimum time waited for a delete operation in picoseconds"
            },
            "AVG_TIMER_DELETE": {
                "type": "bigint",
                "description": "Average time waited for delete operations in picoseconds"
            },
            "MAX_TIMER_DELETE": {
                "type": "bigint",
                "description": "Maximum time waited for a delete operation in picoseconds"
            }
        },
        "description": "The `table_io_waits_summary_by_table` table within the MySQL Performance Schema provides aggregated summaries of table I/O wait events. It helps in identifying tables that are experiencing significant I/O wait times, thus assisting in performance tuning and bottleneck identification."
    },
    "table_lock_waits_summary_by_table": {
        "ddl": "CREATE TABLE `table_lock_waits_summary_by_table` (\n  `OBJECT_TYPE` varchar(64) DEFAULT NULL COMMENT 'Since this table records waits by table, always set to TABLE.',\n  `OBJECT_SCHEMA` varchar(64) DEFAULT NULL COMMENT 'Schema name.',\n  `OBJECT_NAME` varchar(64) DEFAULT NULL COMMENT 'Table name.',\n  `COUNT_STAR` bigint(20) unsigned NOT NULL COMMENT 'Number of summarized events and the sum of the x_READ and x_WRITE columns.',\n  `SUM_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of the summarized events that are timed.',\n  `MIN_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of the summarized events that are timed.',\n  `AVG_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of the summarized events that are timed.',\n  `MAX_TIMER_WAIT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of the summarized events that are timed.',\n  `COUNT_READ` bigint(20) unsigned NOT NULL COMMENT 'Number of all read operations, and the sum of the equivalent x_READ_NORMAL, x_READ_WITH_SHARED_LOCKS, x_READ_HIGH_PRIORITY and x_READ_NO_INSERT columns.',\n  `SUM_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all read operations that are timed.',\n  `MIN_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all read operations that are timed.',\n  `AVG_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all read operations that are timed.',\n  `MAX_TIMER_READ` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all read operations that are timed.',\n  `COUNT_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Number of all write operations, and the sum of the equivalent x_WRITE_ALLOW_WRITE, x_WRITE_CONCURRENT_INSERT, x_WRITE_DELAYED, x_WRITE_LOW_PRIORITY and x_WRITE_NORMAL columns.',\n  `SUM_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all write operations that are timed.',\n  `MIN_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all write operations that are timed.',\n  `AVG_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all write operations that are timed.',\n  `MAX_TIMER_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all write operations that are timed.',\n  `COUNT_READ_NORMAL` bigint(20) unsigned NOT NULL COMMENT 'Number of all internal read normal locks.',\n  `SUM_TIMER_READ_NORMAL` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all internal read normal locks that are timed.',\n  `MIN_TIMER_READ_NORMAL` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all internal read normal locks that are timed.',\n  `AVG_TIMER_READ_NORMAL` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all internal read normal locks that are timed.',\n  `MAX_TIMER_READ_NORMAL` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all internal read normal locks that are timed.',\n  `COUNT_READ_WITH_SHARED_LOCKS` bigint(20) unsigned NOT NULL COMMENT 'Number of all internal read with shared locks.',\n  `SUM_TIMER_READ_WITH_SHARED_LOCKS` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all internal read with shared locks that are timed.',\n  `MIN_TIMER_READ_WITH_SHARED_LOCKS` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all internal read with shared locks that are timed.',\n  `AVG_TIMER_READ_WITH_SHARED_LOCKS` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all internal read with shared locks that are timed.',\n  `MAX_TIMER_READ_WITH_SHARED_LOCKS` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all internal read with shared locks that are timed.',\n  `COUNT_READ_HIGH_PRIORITY` bigint(20) unsigned NOT NULL COMMENT 'Number of all internal read high priority locks.',\n  `SUM_TIMER_READ_HIGH_PRIORITY` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all internal read high priority locks that are timed.',\n  `MIN_TIMER_READ_HIGH_PRIORITY` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all internal read high priority locks that are timed.',\n  `AVG_TIMER_READ_HIGH_PRIORITY` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all internal read high priority locks that are timed.',\n  `MAX_TIMER_READ_HIGH_PRIORITY` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all internal read high priority locks that are timed.',\n  `COUNT_READ_NO_INSERT` bigint(20) unsigned NOT NULL COMMENT 'Number of all internal read no insert locks.',\n  `SUM_TIMER_READ_NO_INSERT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all internal read no insert locks that are timed.',\n  `MIN_TIMER_READ_NO_INSERT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all internal read no insert locks that are timed.',\n  `AVG_TIMER_READ_NO_INSERT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all internal read no insert locks that are timed.',\n  `MAX_TIMER_READ_NO_INSERT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all internal read no insert locks that are timed.',\n  `COUNT_READ_EXTERNAL` bigint(20) unsigned NOT NULL COMMENT 'Number of all external read locks.',\n  `SUM_TIMER_READ_EXTERNAL` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all external read locks that are timed.',\n  `MIN_TIMER_READ_EXTERNAL` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all external read locks that are timed.',\n  `AVG_TIMER_READ_EXTERNAL` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all external read locks that are timed.',\n  `MAX_TIMER_READ_EXTERNAL` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all external read locks that are timed.',\n  `COUNT_WRITE_ALLOW_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Number of all internal read normal locks.',\n  `SUM_TIMER_WRITE_ALLOW_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all internal write allow write locks that are timed.',\n  `MIN_TIMER_WRITE_ALLOW_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all internal write allow write locks that are timed.',\n  `AVG_TIMER_WRITE_ALLOW_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all internal write allow write locks that are timed.',\n  `MAX_TIMER_WRITE_ALLOW_WRITE` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all internal write allow write locks that are timed.',\n  `COUNT_WRITE_CONCURRENT_INSERT` bigint(20) unsigned NOT NULL COMMENT 'Number of all internal concurrent insert write locks.',\n  `SUM_TIMER_WRITE_CONCURRENT_INSERT` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all internal concurrent insert write locks that are timed.',\n  `MIN_TIMER_WRITE_CONCURRENT_INSERT` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all internal concurrent insert write locks that are timed.',\n  `AVG_TIMER_WRITE_CONCURRENT_INSERT` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all internal concurrent insert write locks that are timed.',\n  `MAX_TIMER_WRITE_CONCURRENT_INSERT` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all internal concurrent insert write locks that are timed.',\n  `COUNT_WRITE_DELAYED` bigint(20) unsigned NOT NULL COMMENT 'Number of all internal write delayed locks.',\n  `SUM_TIMER_WRITE_DELAYED` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all internal write delayed locks that are timed.',\n  `MIN_TIMER_WRITE_DELAYED` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all internal write delayed locks that are timed.',\n  `AVG_TIMER_WRITE_DELAYED` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all internal write delayed locks that are timed.',\n  `MAX_TIMER_WRITE_DELAYED` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all internal write delayed locks that are timed.',\n  `COUNT_WRITE_LOW_PRIORITY` bigint(20) unsigned NOT NULL COMMENT 'Number of all internal write low priority locks.',\n  `SUM_TIMER_WRITE_LOW_PRIORITY` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all internal write low priority locks that are timed.',\n  `MIN_TIMER_WRITE_LOW_PRIORITY` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all internal write low priority locks that are timed.',\n  `AVG_TIMER_WRITE_LOW_PRIORITY` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all internal write low priority locks that are timed.',\n  `MAX_TIMER_WRITE_LOW_PRIORITY` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all internal write low priority locks that are timed.',\n  `COUNT_WRITE_NORMAL` bigint(20) unsigned NOT NULL COMMENT 'Number of all internal write normal locks.',\n  `SUM_TIMER_WRITE_NORMAL` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all internal write normal locks that are timed.',\n  `MIN_TIMER_WRITE_NORMAL` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all internal write normal locks that are timed.',\n  `AVG_TIMER_WRITE_NORMAL` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all internal write normal locks that are timed.',\n  `MAX_TIMER_WRITE_NORMAL` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all internal write normal locks that are timed.',\n  `COUNT_WRITE_EXTERNAL` bigint(20) unsigned NOT NULL COMMENT 'Number of all external write locks.',\n  `SUM_TIMER_WRITE_EXTERNAL` bigint(20) unsigned NOT NULL COMMENT 'Total wait time of all external write locks that are timed.',\n  `MIN_TIMER_WRITE_EXTERNAL` bigint(20) unsigned NOT NULL COMMENT 'Minimum wait time of all external write locks that are timed.',\n  `AVG_TIMER_WRITE_EXTERNAL` bigint(20) unsigned NOT NULL COMMENT 'Average wait time of all external write locks that are timed.',\n  `MAX_TIMER_WRITE_EXTERNAL` bigint(20) unsigned NOT NULL COMMENT 'Maximum wait time of all external write locks that are timed.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "OBJECT_TYPE": {
                "type": "varchar",
                "description": "The type of the object (e.g., TABLE, FUNCTION, etc.)"
            },
            "OBJECT_SCHEMA": {
                "type": "varchar",
                "description": "The schema (database) name where the object is located"
            },
            "OBJECT_NAME": {
                "type": "varchar",
                "description": "The name of the object (e.g., table name, function name)"
            },
            "COUNT_STAR": {
                "type": "bigint",
                "description": "The number of times this object was involved in a table lock wait"
            },
            "SUM_TIMER_WAIT": {
                "type": "bigint",
                "description": "The total time spent waiting for table locks on this object"
            },
            "MIN_TIMER_WAIT": {
                "type": "bigint",
                "description": "The minimum wait time for a table lock on this object"
            },
            "AVG_TIMER_WAIT": {
                "type": "bigint",
                "description": "The average wait time for a table lock on this object"
            },
            "MAX_TIMER_WAIT": {
                "type": "bigint",
                "description": "The maximum wait time for a table lock on this object"
            },
            "COUNT_READ": {
                "type": "bigint",
                "description": "The number of read locks waited for on this object"
            },
            "SUM_TIMER_READ": {
                "type": "bigint",
                "description": "The total time spent waiting for read locks on this object"
            },
            "MIN_TIMER_READ": {
                "type": "bigint",
                "description": "The minimum time spent waiting for a read lock on this object"
            },
            "AVG_TIMER_READ": {
                "type": "bigint",
                "description": "The average time spent waiting for a read lock on this object"
            },
            "MAX_TIMER_READ": {
                "type": "bigint",
                "description": "The maximum time spent waiting for a read lock on this object"
            },
            "COUNT_WRITE": {
                "type": "bigint",
                "description": "The number of write locks waited for on this object"
            },
            "SUM_TIMER_WRITE": {
                "type": "bigint",
                "description": "The total time spent waiting for write locks on this object"
            },
            "MIN_TIMER_WRITE": {
                "type": "bigint",
                "description": "The minimum time spent waiting for a write lock on this object"
            },
            "AVG_TIMER_WRITE": {
                "type": "bigint",
                "description": "The average time spent waiting for a write lock on this object"
            },
            "MAX_TIMER_WRITE": {
                "type": "bigint",
                "description": "The maximum time spent waiting for a write lock on this object"
            },
            "COUNT_READ_NORMAL": {
                "type": "bigint",
                "description": "The count of waits for a normal read lock on this object"
            },
            "SUM_TIMER_READ_NORMAL": {
                "type": "bigint",
                "description": "The total time spent waiting for normal read locks on this object"
            },
            "MIN_TIMER_READ_NORMAL": {
                "type": "bigint",
                "description": "The minimum time spent waiting for a normal read lock"
            },
            "AVG_TIMER_READ_NORMAL": {
                "type": "bigint",
                "description": "The average time spent waiting for a normal read lock"
            },
            "MAX_TIMER_READ_NORMAL": {
                "type": "bigint",
                "description": "The maximum time spent waiting for a normal read lock"
            },
            "COUNT_READ_WITH_SHARED_LOCKS": {
                "type": "bigint",
                "description": "The count of waits for a read with shared locks on this object"
            },
            "SUM_TIMER_READ_WITH_SHARED_LOCKS": {
                "type": "bigint",
                "description": "The total time spent waiting for reads with shared locks"
            },
            "MIN_TIMER_READ_WITH_SHARED_LOCKS": {
                "type": "bigint",
                "description": "The minimum time spent waiting for a read with a shared lock"
            },
            "AVG_TIMER_READ_WITH_SHARED_LOCKS": {
                "type": "bigint",
                "description": "The average time spent waiting for a read with a shared lock"
            },
            "MAX_TIMER_READ_WITH_SHARED_LOCKS": {
                "type": "bigint",
                "description": "The maximum time spent waiting for a read with a shared lock"
            },
            "COUNT_READ_HIGH_PRIORITY": {
                "type": "bigint",
                "description": "The count of waits for a high priority read lock on this object"
            },
            "SUM_TIMER_READ_HIGH_PRIORITY": {
                "type": "bigint",
                "description": "The total time spent waiting for high priority read locks"
            },
            "MIN_TIMER_READ_HIGH_PRIORITY": {
                "type": "bigint",
                "description": "The minimum time spent waiting for a high priority read lock"
            },
            "AVG_TIMER_READ_HIGH_PRIORITY": {
                "type": "bigint",
                "description": "The average time spent waiting for a high priority read lock"
            },
            "MAX_TIMER_READ_HIGH_PRIORITY": {
                "type": "bigint",
                "description": "The maximum time spent waiting for a high priority read lock"
            },
            "COUNT_READ_NO_INSERT": {
                "type": "bigint",
                "description": "The count of waits for a read lock without insert on this object"
            },
            "SUM_TIMER_READ_NO_INSERT": {
                "type": "bigint",
                "description": "The total time spent waiting for read locks without insert"
            },
            "MIN_TIMER_READ_NO_INSERT": {
                "type": "bigint",
                "description": "The minimum time spent waiting for a read lock without insert"
            },
            "AVG_TIMER_READ_NO_INSERT": {
                "type": "bigint",
                "description": "The average time spent waiting for a read lock without insert"
            },
            "MAX_TIMER_READ_NO_INSERT": {
                "type": "bigint",
                "description": "The maximum time spent waiting for a read lock without insert"
            },
            "COUNT_READ_EXTERNAL": {
                "type": "bigint",
                "description": "The count of waits for a read lock with external conditions on this object"
            },
            "SUM_TIMER_READ_EXTERNAL": {
                "type": "bigint",
                "description": "The total time spent waiting for read locks with external conditions"
            },
            "MIN_TIMER_READ_EXTERNAL": {
                "type": "bigint",
                "description": "The minimum time spent waiting for a read lock with external conditions"
            },
            "AVG_TIMER_READ_EXTERNAL": {
                "type": "bigint",
                "description": "The average time spent waiting for a read lock with external conditions"
            },
            "MAX_TIMER_READ_EXTERNAL": {
                "type": "bigint",
                "description": "The maximum time spent waiting for a read lock with external conditions"
            },
            "COUNT_WRITE_ALLOW_WRITE": {
                "type": "bigint",
                "description": "The count of waits for a write lock that allows subsequent writes on this object"
            },
            "SUM_TIMER_WRITE_ALLOW_WRITE": {
                "type": "bigint",
                "description": "The total time spent waiting for write locks allowing subsequent writes"
            },
            "MIN_TIMER_WRITE_ALLOW_WRITE": {
                "type": "bigint",
                "description": "The minimum time spent waiting for a write lock that allows subsequent writes"
            },
            "AVG_TIMER_WRITE_ALLOW_WRITE": {
                "type": "bigint",
                "description": "The average time spent waiting for a write lock that allows subsequent writes"
            },
            "MAX_TIMER_WRITE_ALLOW_WRITE": {
                "type": "bigint",
                "description": "The maximum time spent waiting for a write lock that allows subsequent writes"
            },
            "COUNT_WRITE_CONCURRENT_INSERT": {
                "type": "bigint",
                "description": "The count of waits for a write lock during a concurrent insert on this object"
            },
            "SUM_TIMER_WRITE_CONCURRENT_INSERT": {
                "type": "bigint",
                "description": "The total time spent waiting for write locks during concurrent inserts"
            },
            "MIN_TIMER_WRITE_CONCURRENT_INSERT": {
                "type": "bigint",
                "description": "The minimum time spent waiting for a write lock during a concurrent insert"
            },
            "AVG_TIMER_WRITE_CONCURRENT_INSERT": {
                "type": "bigint",
                "description": "The average time spent waiting for a write lock during a concurrent insert"
            },
            "MAX_TIMER_WRITE_CONCURRENT_INSERT": {
                "type": "bigint",
                "description": "The maximum time spent waiting for a write lock during a concurrent insert"
            },
            "COUNT_WRITE_DELAYED": {
                "type": "bigint"
            },
            "SUM_TIMER_WRITE_DELAYED": {
                "type": "bigint"
            },
            "MIN_TIMER_WRITE_DELAYED": {
                "type": "bigint"
            },
            "AVG_TIMER_WRITE_DELAYED": {
                "type": "bigint"
            },
            "MAX_TIMER_WRITE_DELAYED": {
                "type": "bigint"
            },
            "COUNT_WRITE_LOW_PRIORITY": {
                "type": "bigint",
                "description": "The count of waits for a low priority write lock on this object"
            },
            "SUM_TIMER_WRITE_LOW_PRIORITY": {
                "type": "bigint",
                "description": "The total time spent waiting for low priority write locks"
            },
            "MIN_TIMER_WRITE_LOW_PRIORITY": {
                "type": "bigint",
                "description": "The minimum time spent waiting for a low priority write lock"
            },
            "AVG_TIMER_WRITE_LOW_PRIORITY": {
                "type": "bigint",
                "description": "The average time spent waiting for a low priority write lock"
            },
            "MAX_TIMER_WRITE_LOW_PRIORITY": {
                "type": "bigint",
                "description": "The maximum time spent waiting for a low priority write lock"
            },
            "COUNT_WRITE_NORMAL": {
                "type": "bigint",
                "description": "The count of waits for a normal priority write lock on this object"
            },
            "SUM_TIMER_WRITE_NORMAL": {
                "type": "bigint",
                "description": "The total time spent waiting for normal priority write locks"
            },
            "MIN_TIMER_WRITE_NORMAL": {
                "type": "bigint",
                "description": "The minimum time spent waiting for a normal priority write lock"
            },
            "AVG_TIMER_WRITE_NORMAL": {
                "type": "bigint",
                "description": "The average time spent waiting for a normal priority write lock"
            },
            "MAX_TIMER_WRITE_NORMAL": {
                "type": "bigint",
                "description": "The maximum time spent waiting for a normal priority write lock"
            },
            "COUNT_WRITE_EXTERNAL": {
                "type": "bigint",
                "description": "The count of waits for a write lock with external conditions on this object"
            },
            "SUM_TIMER_WRITE_EXTERNAL": {
                "type": "bigint",
                "description": "The total time spent waiting for write locks with external conditions"
            },
            "MIN_TIMER_WRITE_EXTERNAL": {
                "type": "bigint",
                "description": "The minimum time spent waiting for a write lock with external conditions"
            },
            "AVG_TIMER_WRITE_EXTERNAL": {
                "type": "bigint",
                "description": "The average time spent waiting for a write lock with external conditions"
            },
            "MAX_TIMER_WRITE_EXTERNAL": {
                "type": "bigint",
                "description": "The maximum time spent waiting for a write lock with external conditions"
            }
        },
        "description": "The `table_lock_waits_summary_by_table` table within MySQL's Performance Schema aggregates table lock wait events, categorizing them by the table on which they occurred. It provides insights into locking delays, helping identify tables that might be bottlenecks due to high contention or poor indexing strategies."
    },
    "threads": {
        "ddl": "CREATE TABLE `threads` (\n  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT 'A unique thread identifier.',\n  `NAME` varchar(128) NOT NULL COMMENT 'Name associated with the server''s thread instrumentation code, for example thread/sql/main for the server''s main() function, and thread/sql/one_connection for a user connection.',\n  `TYPE` varchar(10) NOT NULL COMMENT 'FOREGROUND or BACKGROUND, depending on the thread type. User connection threads are FOREGROUND, internal server threads are BACKGROUND.',\n  `PROCESSLIST_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'The PROCESSLIST.ID value for threads displayed in the INFORMATION_SCHEMA.PROCESSLIST table, or 0 for background threads. Also corresponds with the CONNECTION_ID() return value for the thread.',\n  `PROCESSLIST_USER` varchar(128) DEFAULT NULL COMMENT 'Foreground thread user, or NULL for a background thread.',\n  `PROCESSLIST_HOST` varchar(255) DEFAULT NULL COMMENT 'Foreground thread host, or NULL for a background thread.',\n  `PROCESSLIST_DB` varchar(64) DEFAULT NULL COMMENT 'Thread''s default database, or NULL if none exists.',\n  `PROCESSLIST_COMMAND` varchar(16) DEFAULT NULL COMMENT 'Type of command executed by the thread. These correspond to the the COM_xxx client/server protocol commands, and the Com_xxx status variables. See Thread Command Values.',\n  `PROCESSLIST_TIME` bigint(20) DEFAULT NULL COMMENT 'Time in seconds the thread has been in its current state.',\n  `PROCESSLIST_STATE` varchar(64) DEFAULT NULL COMMENT 'Action, event or state indicating what the thread is doing.',\n  `PROCESSLIST_INFO` longtext DEFAULT NULL COMMENT 'Statement being executed by the thread, or NULL if a statement is not being executed. If a statement results in calling other statements, such as for a stored procedure, the innermost statement from the stored procedure is shown here.',\n  `PARENT_THREAD_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'THREAD_ID of the parent thread, if any. Subthreads can for example be spawned as a result of INSERT DELAYED statements.',\n  `ROLE` varchar(64) DEFAULT NULL COMMENT 'Unused.',\n  `INSTRUMENTED` enum('YES','NO') NOT NULL COMMENT 'YES or NO for Whether the thread is instrumented or not. For foreground threads, the initial value is determined by whether there''s a user/host match in the setup_actors table. Subthreads are again matched, while for background threads, this will be set to YES by default. To monitor events that the thread executes, INSTRUMENTED must be YES and the thread_instrumentation consumer in the setup_consumers table must also be YES.',\n  `HISTORY` enum('YES','NO') NOT NULL COMMENT 'Whether to log historical events for the thread.',\n  `CONNECTION_TYPE` varchar(16) DEFAULT NULL COMMENT 'The protocol used to establish the connection, or NULL for background threads.',\n  `THREAD_OS_ID` bigint(20) unsigned DEFAULT NULL COMMENT 'The thread or task identifier as defined by the underlying operating system, if there is one.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "THREAD_ID": {
                "type": "bigint",
                "description": "Unique identifier for each thread"
            },
            "NAME": {
                "type": "varchar",
                "description": "The name of the thread"
            },
            "TYPE": {
                "type": "varchar",
                "description": "The type of thread, foreground or background"
            },
            "PROCESSLIST_ID": {
                "type": "bigint",
                "description": "The process ID in the process list"
            },
            "PROCESSLIST_USER": {
                "type": "varchar",
                "description": "The user who issued the process"
            },
            "PROCESSLIST_HOST": {
                "type": "varchar",
                "description": "The host from which the user issued the process"
            },
            "PROCESSLIST_DB": {
                "type": "varchar",
                "description": "The default database for the process"
            },
            "PROCESSLIST_COMMAND": {
                "type": "varchar",
                "description": "The type of command the thread is executing"
            },
            "PROCESSLIST_TIME": {
                "type": "bigint",
                "description": "Time in seconds the process has been running"
            },
            "PROCESSLIST_STATE": {
                "type": "varchar",
                "description": "The state of the process in the process list"
            },
            "PROCESSLIST_INFO": {
                "type": "longtext",
                "description": "The statement the thread is executing, if any"
            },
            "PARENT_THREAD_ID": {
                "type": "bigint",
                "description": "ID of the parent thread for this thread, if any"
            },
            "ROLE": {
                "type": "varchar",
                "description": "The role of the thread"
            },
            "INSTRUMENTED": {
                "type": "enum",
                "description": "Indicates if the thread is instrumented or not"
            },
            "HISTORY": {
                "type": "enum",
                "description": "Indicates if the thread's events are added to the history"
            },
            "CONNECTION_TYPE": {
                "type": "varchar",
                "description": "Type of connection used by the thread"
            },
            "THREAD_OS_ID": {
                "type": "bigint",
                "description": "The operating system thread ID"
            }
        },
        "description": "The `threads` table in MySQL's Performance Schema provides information about the threads (or processes) within the MySQL server. It includes details such as the thread's ID, name, type (foreground or background), and the instrumented current statement the thread is executing, facilitating monitoring and understanding thread activity and resource usage."
    },
    "user_variables_by_thread": {
        "ddl": "CREATE TABLE `user_variables_by_thread` (\n  `THREAD_ID` bigint(20) unsigned NOT NULL COMMENT 'The thread identifier of the session in which the variable is defined.',\n  `VARIABLE_NAME` varchar(64) NOT NULL COMMENT 'The variable name, without the leading @ character.',\n  `VARIABLE_VALUE` longblob DEFAULT NULL COMMENT 'The variable value'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "THREAD_ID": {
                "type": "bigint",
                "description": "Stores the unique identifier for each thread within the MySQL server"
            },
            "VARIABLE_NAME": {
                "type": "varchar",
                "description": "Holds the names of user-defined variables for the corresponding thread"
            },
            "VARIABLE_VALUE": {
                "type": "longblob",
                "description": "Contains the current values of the user-defined variables for the respective thread"
            }
        },
        "description": "The `user_variables_by_thread` table within the MySQL Performance Schema is used to monitor user-defined variables at the thread level. It provides insights into the current values of user variables for each active thread, aiding in debugging and performance tuning."
    },
    "users": {
        "ddl": "CREATE TABLE `users` (\n  `USER` char(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'The connection''s client user name for the connection, or NULL if an internal thread.',\n  `CURRENT_CONNECTIONS` bigint(20) NOT NULL COMMENT 'Current connections for the user.',\n  `TOTAL_CONNECTIONS` bigint(20) NOT NULL COMMENT 'Total connections for the user.'\n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "USER": {
                "type": "char",
                "description": "The MySQL user account as a string."
            },
            "CURRENT_CONNECTIONS": {
                "type": "bigint",
                "description": "The number of current connections for the user."
            },
            "TOTAL_CONNECTIONS": {
                "type": "bigint",
                "description": "The cumulative number of connections made by the user since the server started."
            }
        },
        "description": "The `users` table in MySQL's Performance Schema records statistics about user accounts that have connected to the MySQL server. It provides aggregated metrics on the activity and resource usage of each user, helping in analyzing their impact on server performance."
    }
}