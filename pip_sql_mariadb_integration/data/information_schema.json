{
    "ALL_PLUGINS": {
        "ddl": "CREATE TEMPORARY TABLE `ALL_PLUGINS` (\n  `PLUGIN_NAME` varchar(64) NOT NULL,\n  `PLUGIN_VERSION` varchar(20) NOT NULL,\n  `PLUGIN_STATUS` varchar(16) NOT NULL,\n  `PLUGIN_TYPE` varchar(80) NOT NULL,\n  `PLUGIN_TYPE_VERSION` varchar(20) NOT NULL,\n  `PLUGIN_LIBRARY` varchar(64),\n  `PLUGIN_LIBRARY_VERSION` varchar(20),\n  `PLUGIN_AUTHOR` varchar(64),\n  `PLUGIN_DESCRIPTION` longtext,\n  `PLUGIN_LICENSE` varchar(80) NOT NULL,\n  `LOAD_OPTION` varchar(64) NOT NULL,\n  `PLUGIN_MATURITY` varchar(12) NOT NULL,\n  `PLUGIN_AUTH_VERSION` varchar(80)\n) ENGINE=Aria DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci PAGE_CHECKSUM=0",
        "columns": {
            "PLUGIN_NAME": {
                "type": "varchar",
                "description": "The name of the plugin"
            },
            "PLUGIN_VERSION": {
                "type": "varchar",
                "description": "The version of the plugin"
            },
            "PLUGIN_STATUS": {
                "type": "varchar",
                "description": "The status of the plugin (e.g., ACTIVE, INACTIVE)"
            },
            "PLUGIN_TYPE": {
                "type": "varchar",
                "description": "The type of the plugin (e.g., STORAGE ENGINE, FUNCTION)"
            },
            "PLUGIN_TYPE_VERSION": {
                "type": "varchar",
                "description": "The version of the plugin type"
            },
            "PLUGIN_LIBRARY": {
                "type": "varchar",
                "description": "The name of the library that implements the plugin, if any"
            },
            "PLUGIN_LIBRARY_VERSION": {
                "type": "varchar",
                "description": "The version of the library that implements the plugin, if it is specified"
            },
            "PLUGIN_AUTHOR": {
                "type": "varchar",
                "description": "The author of the plugin"
            },
            "PLUGIN_DESCRIPTION": {
                "type": "longtext",
                "description": "A description of what the plugin does"
            },
            "PLUGIN_LICENSE": {
                "type": "varchar",
                "description": "The licensing information for the plugin"
            },
            "LOAD_OPTION": {
                "type": "varchar",
                "description": "Indicates how the plugin is loaded (e.g., ON, OFF, FORCE, FORCE_PLUS_PERMANENT)"
            },
            "PLUGIN_MATURITY": {
                "type": "varchar",
                "description": "The maturity level of the plugin (e.g., Unknown, Experimental, Beta, Stable)"
            },
            "PLUGIN_AUTH_VERSION": {
                "type": "varchar",
                "description": "The version of the authentication method used by the plugin, if applicable"
            }
        },
        "description": "The `ALL_PLUGINS` table in the Information Schema provides comprehensive information on all plugins, including storage engines, available in the MariaDB server installation. It offers details such as plugin name, plugin version, plugin status (active/inactive), and plugin type (e.g., STORAGE ENGINE, FULLTEXT PARSER).",
        "simple_ddl": "CREATE TABLE ALL_PLUGINS (\n  PLUGIN_NAME varchar,\n  PLUGIN_VERSION varchar,\n  PLUGIN_STATUS varchar,\n  PLUGIN_TYPE varchar,\n  PLUGIN_TYPE_VERSION varchar,\n  PLUGIN_LIBRARY varchar,\n  PLUGIN_LIBRARY_VERSION varchar,\n  PLUGIN_AUTHOR varchar,\n  PLUGIN_DESCRIPTION longtext,\n  PLUGIN_LICENSE varchar,\n  LOAD_OPTION varchar,\n  PLUGIN_MATURITY varchar,\n  PLUGIN_AUTH_VERSION varchar\n);"
    },
    "APPLICABLE_ROLES": {
        "ddl": "CREATE TEMPORARY TABLE `APPLICABLE_ROLES` (\n  `GRANTEE` varchar(385) NOT NULL,\n  `ROLE_NAME` varchar(128) NOT NULL,\n  `IS_GRANTABLE` varchar(3) NOT NULL,\n  `IS_DEFAULT` varchar(3)\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "GRANTEE": {
                "type": "varchar",
                "description": "The user to whom the role is applicable, including the host from which they connect."
            },
            "ROLE_NAME": {
                "type": "varchar",
                "description": "The name of the applicable role."
            },
            "IS_GRANTABLE": {
                "type": "varchar",
                "description": "Indicates whether the grantee is permitted to grant this role to others."
            },
            "IS_DEFAULT": {
                "type": "varchar",
                "description": "Specifies whether the role is a default role for the grantee."
            }
        },
        "description": "The `APPLICABLE_ROLES` table in the Information Schema provides information about user roles and their applicability. It shows which roles are granted to or are applicable for a particular user, including the role name and the grantee it applies to.",
        "simple_ddl": "CREATE TABLE APPLICABLE_ROLES (\n  GRANTEE varchar,\n  ROLE_NAME varchar,\n  IS_GRANTABLE varchar,\n  IS_DEFAULT varchar\n);"
    },
    "CHARACTER_SETS": {
        "ddl": "CREATE TEMPORARY TABLE `CHARACTER_SETS` (\n  `CHARACTER_SET_NAME` varchar(32) NOT NULL,\n  `DEFAULT_COLLATE_NAME` varchar(32) NOT NULL,\n  `DESCRIPTION` varchar(60) NOT NULL,\n  `MAXLEN` bigint(3) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "CHARACTER_SET_NAME": {
                "type": "varchar",
                "description": "Name of the character set."
            },
            "DEFAULT_COLLATE_NAME": {
                "type": "varchar",
                "description": "Name of the default collation for the character set."
            },
            "DESCRIPTION": {
                "type": "varchar",
                "description": "Description of the character set."
            },
            "MAXLEN": {
                "type": "bigint",
                "description": "Maximum length (in bytes) of a string in this character set."
            }
        },
        "description": "The `CHARACTER_SETS` table in the Information Schema provides information about available character sets in the MariaDB database. It contains details such as the character set name, default collation, description, and maximum length of characters.",
        "simple_ddl": "CREATE TABLE CHARACTER_SETS (\n  CHARACTER_SET_NAME varchar,\n  DEFAULT_COLLATE_NAME varchar,\n  DESCRIPTION varchar,\n  MAXLEN bigint\n);"
    },
    "CHECK_CONSTRAINTS": {
        "ddl": "CREATE TEMPORARY TABLE `CHECK_CONSTRAINTS` (\n  `CONSTRAINT_CATALOG` varchar(512) NOT NULL,\n  `CONSTRAINT_SCHEMA` varchar(64) NOT NULL,\n  `TABLE_NAME` varchar(64) NOT NULL,\n  `CONSTRAINT_NAME` varchar(64) NOT NULL,\n  `LEVEL` varchar(6) NOT NULL,\n  `CHECK_CLAUSE` longtext NOT NULL\n) ENGINE=Aria DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci PAGE_CHECKSUM=0",
        "columns": {
            "CONSTRAINT_CATALOG": {
                "type": "varchar",
                "description": "The catalog to which the constraint belongs, always 'def' in MariaDB"
            },
            "CONSTRAINT_SCHEMA": {
                "type": "varchar",
                "description": "The schema (database) to which the constraint belongs"
            },
            "TABLE_NAME": {
                "type": "varchar",
                "description": "The name of the table on which the constraint is defined"
            },
            "CONSTRAINT_NAME": {
                "type": "varchar",
                "description": "The name of the constraint"
            },
            "LEVEL": {
                "type": "varchar",
                "description": "Indicates whether the constraint is at the column level or table level"
            },
            "CHECK_CLAUSE": {
                "type": "longtext",
                "description": "The SQL-expression defining the constraint"
            }
        },
        "description": "The `CHECK_CONSTRAINTS` table in the Information Schema provides information about CHECK constraints on tables within the database. It lists constraints enforcing rules on columns in tables to ensure data integrity.",
        "simple_ddl": "CREATE TABLE CHECK_CONSTRAINTS (\n  CONSTRAINT_CATALOG varchar,\n  CONSTRAINT_SCHEMA varchar,\n  TABLE_NAME varchar,\n  CONSTRAINT_NAME varchar,\n  LEVEL varchar,\n  CHECK_CLAUSE longtext\n);"
    },
    "COLLATIONS": {
        "ddl": "CREATE TEMPORARY TABLE `COLLATIONS` (\n  `COLLATION_NAME` varchar(32) NOT NULL,\n  `CHARACTER_SET_NAME` varchar(32) NOT NULL,\n  `ID` bigint(11) NOT NULL,\n  `IS_DEFAULT` varchar(3) NOT NULL,\n  `IS_COMPILED` varchar(3) NOT NULL,\n  `SORTLEN` bigint(3) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "COLLATION_NAME": {
                "type": "varchar",
                "description": "The name of the collation."
            },
            "CHARACTER_SET_NAME": {
                "type": "varchar",
                "description": "The name of the character set."
            },
            "ID": {
                "type": "bigint",
                "description": "The ID of the collation."
            },
            "IS_DEFAULT": {
                "type": "varchar",
                "description": "Whether the collation is the default for its character set."
            },
            "IS_COMPILED": {
                "type": "varchar",
                "description": "Whether the collation is compiled into the server."
            },
            "SORTLEN": {
                "type": "bigint",
                "description": "The length of the sort key for the collation."
            }
        },
        "description": "The `COLLATIONS` table in the Information Schema provides information about the available character set collations within the database system. It describes each collation's character set, name, ID, and whether or not the collation is the default for its character set.",
        "simple_ddl": "CREATE TABLE COLLATIONS (\n  COLLATION_NAME varchar,\n  CHARACTER_SET_NAME varchar,\n  ID bigint,\n  IS_DEFAULT varchar,\n  IS_COMPILED varchar,\n  SORTLEN bigint\n);"
    },
    "COLLATION_CHARACTER_SET_APPLICABILITY": {
        "ddl": "CREATE TEMPORARY TABLE `COLLATION_CHARACTER_SET_APPLICABILITY` (\n  `COLLATION_NAME` varchar(32) NOT NULL,\n  `CHARACTER_SET_NAME` varchar(32) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "COLLATION_NAME": {
                "type": "varchar",
                "description": "The collation name."
            },
            "CHARACTER_SET_NAME": {
                "type": "varchar",
                "description": "The name of the character set with which the collation is associated."
            }
        },
        "description": "The `COLLATION_CHARACTER_SET_APPLICABILITY` table in the Information Schema provides information on which character sets are applicable to each collation in MariaDB. It maps each collation available in the database to its corresponding character set, aiding in character set and collation selection and compatibility.",
        "simple_ddl": "CREATE TABLE COLLATION_CHARACTER_SET_APPLICABILITY (\n  COLLATION_NAME varchar,\n  CHARACTER_SET_NAME varchar\n);"
    },
    "COLUMNS": {
        "ddl": "CREATE TEMPORARY TABLE `COLUMNS` (\n  `TABLE_CATALOG` varchar(512) NOT NULL,\n  `TABLE_SCHEMA` varchar(64) NOT NULL,\n  `TABLE_NAME` varchar(64) NOT NULL,\n  `COLUMN_NAME` varchar(64) NOT NULL,\n  `ORDINAL_POSITION` bigint(21) unsigned NOT NULL,\n  `COLUMN_DEFAULT` longtext,\n  `IS_NULLABLE` varchar(3) NOT NULL,\n  `DATA_TYPE` varchar(64) NOT NULL,\n  `CHARACTER_MAXIMUM_LENGTH` bigint(21) unsigned,\n  `CHARACTER_OCTET_LENGTH` bigint(21) unsigned,\n  `NUMERIC_PRECISION` bigint(21) unsigned,\n  `NUMERIC_SCALE` bigint(21) unsigned,\n  `DATETIME_PRECISION` bigint(21) unsigned,\n  `CHARACTER_SET_NAME` varchar(32),\n  `COLLATION_NAME` varchar(32),\n  `COLUMN_TYPE` longtext NOT NULL,\n  `COLUMN_KEY` varchar(3) NOT NULL,\n  `EXTRA` varchar(80) NOT NULL,\n  `PRIVILEGES` varchar(80) NOT NULL,\n  `COLUMN_COMMENT` varchar(1024) NOT NULL,\n  `IS_GENERATED` varchar(6) NOT NULL,\n  `GENERATION_EXPRESSION` longtext\n) ENGINE=Aria DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci PAGE_CHECKSUM=0",
        "columns": {
            "TABLE_CATALOG": {
                "type": "varchar",
                "description": "The name of the catalog to which the table containing the column belongs, always 'def' in MariaDB"
            },
            "TABLE_SCHEMA": {
                "type": "varchar",
                "description": "The name of the database(schema) to which the table with the column belongs"
            },
            "TABLE_NAME": {
                "type": "varchar",
                "description": "The name of the table to which the column belongs"
            },
            "COLUMN_NAME": {
                "type": "varchar",
                "description": "The name of the column"
            },
            "ORDINAL_POSITION": {
                "type": "bigint",
                "description": "The position of the column within the table, starting with 1"
            },
            "COLUMN_DEFAULT": {
                "type": "longtext",
                "description": "The default value of the column"
            },
            "IS_NULLABLE": {
                "type": "varchar",
                "description": "Indicates whether the column can accept NULL values ('YES' or 'NO')"
            },
            "DATA_TYPE": {
                "type": "varchar",
                "description": "The data type of the column"
            },
            "CHARACTER_MAXIMUM_LENGTH": {
                "type": "bigint",
                "description": "The maximum length of a character or text column in characters"
            },
            "CHARACTER_OCTET_LENGTH": {
                "type": "bigint",
                "description": "The maximum length of a character or text column in bytes"
            },
            "NUMERIC_PRECISION": {
                "type": "bigint",
                "description": "The precision of numeric columns (the maximum number of digits)"
            },
            "NUMERIC_SCALE": {
                "type": "bigint",
                "description": "The scale of numeric columns (the number of digits after the decimal point)"
            },
            "DATETIME_PRECISION": {
                "type": "bigint",
                "description": "The fractional seconds precision of time, datetime, and timestamp columns"
            },
            "CHARACTER_SET_NAME": {
                "type": "varchar",
                "description": "The character set for character or text columns"
            },
            "COLLATION_NAME": {
                "type": "varchar",
                "description": "The collation sequence for character or text columns"
            },
            "COLUMN_TYPE": {
                "type": "longtext",
                "description": "The column type including length, precision, or other information"
            },
            "COLUMN_KEY": {
                "type": "varchar",
                "description": "Indicates whether the column is indexed ('PRI' for Primary Key, 'UNI' for Unique Key, 'MUL' for indexed with possible duplicates)"
            },
            "EXTRA": {
                "type": "varchar",
                "description": "Additional information about the column (e.g., auto_increment for automatically incremented values)"
            },
            "PRIVILEGES": {
                "type": "varchar",
                "description": "The type of access permitted to the column (select, insert, update, references)"
            },
            "COLUMN_COMMENT": {
                "type": "varchar",
                "description": "Any comment provided for the column as metadata"
            },
            "IS_GENERATED": {
                "type": "varchar",
                "description": "Indicates whether the column is a generated column ('ALWAYS' or 'NEVER')"
            },
            "GENERATION_EXPRESSION": {
                "type": "longtext",
                "description": "For generated columns, this is the expression used to compute the column's value"
            }
        },
        "description": "The `COLUMNS` table in the Information Schema provides detailed information about each column in every table within the database. It includes data about column names, data types, default values, and whether the column is nullable, among other specifications.",
        "simple_ddl": "CREATE TABLE COLUMNS (\n  TABLE_CATALOG varchar,\n  TABLE_SCHEMA varchar,\n  TABLE_NAME varchar,\n  COLUMN_NAME varchar,\n  ORDINAL_POSITION bigint,\n  COLUMN_DEFAULT longtext,\n  IS_NULLABLE varchar,\n  DATA_TYPE varchar,\n  CHARACTER_MAXIMUM_LENGTH bigint,\n  CHARACTER_OCTET_LENGTH bigint,\n  NUMERIC_PRECISION bigint,\n  NUMERIC_SCALE bigint,\n  DATETIME_PRECISION bigint,\n  CHARACTER_SET_NAME varchar,\n  COLLATION_NAME varchar,\n  COLUMN_TYPE longtext,\n  COLUMN_KEY varchar,\n  EXTRA varchar,\n  PRIVILEGES varchar,\n  COLUMN_COMMENT varchar,\n  IS_GENERATED varchar,\n  GENERATION_EXPRESSION longtext\n);"
    },
    "COLUMN_PRIVILEGES": {
        "ddl": "CREATE TEMPORARY TABLE `COLUMN_PRIVILEGES` (\n  `GRANTEE` varchar(385) NOT NULL,\n  `TABLE_CATALOG` varchar(512) NOT NULL,\n  `TABLE_SCHEMA` varchar(64) NOT NULL,\n  `TABLE_NAME` varchar(64) NOT NULL,\n  `COLUMN_NAME` varchar(64) NOT NULL,\n  `PRIVILEGE_TYPE` varchar(64) NOT NULL,\n  `IS_GRANTABLE` varchar(3) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "GRANTEE": {
                "type": "varchar",
                "description": "The user or role to whom the privilege is granted"
            },
            "TABLE_CATALOG": {
                "type": "varchar",
                "description": "The name of the catalog to which the table with the column belongs, always 'def' in MariaDB"
            },
            "TABLE_SCHEMA": {
                "type": "varchar",
                "description": "The name of the database (schema) to which the table with the column belongs"
            },
            "TABLE_NAME": {
                "type": "varchar",
                "description": "The name of the table to which the column belongs"
            },
            "COLUMN_NAME": {
                "type": "varchar",
                "description": "The name of the column for which the privilege is granted"
            },
            "PRIVILEGE_TYPE": {
                "type": "varchar",
                "description": "The type of privilege granted on the column"
            },
            "IS_GRANTABLE": {
                "type": "varchar",
                "description": "YES if the privilege can be granted to others, otherwise NO"
            }
        },
        "description": "The `COLUMN_PRIVILEGES` table in the Information Schema provides information about column-level privileges for the database. It shows which users have specific privileges on columns within tables, helping administrators manage and audit column-level security.",
        "simple_ddl": "CREATE TABLE COLUMN_PRIVILEGES (\n  GRANTEE varchar,\n  TABLE_CATALOG varchar,\n  TABLE_SCHEMA varchar,\n  TABLE_NAME varchar,\n  COLUMN_NAME varchar,\n  PRIVILEGE_TYPE varchar,\n  IS_GRANTABLE varchar\n);"
    },
    "ENABLED_ROLES": {
        "ddl": "CREATE TEMPORARY TABLE `ENABLED_ROLES` (\n  `ROLE_NAME` varchar(128)\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "ROLE_NAME": {
                "type": "varchar",
                "description": "Name of the currently enabled role"
            }
        },
        "description": "The `ENABLED_ROLES` table in the Information Schema is used to display information about the roles that are currently enabled for the session. It lists all roles that have been activated using the `SET ROLE` statement.",
        "simple_ddl": "CREATE TABLE ENABLED_ROLES (\n  ROLE_NAME varchar\n);"
    },
    "ENGINES": {
        "ddl": "CREATE TEMPORARY TABLE `ENGINES` (\n  `ENGINE` varchar(64) NOT NULL,\n  `SUPPORT` varchar(8) NOT NULL,\n  `COMMENT` varchar(160) NOT NULL,\n  `TRANSACTIONS` varchar(3),\n  `XA` varchar(3),\n  `SAVEPOINTS` varchar(3)\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "ENGINE": {
                "type": "varchar",
                "description": "The storage engine name"
            },
            "SUPPORT": {
                "type": "varchar",
                "description": "Indicates the support status of the engine in the server, which could be 'YES', 'NO', 'DEFAULT', or 'DISABLED'"
            },
            "COMMENT": {
                "type": "varchar",
                "description": "A brief comment about the storage engine"
            },
            "TRANSACTIONS": {
                "type": "varchar",
                "description": "Whether the engine supports transactions or not"
            },
            "XA": {
                "type": "varchar",
                "description": "Whether the engine supports XA transactions or not"
            },
            "SAVEPOINTS": {
                "type": "varchar",
                "description": "Whether the engine supports savepoints and rollback to savepoints"
            }
        },
        "description": "The `ENGINES` table in the Information Schema of MariaDB provides information about the storage engines that are available in the MariaDB server. It includes details such as the engine's name, support level, whether it supports transactions, and if it is the default engine.",
        "simple_ddl": "CREATE TABLE ENGINES (\n  ENGINE varchar,\n  SUPPORT varchar,\n  COMMENT varchar,\n  TRANSACTIONS varchar,\n  XA varchar,\n  SAVEPOINTS varchar\n);"
    },
    "EVENTS": {
        "ddl": "CREATE TEMPORARY TABLE `EVENTS` (\n  `EVENT_CATALOG` varchar(64) NOT NULL,\n  `EVENT_SCHEMA` varchar(64) NOT NULL,\n  `EVENT_NAME` varchar(64) NOT NULL,\n  `DEFINER` varchar(384) NOT NULL,\n  `TIME_ZONE` varchar(64) NOT NULL,\n  `EVENT_BODY` varchar(8) NOT NULL,\n  `EVENT_DEFINITION` longtext NOT NULL,\n  `EVENT_TYPE` varchar(9) NOT NULL,\n  `EXECUTE_AT` datetime,\n  `INTERVAL_VALUE` varchar(256),\n  `INTERVAL_FIELD` varchar(18),\n  `SQL_MODE` varchar(8192) NOT NULL,\n  `STARTS` datetime,\n  `ENDS` datetime,\n  `STATUS` varchar(18) NOT NULL,\n  `ON_COMPLETION` varchar(12) NOT NULL,\n  `CREATED` datetime NOT NULL,\n  `LAST_ALTERED` datetime NOT NULL,\n  `LAST_EXECUTED` datetime,\n  `EVENT_COMMENT` varchar(64) NOT NULL,\n  `ORIGINATOR` bigint(10) NOT NULL,\n  `CHARACTER_SET_CLIENT` varchar(32) NOT NULL,\n  `COLLATION_CONNECTION` varchar(32) NOT NULL,\n  `DATABASE_COLLATION` varchar(32) NOT NULL\n) ENGINE=Aria DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci PAGE_CHECKSUM=0",
        "columns": {
            "EVENT_CATALOG": {
                "type": "varchar",
                "description": "The database catalog to which the event belongs, always 'def' in MariaDB since catalogs are not supported."
            },
            "EVENT_SCHEMA": {
                "type": "varchar",
                "description": "The name of the database (schema) to which the event belongs."
            },
            "EVENT_NAME": {
                "type": "varchar",
                "description": "The name of the event."
            },
            "DEFINER": {
                "type": "varchar",
                "description": "The account of the user who created the event, in 'user_name@host_name' format."
            },
            "TIME_ZONE": {
                "type": "varchar",
                "description": "The time zone in which the event\u2019s timing is scheduled."
            },
            "EVENT_BODY": {
                "type": "varchar",
                "description": "The type of statement the event executes, e.g., SQL."
            },
            "EVENT_DEFINITION": {
                "type": "longtext",
                "description": "The SQL statement executed by the event."
            },
            "EVENT_TYPE": {
                "type": "varchar",
                "description": "Indicates whether the event is a 'ONE TIME' event or 'RECURRING'."
            },
            "EXECUTE_AT": {
                "type": "datetime",
                "description": "For one-time events, the specific datetime when the event will execute."
            },
            "INTERVAL_VALUE": {
                "type": "varchar",
                "description": "The value of the interval for recurring events."
            },
            "INTERVAL_FIELD": {
                "type": "varchar",
                "description": "The unit of the interval for recurring events, e.g., 'DAY', 'HOUR'."
            },
            "SQL_MODE": {
                "type": "varchar",
                "description": "The SQL mode in effect when the event runs."
            },
            "STARTS": {
                "type": "datetime",
                "description": "For recurring events, the datetime when the event will start executing."
            },
            "ENDS": {
                "type": "datetime",
                "description": "For recurring events, the datetime when the event will stop executing."
            },
            "STATUS": {
                "type": "varchar",
                "description": "The status of the event, e.g., 'ENABLED', 'DISABLED'."
            },
            "ON_COMPLETION": {
                "type": "varchar",
                "description": "Determines whether the event should be dropped or preserved after its completion."
            },
            "CREATED": {
                "type": "datetime",
                "description": "The datetime when the event was created."
            },
            "LAST_ALTERED": {
                "type": "datetime",
                "description": "The datetime when the event was last altered."
            },
            "LAST_EXECUTED": {
                "type": "datetime",
                "description": "The datetime when the event was last executed."
            },
            "EVENT_COMMENT": {
                "type": "varchar",
                "description": "Any comment provided for the event."
            },
            "ORIGINATOR": {
                "type": "bigint",
                "description": "The server ID of the original MySQL server where the event was created in a replicated environment."
            },
            "CHARACTER_SET_CLIENT": {
                "type": "varchar",
                "description": "The session value of the character_set_client system variable when the event was created."
            },
            "COLLATION_CONNECTION": {
                "type": "varchar",
                "description": "The session value of the collation_connection system variable when the event was created."
            },
            "DATABASE_COLLATION": {
                "type": "varchar",
                "description": "The collation of the database (schema) to which the event belongs."
            }
        },
        "description": "The `EVENTS` table in the Information Schema is used to retrieve information about the event scheduler events within the MariaDB database. It displays various details like the event name, timing, status, type, and the SQL statement the event executes.",
        "simple_ddl": "CREATE TABLE EVENTS (\n  EVENT_CATALOG varchar,\n  EVENT_SCHEMA varchar,\n  EVENT_NAME varchar,\n  DEFINER varchar,\n  TIME_ZONE varchar,\n  EVENT_BODY varchar,\n  EVENT_DEFINITION longtext,\n  EVENT_TYPE varchar,\n  EXECUTE_AT datetime,\n  INTERVAL_VALUE varchar,\n  INTERVAL_FIELD varchar,\n  SQL_MODE varchar,\n  STARTS datetime,\n  ENDS datetime,\n  STATUS varchar,\n  ON_COMPLETION varchar,\n  CREATED datetime,\n  LAST_ALTERED datetime,\n  LAST_EXECUTED datetime,\n  EVENT_COMMENT varchar,\n  ORIGINATOR bigint,\n  CHARACTER_SET_CLIENT varchar,\n  COLLATION_CONNECTION varchar,\n  DATABASE_COLLATION varchar\n);"
    },
    "FILES": {
        "ddl": "CREATE TEMPORARY TABLE `FILES` (\n  `FILE_ID` bigint(4) NOT NULL,\n  `FILE_NAME` varchar(512),\n  `FILE_TYPE` varchar(20) NOT NULL,\n  `TABLESPACE_NAME` varchar(64),\n  `TABLE_CATALOG` varchar(64) NOT NULL,\n  `TABLE_SCHEMA` varchar(64),\n  `TABLE_NAME` varchar(64),\n  `LOGFILE_GROUP_NAME` varchar(64),\n  `LOGFILE_GROUP_NUMBER` bigint(4),\n  `ENGINE` varchar(64) NOT NULL,\n  `FULLTEXT_KEYS` varchar(64),\n  `DELETED_ROWS` bigint(4),\n  `UPDATE_COUNT` bigint(4),\n  `FREE_EXTENTS` bigint(4),\n  `TOTAL_EXTENTS` bigint(4),\n  `EXTENT_SIZE` bigint(4) NOT NULL,\n  `INITIAL_SIZE` bigint(21) unsigned,\n  `MAXIMUM_SIZE` bigint(21) unsigned,\n  `AUTOEXTEND_SIZE` bigint(21) unsigned,\n  `CREATION_TIME` datetime,\n  `LAST_UPDATE_TIME` datetime,\n  `LAST_ACCESS_TIME` datetime,\n  `RECOVER_TIME` bigint(4),\n  `TRANSACTION_COUNTER` bigint(4),\n  `VERSION` bigint(21) unsigned,\n  `ROW_FORMAT` varchar(10),\n  `TABLE_ROWS` bigint(21) unsigned,\n  `AVG_ROW_LENGTH` bigint(21) unsigned,\n  `DATA_LENGTH` bigint(21) unsigned,\n  `MAX_DATA_LENGTH` bigint(21) unsigned,\n  `INDEX_LENGTH` bigint(21) unsigned,\n  `DATA_FREE` bigint(21) unsigned,\n  `CREATE_TIME` datetime,\n  `UPDATE_TIME` datetime,\n  `CHECK_TIME` datetime,\n  `CHECKSUM` bigint(21) unsigned,\n  `STATUS` varchar(20) NOT NULL,\n  `EXTRA` varchar(255)\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "FILE_ID": {
                "type": "bigint",
                "description": "Uniquely identifies each file"
            },
            "FILE_NAME": {
                "type": "varchar",
                "description": "The name of the file including the path if applicable"
            },
            "FILE_TYPE": {
                "type": "varchar",
                "description": "The type of file (e.g., TABLE, TABLESPACE, LOGFILE, etc.)"
            },
            "TABLESPACE_NAME": {
                "type": "varchar",
                "description": "Name of the tablespace that the file belongs to"
            },
            "TABLE_CATALOG": {
                "type": "varchar",
                "description": "Always NULL in current versions of MariaDB"
            },
            "TABLE_SCHEMA": {
                "type": "varchar",
                "description": "The schema (database) name to which the table belongs"
            },
            "TABLE_NAME": {
                "type": "varchar",
                "description": "Name of the table"
            },
            "LOGFILE_GROUP_NAME": {
                "type": "varchar",
                "description": "Name of the log file group"
            },
            "LOGFILE_GROUP_NUMBER": {
                "type": "bigint",
                "description": "Number of the log file group"
            },
            "ENGINE": {
                "type": "varchar",
                "description": "The storage engine (e.g., InnoDB, MyISAM)"
            },
            "FULLTEXT_KEYS": {
                "type": "varchar",
                "description": "Not documented"
            },
            "DELETED_ROWS": {
                "type": "bigint",
                "description": "The number of deleted rows in the table"
            },
            "UPDATE_COUNT": {
                "type": "bigint",
                "description": "Not documented"
            },
            "FREE_EXTENTS": {
                "type": "bigint",
                "description": "Number of free extents"
            },
            "TOTAL_EXTENTS": {
                "type": "bigint",
                "description": "Total number of extents"
            },
            "EXTENT_SIZE": {
                "type": "bigint",
                "description": "Size of each extent"
            },
            "INITIAL_SIZE": {
                "type": "bigint",
                "description": "Initial size of the file"
            },
            "MAXIMUM_SIZE": {
                "type": "bigint",
                "description": "Maximum size the file can grow to"
            },
            "AUTOEXTEND_SIZE": {
                "type": "bigint",
                "description": "Size increments when auto-extending"
            },
            "CREATION_TIME": {
                "type": "datetime",
                "description": "When the file was created"
            },
            "LAST_UPDATE_TIME": {
                "type": "datetime",
                "description": "The last time the file was updated"
            },
            "LAST_ACCESS_TIME": {
                "type": "datetime",
                "description": "The last access time of the file"
            },
            "RECOVER_TIME": {
                "type": "bigint",
                "description": "Not documented"
            },
            "TRANSACTION_COUNTER": {
                "type": "bigint",
                "description": "Not documented"
            },
            "VERSION": {
                "type": "bigint",
                "description": "Version information for the file"
            },
            "ROW_FORMAT": {
                "type": "varchar",
                "description": "Row format of the table (e.g., Dynamic, Fixed)"
            },
            "TABLE_ROWS": {
                "type": "bigint",
                "description": "Approximate number of rows in the table"
            },
            "AVG_ROW_LENGTH": {
                "type": "bigint",
                "description": "Average length of a row in the table"
            },
            "DATA_LENGTH": {
                "type": "bigint",
                "description": "Length of the data file"
            },
            "MAX_DATA_LENGTH": {
                "type": "bigint",
                "description": "Maximum allowed data file length"
            },
            "INDEX_LENGTH": {
                "type": "bigint",
                "description": "Length of the index file"
            },
            "DATA_FREE": {
                "type": "bigint",
                "description": "Free bytes available in the data file"
            },
            "CREATE_TIME": {
                "type": "datetime",
                "description": "When the table was created"
            },
            "UPDATE_TIME": {
                "type": "datetime",
                "description": "The last time the table was updated"
            },
            "CHECK_TIME": {
                "type": "datetime",
                "description": "The last time the table was checked"
            },
            "CHECKSUM": {
                "type": "bigint",
                "description": "Checksum for the table"
            },
            "STATUS": {
                "type": "varchar",
                "description": "Status of the file (e.g., NORMAL, DELETED)"
            },
            "EXTRA": {
                "type": "varchar",
                "description": "Not documented"
            }
        },
        "description": "The `FILES` table in the Information Schema provides detailed information about all types of files used by the storage engines in MariaDB, including data files and temporary files. It is useful for monitoring and optimizing storage usage, file locations, and understanding the structure of the database's underlying file system.\n",
        "simple_ddl": "CREATE TABLE FILES (\n  FILE_ID bigint,\n  FILE_NAME varchar,\n  FILE_TYPE varchar,\n  TABLESPACE_NAME varchar,\n  TABLE_CATALOG varchar,\n  TABLE_SCHEMA varchar,\n  TABLE_NAME varchar,\n  LOGFILE_GROUP_NAME varchar,\n  LOGFILE_GROUP_NUMBER bigint,\n  ENGINE varchar,\n  FULLTEXT_KEYS varchar,\n  DELETED_ROWS bigint,\n  UPDATE_COUNT bigint,\n  FREE_EXTENTS bigint,\n  TOTAL_EXTENTS bigint,\n  EXTENT_SIZE bigint,\n  INITIAL_SIZE bigint,\n  MAXIMUM_SIZE bigint,\n  AUTOEXTEND_SIZE bigint,\n  CREATION_TIME datetime,\n  LAST_UPDATE_TIME datetime,\n  LAST_ACCESS_TIME datetime,\n  RECOVER_TIME bigint,\n  TRANSACTION_COUNTER bigint,\n  VERSION bigint,\n  ROW_FORMAT varchar,\n  TABLE_ROWS bigint,\n  AVG_ROW_LENGTH bigint,\n  DATA_LENGTH bigint,\n  MAX_DATA_LENGTH bigint,\n  INDEX_LENGTH bigint,\n  DATA_FREE bigint,\n  CREATE_TIME datetime,\n  UPDATE_TIME datetime,\n  CHECK_TIME datetime,\n  CHECKSUM bigint,\n  STATUS varchar,\n  EXTRA varchar\n);"
    },
    "GLOBAL_STATUS": {
        "ddl": "CREATE TEMPORARY TABLE `GLOBAL_STATUS` (\n  `VARIABLE_NAME` varchar(64) NOT NULL,\n  `VARIABLE_VALUE` varchar(2048) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "VARIABLE_NAME": {
                "type": "varchar",
                "description": "The name of the status variable."
            },
            "VARIABLE_VALUE": {
                "type": "varchar",
                "description": "The current value of the status variable."
            }
        },
        "description": "The `GLOBAL_STATUS` table in the Information Schema of MariaDB provides a snapshot of current global server status variables. These variables represent various counters, flags, and statistics about the server's operation, accessible at a global level across all connections.",
        "simple_ddl": "CREATE TABLE GLOBAL_STATUS (\n  VARIABLE_NAME varchar,\n  VARIABLE_VALUE varchar\n);"
    },
    "GLOBAL_VARIABLES": {
        "ddl": "CREATE TEMPORARY TABLE `GLOBAL_VARIABLES` (\n  `VARIABLE_NAME` varchar(64) NOT NULL,\n  `VARIABLE_VALUE` varchar(2048) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "VARIABLE_NAME": {
                "type": "varchar",
                "description": "The name of the system variable."
            },
            "VARIABLE_VALUE": {
                "type": "varchar",
                "description": "The current value of the system variable."
            }
        },
        "description": "The `GLOBAL_VARIABLES` table in the Information Schema provides information about the global system variables for the MariaDB server. These are the settings that affect the overall operation of the server globally, influencing behavior for all clients connected to it.",
        "simple_ddl": "CREATE TABLE GLOBAL_VARIABLES (\n  VARIABLE_NAME varchar,\n  VARIABLE_VALUE varchar\n);"
    },
    "KEYWORDS": {
        "ddl": "CREATE TEMPORARY TABLE `KEYWORDS` (\n  `WORD` varchar(64)\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "WORD": {
                "type": "varchar",
                "description": "The reserved word."
            }
        },
        "description": "The `KEYWORDS` table in the Information Schema of MariaDB provides a list of words that are reserved keywords in the SQL language for MariaDB. It helps developers and administrators to know which words should not be used as identifiers without being quoted.",
        "simple_ddl": "CREATE TABLE KEYWORDS (\n  WORD varchar\n);"
    },
    "KEY_CACHES": {
        "ddl": "CREATE TEMPORARY TABLE `KEY_CACHES` (\n  `KEY_CACHE_NAME` varchar(192) NOT NULL,\n  `SEGMENTS` int(3) unsigned,\n  `SEGMENT_NUMBER` int(3) unsigned,\n  `FULL_SIZE` bigint(21) unsigned NOT NULL,\n  `BLOCK_SIZE` bigint(21) unsigned NOT NULL,\n  `USED_BLOCKS` bigint(21) unsigned NOT NULL,\n  `UNUSED_BLOCKS` bigint(21) unsigned NOT NULL,\n  `DIRTY_BLOCKS` bigint(21) unsigned NOT NULL,\n  `READ_REQUESTS` bigint(21) unsigned NOT NULL,\n  `READS` bigint(21) unsigned NOT NULL,\n  `WRITE_REQUESTS` bigint(21) unsigned NOT NULL,\n  `WRITES` bigint(21) unsigned NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "KEY_CACHE_NAME": {
                "type": "varchar",
                "description": "The name of the key cache."
            },
            "SEGMENTS": {
                "type": "int",
                "description": "The number of segments within the key cache."
            },
            "SEGMENT_NUMBER": {
                "type": "int",
                "description": "The segment number within the key cache."
            },
            "FULL_SIZE": {
                "type": "bigint",
                "description": "The total size of the key cache in blocks."
            },
            "BLOCK_SIZE": {
                "type": "bigint",
                "description": "The size of each block within the key cache."
            },
            "USED_BLOCKS": {
                "type": "bigint",
                "description": "The number of blocks currently used within the key cache."
            },
            "UNUSED_BLOCKS": {
                "type": "bigint",
                "description": "The number of unused blocks within the key cache."
            },
            "DIRTY_BLOCKS": {
                "type": "bigint",
                "description": "The number of blocks marked as dirty within the key cache."
            },
            "READ_REQUESTS": {
                "type": "bigint",
                "description": "The number of read requests made to the key cache."
            },
            "READS": {
                "type": "bigint",
                "description": "The number of actual reads from the key cache."
            },
            "WRITE_REQUESTS": {
                "type": "bigint",
                "description": "The number of write requests made to the key cache."
            },
            "WRITES": {
                "type": "bigint",
                "description": "The number of actual writes to the key cache."
            }
        },
        "description": "The `KEY_CACHES` table in the Information Schema provides information about named key caches. It displays key cache attributes and statistics for each named key cache, helping to monitor and optimize cache performance.",
        "simple_ddl": "CREATE TABLE KEY_CACHES (\n  KEY_CACHE_NAME varchar,\n  SEGMENTS int,\n  SEGMENT_NUMBER int,\n  FULL_SIZE bigint,\n  BLOCK_SIZE bigint,\n  USED_BLOCKS bigint,\n  UNUSED_BLOCKS bigint,\n  DIRTY_BLOCKS bigint,\n  READ_REQUESTS bigint,\n  READS bigint,\n  WRITE_REQUESTS bigint,\n  WRITES bigint\n);"
    },
    "KEY_COLUMN_USAGE": {
        "ddl": "CREATE TEMPORARY TABLE `KEY_COLUMN_USAGE` (\n  `CONSTRAINT_CATALOG` varchar(512) NOT NULL,\n  `CONSTRAINT_SCHEMA` varchar(64) NOT NULL,\n  `CONSTRAINT_NAME` varchar(64) NOT NULL,\n  `TABLE_CATALOG` varchar(512) NOT NULL,\n  `TABLE_SCHEMA` varchar(64) NOT NULL,\n  `TABLE_NAME` varchar(64) NOT NULL,\n  `COLUMN_NAME` varchar(64) NOT NULL,\n  `ORDINAL_POSITION` bigint(10) NOT NULL,\n  `POSITION_IN_UNIQUE_CONSTRAINT` bigint(10),\n  `REFERENCED_TABLE_SCHEMA` varchar(64),\n  `REFERENCED_TABLE_NAME` varchar(64),\n  `REFERENCED_COLUMN_NAME` varchar(64)\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "CONSTRAINT_CATALOG": {
                "type": "varchar",
                "description": "Catalog to which the constraint belongs, always 'def'"
            },
            "CONSTRAINT_SCHEMA": {
                "type": "varchar",
                "description": "Schema (database) in which the constraint is defined"
            },
            "CONSTRAINT_NAME": {
                "type": "varchar",
                "description": "Name of the constraint"
            },
            "TABLE_CATALOG": {
                "type": "varchar",
                "description": "Catalog of the table; always 'def'"
            },
            "TABLE_SCHEMA": {
                "type": "varchar",
                "description": "Schema (database) of the table in which the column is found"
            },
            "TABLE_NAME": {
                "type": "varchar",
                "description": "Name of the table in which the column is found"
            },
            "COLUMN_NAME": {
                "type": "varchar",
                "description": "Name of the column associated with the constraint"
            },
            "ORDINAL_POSITION": {
                "type": "bigint",
                "description": "Position of the column within the constraint"
            },
            "POSITION_IN_UNIQUE_CONSTRAINT": {
                "type": "bigint",
                "description": "Position of the column in the unique constraint (NULL if not applicable)"
            },
            "REFERENCED_TABLE_SCHEMA": {
                "type": "varchar",
                "description": "Schema (database) of the referenced table (NULL if not applicable)"
            },
            "REFERENCED_TABLE_NAME": {
                "type": "varchar",
                "description": "Name of the referenced table (NULL if not applicable)"
            },
            "REFERENCED_COLUMN_NAME": {
                "type": "varchar",
                "description": "Name of the column in the referenced table (NULL if not applicable)"
            }
        },
        "description": "The `KEY_COLUMN_USAGE` table in the Information Schema of MariaDB provides detailed information about columns that are constrained by some key; this includes columns that are part of primary keys, unique keys, foreign keys, etc. It is useful for identifying relationships between tables and constraints on columns within the database schema.",
        "simple_ddl": "CREATE TABLE KEY_COLUMN_USAGE (\n  CONSTRAINT_CATALOG varchar,\n  CONSTRAINT_SCHEMA varchar,\n  CONSTRAINT_NAME varchar,\n  TABLE_CATALOG varchar,\n  TABLE_SCHEMA varchar,\n  TABLE_NAME varchar,\n  COLUMN_NAME varchar,\n  ORDINAL_POSITION bigint,\n  POSITION_IN_UNIQUE_CONSTRAINT bigint,\n  REFERENCED_TABLE_SCHEMA varchar,\n  REFERENCED_TABLE_NAME varchar,\n  REFERENCED_COLUMN_NAME varchar\n);"
    },
    "OPTIMIZER_TRACE": {
        "ddl": "CREATE TEMPORARY TABLE `OPTIMIZER_TRACE` (\n  `QUERY` longtext NOT NULL,\n  `TRACE` longtext NOT NULL,\n  `MISSING_BYTES_BEYOND_MAX_MEM_SIZE` int(20) NOT NULL,\n  `INSUFFICIENT_PRIVILEGES` tinyint(1) NOT NULL\n) ENGINE=Aria DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci PAGE_CHECKSUM=0",
        "columns": {
            "QUERY": {
                "type": "longtext",
                "description": "Stores the original query that the optimizer trace is for."
            },
            "TRACE": {
                "type": "longtext",
                "description": "Holds the JSON-formatted trace of the optimizer's decision-making process for the given query."
            },
            "MISSING_BYTES_BEYOND_MAX_MEM_SIZE": {
                "type": "int",
                "description": "Indicates the number of bytes that could not be stored in the trace because the trace exceeded the maximum allowed memory size for the optimizer trace."
            },
            "INSUFFICIENT_PRIVILEGES": {
                "type": "tinyint",
                "description": "Shows whether the trace could not be collected fully or in part because of insufficient privileges."
            }
        },
        "description": "The `OPTIMIZER_TRACE` table in the Information Schema of MariaDB provides insight into the decision-making process of the query optimizer. It logs the optimization decisions made during query execution, helping in the analysis and debugging of query performance issues.",
        "simple_ddl": "CREATE TABLE OPTIMIZER_TRACE (\n  QUERY longtext,\n  TRACE longtext,\n  MISSING_BYTES_BEYOND_MAX_MEM_SIZE int,\n  INSUFFICIENT_PRIVILEGES tinyint\n);"
    },
    "PARAMETERS": {
        "ddl": "CREATE TEMPORARY TABLE `PARAMETERS` (\n  `SPECIFIC_CATALOG` varchar(512) NOT NULL,\n  `SPECIFIC_SCHEMA` varchar(64) NOT NULL,\n  `SPECIFIC_NAME` varchar(64) NOT NULL,\n  `ORDINAL_POSITION` int(21) NOT NULL,\n  `PARAMETER_MODE` varchar(5),\n  `PARAMETER_NAME` varchar(64),\n  `DATA_TYPE` varchar(64) NOT NULL,\n  `CHARACTER_MAXIMUM_LENGTH` int(21),\n  `CHARACTER_OCTET_LENGTH` int(21),\n  `NUMERIC_PRECISION` int(21),\n  `NUMERIC_SCALE` int(21),\n  `DATETIME_PRECISION` bigint(21) unsigned,\n  `CHARACTER_SET_NAME` varchar(64),\n  `COLLATION_NAME` varchar(64),\n  `DTD_IDENTIFIER` longtext NOT NULL,\n  `ROUTINE_TYPE` varchar(9) NOT NULL\n) ENGINE=Aria DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci PAGE_CHECKSUM=0",
        "columns": {
            "SPECIFIC_CATALOG": {
                "type": "varchar",
                "description": "The name of the database (always the current database) the routine is contained in."
            },
            "SPECIFIC_SCHEMA": {
                "type": "varchar",
                "description": "The name of the schema the routine is contained in."
            },
            "SPECIFIC_NAME": {
                "type": "varchar",
                "description": "The unique name of the routine."
            },
            "ORDINAL_POSITION": {
                "type": "int",
                "description": "The position of the parameter in the routine (starts at 1)."
            },
            "PARAMETER_MODE": {
                "type": "varchar",
                "description": "The mode of the parameter: IN, OUT, or INOUT."
            },
            "PARAMETER_NAME": {
                "type": "varchar",
                "description": "The name of the parameter."
            },
            "DATA_TYPE": {
                "type": "varchar",
                "description": "The data type of the parameter."
            },
            "CHARACTER_MAXIMUM_LENGTH": {
                "type": "int",
                "description": "Maximum length in characters for character-based columns."
            },
            "CHARACTER_OCTET_LENGTH": {
                "type": "int",
                "description": "Maximum length in bytes for character- or binary-based columns."
            },
            "NUMERIC_PRECISION": {
                "type": "int",
                "description": "The precision of numeric columns."
            },
            "NUMERIC_SCALE": {
                "type": "int",
                "description": "The scale of numeric columns."
            },
            "DATETIME_PRECISION": {
                "type": "bigint",
                "description": "The fractional seconds precision of time, datetime, and timestamp columns."
            },
            "CHARACTER_SET_NAME": {
                "type": "varchar",
                "description": "The name of the character set for the column."
            },
            "COLLATION_NAME": {
                "type": "varchar",
                "description": "The name of the collation for the column."
            },
            "DTD_IDENTIFIER": {
                "type": "longtext",
                "description": "Data type descriptor for the parameter."
            },
            "ROUTINE_TYPE": {
                "type": "varchar",
                "description": "The type of routine: FUNCTION or PROCEDURE."
            }
        },
        "description": "The PARAMETERS table in the Information Schema of MariaDB provides detailed information about the parameters (arguments) of stored procedures and functions. It includes details such as the parameter name, data type, and whether it's an input or output parameter, among others.",
        "simple_ddl": "CREATE TABLE PARAMETERS (\n  SPECIFIC_CATALOG varchar,\n  SPECIFIC_SCHEMA varchar,\n  SPECIFIC_NAME varchar,\n  ORDINAL_POSITION int,\n  PARAMETER_MODE varchar,\n  PARAMETER_NAME varchar,\n  DATA_TYPE varchar,\n  CHARACTER_MAXIMUM_LENGTH int,\n  CHARACTER_OCTET_LENGTH int,\n  NUMERIC_PRECISION int,\n  NUMERIC_SCALE int,\n  DATETIME_PRECISION bigint,\n  CHARACTER_SET_NAME varchar,\n  COLLATION_NAME varchar,\n  DTD_IDENTIFIER longtext,\n  ROUTINE_TYPE varchar\n);"
    },
    "PARTITIONS": {
        "ddl": "CREATE TEMPORARY TABLE `PARTITIONS` (\n  `TABLE_CATALOG` varchar(512) NOT NULL,\n  `TABLE_SCHEMA` varchar(64) NOT NULL,\n  `TABLE_NAME` varchar(64) NOT NULL,\n  `PARTITION_NAME` varchar(64),\n  `SUBPARTITION_NAME` varchar(64),\n  `PARTITION_ORDINAL_POSITION` bigint(21) unsigned,\n  `SUBPARTITION_ORDINAL_POSITION` bigint(21) unsigned,\n  `PARTITION_METHOD` varchar(18),\n  `SUBPARTITION_METHOD` varchar(12),\n  `PARTITION_EXPRESSION` longtext,\n  `SUBPARTITION_EXPRESSION` longtext,\n  `PARTITION_DESCRIPTION` longtext,\n  `TABLE_ROWS` bigint(21) unsigned NOT NULL,\n  `AVG_ROW_LENGTH` bigint(21) unsigned NOT NULL,\n  `DATA_LENGTH` bigint(21) unsigned NOT NULL,\n  `MAX_DATA_LENGTH` bigint(21) unsigned,\n  `INDEX_LENGTH` bigint(21) unsigned NOT NULL,\n  `DATA_FREE` bigint(21) unsigned NOT NULL,\n  `CREATE_TIME` datetime,\n  `UPDATE_TIME` datetime,\n  `CHECK_TIME` datetime,\n  `CHECKSUM` bigint(21) unsigned,\n  `PARTITION_COMMENT` varchar(80) NOT NULL,\n  `NODEGROUP` varchar(12) NOT NULL,\n  `TABLESPACE_NAME` varchar(64)\n) ENGINE=Aria DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci PAGE_CHECKSUM=0",
        "columns": {
            "TABLE_CATALOG": {
                "type": "varchar",
                "description": "Database catalog to which the partition belongs, always 'def'"
            },
            "TABLE_SCHEMA": {
                "type": "varchar",
                "description": "Name of the schema that the partitioned table is in"
            },
            "TABLE_NAME": {
                "type": "varchar",
                "description": "Name of the partitioned table"
            },
            "PARTITION_NAME": {
                "type": "varchar",
                "description": "Name of the partition"
            },
            "SUBPARTITION_NAME": {
                "type": "varchar",
                "description": "Name of the subpartition"
            },
            "PARTITION_ORDINAL_POSITION": {
                "type": "bigint",
                "description": "Ordinal position of the partition within the table"
            },
            "SUBPARTITION_ORDINAL_POSITION": {
                "type": "bigint",
                "description": "Ordinal position of the subpartition within the parent partition"
            },
            "PARTITION_METHOD": {
                "type": "varchar",
                "description": "Method used for partitioning ('RANGE', 'LIST', 'HASH', 'KEY', etc.)"
            },
            "SUBPARTITION_METHOD": {
                "type": "varchar",
                "description": "Method used for subpartitioning"
            },
            "PARTITION_EXPRESSION": {
                "type": "longtext",
                "description": "Expression used for partitioning"
            },
            "SUBPARTITION_EXPRESSION": {
                "type": "longtext",
                "description": "Expression used for subpartitioning"
            },
            "PARTITION_DESCRIPTION": {
                "type": "longtext",
                "description": "Description of the partition"
            },
            "TABLE_ROWS": {
                "type": "bigint",
                "description": "Estimated number of rows in the partition"
            },
            "AVG_ROW_LENGTH": {
                "type": "bigint",
                "description": "Average length of a row in the partition, in bytes"
            },
            "DATA_LENGTH": {
                "type": "bigint",
                "description": "Total length of the data file for the partition, in bytes"
            },
            "MAX_DATA_LENGTH": {
                "type": "bigint",
                "description": "Maximum data length allowed for the partition, in bytes"
            },
            "INDEX_LENGTH": {
                "type": "bigint",
                "description": "Total length of the index file for the partition, in bytes"
            },
            "DATA_FREE": {
                "type": "bigint",
                "description": "Number of allocated but unused bytes in the partition"
            },
            "CREATE_TIME": {
                "type": "datetime",
                "description": "Timestamp of the partition's creation"
            },
            "UPDATE_TIME": {
                "type": "datetime",
                "description": "Timestamp of the last update to the partition"
            },
            "CHECK_TIME": {
                "type": "datetime",
                "description": "Timestamp of the last check of the partition"
            },
            "CHECKSUM": {
                "type": "bigint",
                "description": "Checksum for the partition"
            },
            "PARTITION_COMMENT": {
                "type": "varchar",
                "description": "Any comment provided for the partition"
            },
            "NODEGROUP": {
                "type": "varchar",
                "description": "Nodegroup ID for the partition if using MySQL Cluster"
            },
            "TABLESPACE_NAME": {
                "type": "varchar",
                "description": "Tablespace in which the partition is stored"
            }
        },
        "description": "The `PARTITIONS` table in the Information Schema provides metadata about the partitions of tables in a database. It includes details such as partition names, methods, expressions, and storage engine information for each partition.",
        "simple_ddl": "CREATE TABLE PARTITIONS (\n  TABLE_CATALOG varchar,\n  TABLE_SCHEMA varchar,\n  TABLE_NAME varchar,\n  PARTITION_NAME varchar,\n  SUBPARTITION_NAME varchar,\n  PARTITION_ORDINAL_POSITION bigint,\n  SUBPARTITION_ORDINAL_POSITION bigint,\n  PARTITION_METHOD varchar,\n  SUBPARTITION_METHOD varchar,\n  PARTITION_EXPRESSION longtext,\n  SUBPARTITION_EXPRESSION longtext,\n  PARTITION_DESCRIPTION longtext,\n  TABLE_ROWS bigint,\n  AVG_ROW_LENGTH bigint,\n  DATA_LENGTH bigint,\n  MAX_DATA_LENGTH bigint,\n  INDEX_LENGTH bigint,\n  DATA_FREE bigint,\n  CREATE_TIME datetime,\n  UPDATE_TIME datetime,\n  CHECK_TIME datetime,\n  CHECKSUM bigint,\n  PARTITION_COMMENT varchar,\n  NODEGROUP varchar,\n  TABLESPACE_NAME varchar\n);"
    },
    "PLUGINS": {
        "ddl": "CREATE TEMPORARY TABLE `PLUGINS` (\n  `PLUGIN_NAME` varchar(64) NOT NULL,\n  `PLUGIN_VERSION` varchar(20) NOT NULL,\n  `PLUGIN_STATUS` varchar(16) NOT NULL,\n  `PLUGIN_TYPE` varchar(80) NOT NULL,\n  `PLUGIN_TYPE_VERSION` varchar(20) NOT NULL,\n  `PLUGIN_LIBRARY` varchar(64),\n  `PLUGIN_LIBRARY_VERSION` varchar(20),\n  `PLUGIN_AUTHOR` varchar(64),\n  `PLUGIN_DESCRIPTION` longtext,\n  `PLUGIN_LICENSE` varchar(80) NOT NULL,\n  `LOAD_OPTION` varchar(64) NOT NULL,\n  `PLUGIN_MATURITY` varchar(12) NOT NULL,\n  `PLUGIN_AUTH_VERSION` varchar(80)\n) ENGINE=Aria DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci PAGE_CHECKSUM=0",
        "columns": {
            "PLUGIN_NAME": {
                "type": "varchar",
                "description": "The name of the plugin"
            },
            "PLUGIN_VERSION": {
                "type": "varchar",
                "description": "Version information of the plugin"
            },
            "PLUGIN_STATUS": {
                "type": "varchar",
                "description": "Status of the plugin (e.g., ACTIVE, INACTIVE)"
            },
            "PLUGIN_TYPE": {
                "type": "varchar",
                "description": "Type of the plugin (e.g., STORAGE ENGINE, FUNCTION)"
            },
            "PLUGIN_TYPE_VERSION": {
                "type": "varchar",
                "description": "Version of the plugin type"
            },
            "PLUGIN_LIBRARY": {
                "type": "varchar",
                "description": "Name of the library file associated with the plugin"
            },
            "PLUGIN_LIBRARY_VERSION": {
                "type": "varchar",
                "description": "Version of the library file"
            },
            "PLUGIN_AUTHOR": {
                "type": "varchar",
                "description": "Name of the author of the plugin"
            },
            "PLUGIN_DESCRIPTION": {
                "type": "longtext",
                "description": "Description of what the plugin does"
            },
            "PLUGIN_LICENSE": {
                "type": "varchar",
                "description": "License type under which the plugin is released"
            },
            "LOAD_OPTION": {
                "type": "varchar",
                "description": "Indicates how the plugin is loaded (e.g., ON STARTUP, DEMAND)"
            },
            "PLUGIN_MATURITY": {
                "type": "varchar",
                "description": "Maturity level of the plugin (e.g., STABLE, BETA, EXPERIMENTAL)"
            },
            "PLUGIN_AUTH_VERSION": {
                "type": "varchar",
                "description": "Version of the plugin authorization/authentication mechanism"
            }
        },
        "description": "The `PLUGINS` table in the Information Schema provides information about the plugins that are installed in the MariaDB server. It includes details such as the plugin name, version, status (active or inactive), type, and library it's associated with, facilitating the management and understanding of server extensions.",
        "simple_ddl": "CREATE TABLE PLUGINS (\n  PLUGIN_NAME varchar,\n  PLUGIN_VERSION varchar,\n  PLUGIN_STATUS varchar,\n  PLUGIN_TYPE varchar,\n  PLUGIN_TYPE_VERSION varchar,\n  PLUGIN_LIBRARY varchar,\n  PLUGIN_LIBRARY_VERSION varchar,\n  PLUGIN_AUTHOR varchar,\n  PLUGIN_DESCRIPTION longtext,\n  PLUGIN_LICENSE varchar,\n  LOAD_OPTION varchar,\n  PLUGIN_MATURITY varchar,\n  PLUGIN_AUTH_VERSION varchar\n);"
    },
    "PROCESSLIST": {
        "ddl": "CREATE TEMPORARY TABLE `PROCESSLIST` (\n  `ID` bigint(4) NOT NULL,\n  `USER` varchar(128) NOT NULL,\n  `HOST` varchar(64) NOT NULL,\n  `DB` varchar(64),\n  `COMMAND` varchar(16) NOT NULL,\n  `TIME` int(7) NOT NULL,\n  `STATE` varchar(64),\n  `INFO` longtext,\n  `TIME_MS` decimal(22,3) NOT NULL,\n  `STAGE` tinyint(2) NOT NULL,\n  `MAX_STAGE` tinyint(2) NOT NULL,\n  `PROGRESS` decimal(7,3) NOT NULL,\n  `MEMORY_USED` bigint(7) NOT NULL,\n  `MAX_MEMORY_USED` bigint(7) NOT NULL,\n  `EXAMINED_ROWS` int(7) NOT NULL,\n  `QUERY_ID` bigint(4) NOT NULL,\n  `INFO_BINARY` blob,\n  `TID` bigint(4) NOT NULL\n) ENGINE=Aria DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci PAGE_CHECKSUM=0",
        "columns": {
            "ID": {
                "type": "bigint",
                "description": "The connection or thread identifier"
            },
            "USER": {
                "type": "varchar",
                "description": "The MariaDB user who issued the statement"
            },
            "HOST": {
                "type": "varchar",
                "description": "The host name of the client issuing the command"
            },
            "DB": {
                "type": "varchar",
                "description": "The default database for the connection, if one exists"
            },
            "COMMAND": {
                "type": "varchar",
                "description": "The type of command the thread is executing"
            },
            "TIME": {
                "type": "int",
                "description": "The time in seconds the thread has been in its current state"
            },
            "STATE": {
                "type": "varchar",
                "description": "An action, event, or state that indicates what the thread is doing"
            },
            "INFO": {
                "type": "longtext",
                "description": "The statement the thread is executing, text format"
            },
            "TIME_MS": {
                "type": "decimal",
                "description": "The time in milliseconds the thread has been in its current state"
            },
            "STAGE": {
                "type": "tinyint",
                "description": "Current stage of the command execution in progress"
            },
            "MAX_STAGE": {
                "type": "tinyint",
                "description": "Maximum number of stages required for command execution"
            },
            "PROGRESS": {
                "type": "decimal",
                "description": "Percentage of work completed for the current stage"
            },
            "MEMORY_USED": {
                "type": "bigint",
                "description": "Amount of memory currently being used by the thread"
            },
            "MAX_MEMORY_USED": {
                "type": "bigint",
                "description": "Maximum amount of memory used during the lifespan of the thread"
            },
            "EXAMINED_ROWS": {
                "type": "int",
                "description": "Number of rows examined by the current query"
            },
            "QUERY_ID": {
                "type": "bigint",
                "description": "Unique identifier for the query being executed"
            },
            "INFO_BINARY": {
                "type": "blob",
                "description": "Binary version of the INFO column if the statement is non-text or too long"
            },
            "TID": {
                "type": "bigint",
                "description": "Thread ID of the specific process"
            }
        },
        "description": "The `PROCESSLIST` table within the Information Schema of MariaDB provides real-time information on currently running processes (queries) on the database server. It is useful for identifying and analyzing currently executing queries, including their state, time, user, and the SQL command they are executing.",
        "simple_ddl": "CREATE TABLE PROCESSLIST (\n  ID bigint,\n  USER varchar,\n  HOST varchar,\n  DB varchar,\n  COMMAND varchar,\n  TIME int,\n  STATE varchar,\n  INFO longtext,\n  TIME_MS decimal,\n  STAGE tinyint,\n  MAX_STAGE tinyint,\n  PROGRESS decimal,\n  MEMORY_USED bigint,\n  MAX_MEMORY_USED bigint,\n  EXAMINED_ROWS int,\n  QUERY_ID bigint,\n  INFO_BINARY blob,\n  TID bigint\n);"
    },
    "PROFILING": {
        "ddl": "CREATE TEMPORARY TABLE `PROFILING` (\n  `QUERY_ID` int(20) NOT NULL,\n  `SEQ` int(20) NOT NULL,\n  `STATE` varchar(30) NOT NULL,\n  `DURATION` decimal(9,6) NOT NULL,\n  `CPU_USER` decimal(9,6),\n  `CPU_SYSTEM` decimal(9,6),\n  `CONTEXT_VOLUNTARY` int(20),\n  `CONTEXT_INVOLUNTARY` int(20),\n  `BLOCK_OPS_IN` int(20),\n  `BLOCK_OPS_OUT` int(20),\n  `MESSAGES_SENT` int(20),\n  `MESSAGES_RECEIVED` int(20),\n  `PAGE_FAULTS_MAJOR` int(20),\n  `PAGE_FAULTS_MINOR` int(20),\n  `SWAPS` int(20),\n  `SOURCE_FUNCTION` varchar(30),\n  `SOURCE_FILE` varchar(20),\n  `SOURCE_LINE` int(20)\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "QUERY_ID": {
                "type": "int",
                "description": "The identifier for the query in the profiling context"
            },
            "SEQ": {
                "type": "int",
                "description": "Sequence number of the state change"
            },
            "STATE": {
                "type": "varchar",
                "description": "Current state of the profiled query"
            },
            "DURATION": {
                "type": "decimal",
                "description": "Time spent in the current state, in seconds"
            },
            "CPU_USER": {
                "type": "decimal",
                "description": "User CPU time used"
            },
            "CPU_SYSTEM": {
                "type": "decimal",
                "description": "System CPU time used"
            },
            "CONTEXT_VOLUNTARY": {
                "type": "int",
                "description": "Number of voluntary context switches"
            },
            "CONTEXT_INVOLUNTARY": {
                "type": "int",
                "description": "Number of involuntary context switches"
            },
            "BLOCK_OPS_IN": {
                "type": "int",
                "description": "Number of block input operations"
            },
            "BLOCK_OPS_OUT": {
                "type": "int",
                "description": "Number of block output operations"
            },
            "MESSAGES_SENT": {
                "type": "int",
                "description": "Number of messages sent"
            },
            "MESSAGES_RECEIVED": {
                "type": "int",
                "description": "Number of messages received"
            },
            "PAGE_FAULTS_MAJOR": {
                "type": "int",
                "description": "Number of major page faults"
            },
            "PAGE_FAULTS_MINOR": {
                "type": "int",
                "description": "Number of minor page faults"
            },
            "SWAPS": {
                "type": "int",
                "description": "Number of swaps"
            },
            "SOURCE_FUNCTION": {
                "type": "varchar",
                "description": "Name of the source function issuing the query"
            },
            "SOURCE_FILE": {
                "type": "varchar",
                "description": "Name of the source file issuing the query"
            },
            "SOURCE_LINE": {
                "type": "int",
                "description": "Line number in the source file"
            }
        },
        "description": "The `PROFILING` table in the Information Schema of MariaDB stores performance profiling data for queries executed during the current session. It helps in analyzing and debugging performance issues by providing detailed timing and resource usage statistics for each query stage.",
        "simple_ddl": "CREATE TABLE PROFILING (\n  QUERY_ID int,\n  SEQ int,\n  STATE varchar,\n  DURATION decimal,\n  CPU_USER decimal,\n  CPU_SYSTEM decimal,\n  CONTEXT_VOLUNTARY int,\n  CONTEXT_INVOLUNTARY int,\n  BLOCK_OPS_IN int,\n  BLOCK_OPS_OUT int,\n  MESSAGES_SENT int,\n  MESSAGES_RECEIVED int,\n  PAGE_FAULTS_MAJOR int,\n  PAGE_FAULTS_MINOR int,\n  SWAPS int,\n  SOURCE_FUNCTION varchar,\n  SOURCE_FILE varchar,\n  SOURCE_LINE int\n);"
    },
    "REFERENTIAL_CONSTRAINTS": {
        "ddl": "CREATE TEMPORARY TABLE `REFERENTIAL_CONSTRAINTS` (\n  `CONSTRAINT_CATALOG` varchar(512) NOT NULL,\n  `CONSTRAINT_SCHEMA` varchar(64) NOT NULL,\n  `CONSTRAINT_NAME` varchar(64) NOT NULL,\n  `UNIQUE_CONSTRAINT_CATALOG` varchar(512) NOT NULL,\n  `UNIQUE_CONSTRAINT_SCHEMA` varchar(64) NOT NULL,\n  `UNIQUE_CONSTRAINT_NAME` varchar(64),\n  `MATCH_OPTION` varchar(64) NOT NULL,\n  `UPDATE_RULE` varchar(64) NOT NULL,\n  `DELETE_RULE` varchar(64) NOT NULL,\n  `TABLE_NAME` varchar(64) NOT NULL,\n  `REFERENCED_TABLE_NAME` varchar(64)\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "CONSTRAINT_CATALOG": {
                "type": "varchar",
                "description": "The name of the catalog to which the constraint belongs; always def in MariaDB."
            },
            "CONSTRAINT_SCHEMA": {
                "type": "varchar",
                "description": "The name of the database (schema) to which the constraint belongs."
            },
            "CONSTRAINT_NAME": {
                "type": "varchar",
                "description": "The name of the constraint."
            },
            "UNIQUE_CONSTRAINT_CATALOG": {
                "type": "varchar",
                "description": "The name of the catalog to which the unique constraint belongs; always def in MariaDB."
            },
            "UNIQUE_CONSTRAINT_SCHEMA": {
                "type": "varchar",
                "description": "The name of the schema to which the unique constraint belongs."
            },
            "UNIQUE_CONSTRAINT_NAME": {
                "type": "varchar",
                "description": "The name of the unique constraint."
            },
            "MATCH_OPTION": {
                "type": "varchar",
                "description": "How columns in a foreign key constraint are matched with columns in the referenced table; always NONE in MariaDB."
            },
            "UPDATE_RULE": {
                "type": "varchar",
                "description": "The action the database should take on update operations to the foreign key."
            },
            "DELETE_RULE": {
                "type": "varchar",
                "description": "The action the database should take on delete operations to the foreign key."
            },
            "TABLE_NAME": {
                "type": "varchar",
                "description": "The name of the table with the constraint."
            },
            "REFERENCED_TABLE_NAME": {
                "type": "varchar",
                "description": "The name of the table referenced by the constraint."
            }
        },
        "description": "The `REFERENTIAL_CONSTRAINTS` table in the Information Schema of MariaDB provides details pertaining to foreign keys within the database. It particularly includes information on the constraints' names, the source and target tables, and the update and delete rules governing these relationships.",
        "simple_ddl": "CREATE TABLE REFERENTIAL_CONSTRAINTS (\n  CONSTRAINT_CATALOG varchar,\n  CONSTRAINT_SCHEMA varchar,\n  CONSTRAINT_NAME varchar,\n  UNIQUE_CONSTRAINT_CATALOG varchar,\n  UNIQUE_CONSTRAINT_SCHEMA varchar,\n  UNIQUE_CONSTRAINT_NAME varchar,\n  MATCH_OPTION varchar,\n  UPDATE_RULE varchar,\n  DELETE_RULE varchar,\n  TABLE_NAME varchar,\n  REFERENCED_TABLE_NAME varchar\n);"
    },
    "ROUTINES": {
        "ddl": "CREATE TEMPORARY TABLE `ROUTINES` (\n  `SPECIFIC_NAME` varchar(64) NOT NULL,\n  `ROUTINE_CATALOG` varchar(512) NOT NULL,\n  `ROUTINE_SCHEMA` varchar(64) NOT NULL,\n  `ROUTINE_NAME` varchar(64) NOT NULL,\n  `ROUTINE_TYPE` varchar(13) NOT NULL,\n  `DATA_TYPE` varchar(64) NOT NULL,\n  `CHARACTER_MAXIMUM_LENGTH` int(21),\n  `CHARACTER_OCTET_LENGTH` int(21),\n  `NUMERIC_PRECISION` int(21),\n  `NUMERIC_SCALE` int(21),\n  `DATETIME_PRECISION` bigint(21) unsigned,\n  `CHARACTER_SET_NAME` varchar(64),\n  `COLLATION_NAME` varchar(64),\n  `DTD_IDENTIFIER` longtext,\n  `ROUTINE_BODY` varchar(8) NOT NULL,\n  `ROUTINE_DEFINITION` longtext,\n  `EXTERNAL_NAME` varchar(64),\n  `EXTERNAL_LANGUAGE` varchar(64),\n  `PARAMETER_STYLE` varchar(8) NOT NULL,\n  `IS_DETERMINISTIC` varchar(3) NOT NULL,\n  `SQL_DATA_ACCESS` varchar(64) NOT NULL,\n  `SQL_PATH` varchar(64),\n  `SECURITY_TYPE` varchar(7) NOT NULL,\n  `CREATED` datetime NOT NULL,\n  `LAST_ALTERED` datetime NOT NULL,\n  `SQL_MODE` varchar(8192) NOT NULL,\n  `ROUTINE_COMMENT` longtext NOT NULL,\n  `DEFINER` varchar(384) NOT NULL,\n  `CHARACTER_SET_CLIENT` varchar(32) NOT NULL,\n  `COLLATION_CONNECTION` varchar(32) NOT NULL,\n  `DATABASE_COLLATION` varchar(32) NOT NULL\n) ENGINE=Aria DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci PAGE_CHECKSUM=0",
        "columns": {
            "SPECIFIC_NAME": {
                "type": "varchar",
                "description": "A unique name for the routine, differentiating it from others in a schema"
            },
            "ROUTINE_CATALOG": {
                "type": "varchar",
                "description": "The name of the catalog to which the routine belongs; always def in MySQL"
            },
            "ROUTINE_SCHEMA": {
                "type": "varchar",
                "description": "The name of the schema to which the routine belongs"
            },
            "ROUTINE_NAME": {
                "type": "varchar",
                "description": "The name of the routine"
            },
            "ROUTINE_TYPE": {
                "type": "varchar",
                "description": "The type of the routine, can be either PROCEDURE or FUNCTION"
            },
            "DATA_TYPE": {
                "type": "varchar",
                "description": "Data type of the routine's return value (for functions)"
            },
            "CHARACTER_MAXIMUM_LENGTH": {
                "type": "int",
                "description": "Maximum length for character string that the function returns (for functions)"
            },
            "CHARACTER_OCTET_LENGTH": {
                "type": "int",
                "description": "Maximum length in octets for a character string that the function returns, considering character set"
            },
            "NUMERIC_PRECISION": {
                "type": "int",
                "description": "Numeric precision of the routine\u2019s return value (for functions)"
            },
            "NUMERIC_SCALE": {
                "type": "int",
                "description": "Digits to the right of the decimal point in the routine\u2019s return value (for functions)"
            },
            "DATETIME_PRECISION": {
                "type": "bigint",
                "description": "Fractional seconds precision of the routine\u2019s return value if it's a date or time data type (for functions)"
            },
            "CHARACTER_SET_NAME": {
                "type": "varchar",
                "description": "Character set for the return value of the function"
            },
            "COLLATION_NAME": {
                "type": "varchar",
                "description": "Collation for the return value of the function"
            },
            "DTD_IDENTIFIER": {
                "type": "longtext",
                "description": "Data type descriptor for the routine\u2019s return value (for functions)"
            },
            "ROUTINE_BODY": {
                "type": "varchar",
                "description": "Whether the routine has an SQL or an external body"
            },
            "ROUTINE_DEFINITION": {
                "type": "longtext",
                "description": "Definition of the routine as provided by the creator"
            },
            "EXTERNAL_NAME": {
                "type": "varchar",
                "description": "Name of the external application that provides the routine, if it's an external routine"
            },
            "EXTERNAL_LANGUAGE": {
                "type": "varchar",
                "description": "The language in which the external routine is written"
            },
            "PARAMETER_STYLE": {
                "type": "varchar",
                "description": "Indicates whether the routine uses SQL or JAVA parameter style"
            },
            "IS_DETERMINISTIC": {
                "type": "varchar",
                "description": "YES if the routine always produces the same result given the same inputs; otherwise NO"
            },
            "SQL_DATA_ACCESS": {
                "type": "varchar",
                "description": "Kind of data access the routine needs (e.g., READS SQL DATA, MODIFIES SQL DATA)"
            },
            "SQL_PATH": {
                "type": "varchar",
                "description": "Null for MySQL, as it does not support the feature"
            },
            "SECURITY_TYPE": {
                "type": "varchar",
                "description": "Defines the security context in which the routine is executed (INVOKER, DEFINER)"
            },
            "CREATED": {
                "type": "datetime",
                "description": "Timestamp when the routine was created"
            },
            "LAST_ALTERED": {
                "type": "datetime",
                "description": "Timestamp of the routine\u2019s last modification"
            },
            "SQL_MODE": {
                "type": "varchar",
                "description": "SQL mode in effect when the routine was created"
            },
            "ROUTINE_COMMENT": {
                "type": "longtext",
                "description": "Comment provided by its creator"
            },
            "DEFINER": {
                "type": "varchar",
                "description": "Account that created the routine"
            },
            "CHARACTER_SET_CLIENT": {
                "type": "varchar",
                "description": "Session value of character_set_client when the routine was created"
            },
            "COLLATION_CONNECTION": {
                "type": "varchar",
                "description": "Session value of collation_connection when the routine was created"
            },
            "DATABASE_COLLATION": {
                "type": "varchar",
                "description": "Collation of the database containing the routine"
            }
        },
        "description": "The `ROUTINES` table in the Information Schema provides information about stored routines in the database, which includes stored procedures and functions. It contains details like the routine name, routine type (procedure or function), the SQL data access method, and the security type, among others, useful for understanding and managing these routines.",
        "simple_ddl": "CREATE TABLE ROUTINES (\n  SPECIFIC_NAME varchar,\n  ROUTINE_CATALOG varchar,\n  ROUTINE_SCHEMA varchar,\n  ROUTINE_NAME varchar,\n  ROUTINE_TYPE varchar,\n  DATA_TYPE varchar,\n  CHARACTER_MAXIMUM_LENGTH int,\n  CHARACTER_OCTET_LENGTH int,\n  NUMERIC_PRECISION int,\n  NUMERIC_SCALE int,\n  DATETIME_PRECISION bigint,\n  CHARACTER_SET_NAME varchar,\n  COLLATION_NAME varchar,\n  DTD_IDENTIFIER longtext,\n  ROUTINE_BODY varchar,\n  ROUTINE_DEFINITION longtext,\n  EXTERNAL_NAME varchar,\n  EXTERNAL_LANGUAGE varchar,\n  PARAMETER_STYLE varchar,\n  IS_DETERMINISTIC varchar,\n  SQL_DATA_ACCESS varchar,\n  SQL_PATH varchar,\n  SECURITY_TYPE varchar,\n  CREATED datetime,\n  LAST_ALTERED datetime,\n  SQL_MODE varchar,\n  ROUTINE_COMMENT longtext,\n  DEFINER varchar,\n  CHARACTER_SET_CLIENT varchar,\n  COLLATION_CONNECTION varchar,\n  DATABASE_COLLATION varchar\n);"
    },
    "SCHEMATA": {
        "ddl": "CREATE TEMPORARY TABLE `SCHEMATA` (\n  `CATALOG_NAME` varchar(512) NOT NULL,\n  `SCHEMA_NAME` varchar(64) NOT NULL,\n  `DEFAULT_CHARACTER_SET_NAME` varchar(32) NOT NULL,\n  `DEFAULT_COLLATION_NAME` varchar(32) NOT NULL,\n  `SQL_PATH` varchar(512),\n  `SCHEMA_COMMENT` varchar(1024) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "CATALOG_NAME": {
                "type": "varchar",
                "description": "The name of the catalog. Always 'def' in MariaDB since it does not support catalogs like some other databases."
            },
            "SCHEMA_NAME": {
                "type": "varchar",
                "description": "The name of the schema (database)."
            },
            "DEFAULT_CHARACTER_SET_NAME": {
                "type": "varchar",
                "description": "The default character set name for the schema."
            },
            "DEFAULT_COLLATION_NAME": {
                "type": "varchar",
                "description": "The default collation name for the schema."
            },
            "SQL_PATH": {
                "type": "varchar",
                "description": "Reserved for future use. Always NULL in MariaDB."
            },
            "SCHEMA_COMMENT": {
                "type": "varchar",
                "description": "Comments about the schema."
            }
        },
        "description": "The `SCHEMATA` table in the Information Schema provides essential information about all databases (schemata) on the MariaDB server. It includes details like the database name, default character set, and collation settings, aiding in database management and configuration.",
        "simple_ddl": "CREATE TABLE SCHEMATA (\n  CATALOG_NAME varchar,\n  SCHEMA_NAME varchar,\n  DEFAULT_CHARACTER_SET_NAME varchar,\n  DEFAULT_COLLATION_NAME varchar,\n  SQL_PATH varchar,\n  SCHEMA_COMMENT varchar\n);"
    },
    "SCHEMA_PRIVILEGES": {
        "ddl": "CREATE TEMPORARY TABLE `SCHEMA_PRIVILEGES` (\n  `GRANTEE` varchar(385) NOT NULL,\n  `TABLE_CATALOG` varchar(512) NOT NULL,\n  `TABLE_SCHEMA` varchar(64) NOT NULL,\n  `PRIVILEGE_TYPE` varchar(64) NOT NULL,\n  `IS_GRANTABLE` varchar(3) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "GRANTEE": {
                "type": "varchar",
                "description": "The user or role to whom the privilege is granted"
            },
            "TABLE_CATALOG": {
                "type": "varchar",
                "description": "The name of the catalog to which the privilege refers, always 'def' in MariaDB"
            },
            "TABLE_SCHEMA": {
                "type": "varchar",
                "description": "The name of the database (schema) to which the privilege refers"
            },
            "PRIVILEGE_TYPE": {
                "type": "varchar",
                "description": "The type of privilege granted"
            },
            "IS_GRANTABLE": {
                "type": "varchar",
                "description": "Whether the grantee can grant this privilege to others"
            }
        },
        "description": "The `SCHEMA_PRIVILEGES` table in the Information Schema of MariaDB provides information about schema (database) level privileges. It shows the privileges granted to specific users or user groups on specific schemata (databases).",
        "simple_ddl": "CREATE TABLE SCHEMA_PRIVILEGES (\n  GRANTEE varchar,\n  TABLE_CATALOG varchar,\n  TABLE_SCHEMA varchar,\n  PRIVILEGE_TYPE varchar,\n  IS_GRANTABLE varchar\n);"
    },
    "SESSION_STATUS": {
        "ddl": "CREATE TEMPORARY TABLE `SESSION_STATUS` (\n  `VARIABLE_NAME` varchar(64) NOT NULL,\n  `VARIABLE_VALUE` varchar(2048) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "VARIABLE_NAME": {
                "type": "varchar",
                "description": "The name of the status variable."
            },
            "VARIABLE_VALUE": {
                "type": "varchar",
                "description": "The current value of the status variable."
            }
        },
        "description": "The `SESSION_STATUS` table in the Information Schema provides a snapshot of the status variables for the current session. These include counters, flags, and statistics about server operations, helping in performance monitoring and database tuning.",
        "simple_ddl": "CREATE TABLE SESSION_STATUS (\n  VARIABLE_NAME varchar,\n  VARIABLE_VALUE varchar\n);"
    },
    "SESSION_VARIABLES": {
        "ddl": "CREATE TEMPORARY TABLE `SESSION_VARIABLES` (\n  `VARIABLE_NAME` varchar(64) NOT NULL,\n  `VARIABLE_VALUE` varchar(2048) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "VARIABLE_NAME": {
                "type": "varchar",
                "description": "The name of the session variable"
            },
            "VARIABLE_VALUE": {
                "type": "varchar",
                "description": "The current value of the session variable"
            }
        },
        "description": "The `SESSION_VARIABLES` table in the Information Schema provides information about the current session's system variables. It displays both the variable names and their respective values for the ongoing session, offering a detailed view of the session's operational parameters and settings.",
        "simple_ddl": "CREATE TABLE SESSION_VARIABLES (\n  VARIABLE_NAME varchar,\n  VARIABLE_VALUE varchar\n);"
    },
    "STATISTICS": {
        "ddl": "CREATE TEMPORARY TABLE `STATISTICS` (\n  `TABLE_CATALOG` varchar(512) NOT NULL,\n  `TABLE_SCHEMA` varchar(64) NOT NULL,\n  `TABLE_NAME` varchar(64) NOT NULL,\n  `NON_UNIQUE` bigint(1) NOT NULL,\n  `INDEX_SCHEMA` varchar(64) NOT NULL,\n  `INDEX_NAME` varchar(64) NOT NULL,\n  `SEQ_IN_INDEX` bigint(2) NOT NULL,\n  `COLUMN_NAME` varchar(64) NOT NULL,\n  `COLLATION` varchar(1),\n  `CARDINALITY` bigint(21),\n  `SUB_PART` bigint(3),\n  `PACKED` varchar(10),\n  `NULLABLE` varchar(3) NOT NULL,\n  `INDEX_TYPE` varchar(16) NOT NULL,\n  `COMMENT` varchar(16),\n  `INDEX_COMMENT` varchar(1024) NOT NULL,\n  `IGNORED` varchar(3) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "TABLE_CATALOG": {
                "type": "varchar",
                "description": "The name of the catalog to which the table with the index belongs, always def"
            },
            "TABLE_SCHEMA": {
                "type": "varchar",
                "description": "The name of the schema (database) to which the table with the index belongs"
            },
            "TABLE_NAME": {
                "type": "varchar",
                "description": "The name of the table on which the index is defined"
            },
            "NON_UNIQUE": {
                "type": "bigint",
                "description": "0 if the index cannot contain duplicates, 1 if it can"
            },
            "INDEX_SCHEMA": {
                "type": "varchar",
                "description": "The name of the schema (database) to which the index belongs"
            },
            "INDEX_NAME": {
                "type": "varchar",
                "description": "The name of the index"
            },
            "SEQ_IN_INDEX": {
                "type": "bigint",
                "description": "The position of the column in the index, starting with 1"
            },
            "COLUMN_NAME": {
                "type": "varchar",
                "description": "The name of the column included in the index"
            },
            "COLLATION": {
                "type": "varchar",
                "description": "How the column is sorted in the index. 'A' is ascending, 'D' is descending, NULL means not sorted"
            },
            "CARDINALITY": {
                "type": "bigint",
                "description": "An estimate of the number of unique values in the index"
            },
            "SUB_PART": {
                "type": "bigint",
                "description": "The number of indexed characters if the column is only partly indexed, NULL for entire column"
            },
            "PACKED": {
                "type": "varchar",
                "description": "Indicates if the key is packed, NULL if it is not"
            },
            "NULLABLE": {
                "type": "varchar",
                "description": "YES if the column can contain NULLs, NO if it cannot"
            },
            "INDEX_TYPE": {
                "type": "varchar",
                "description": "The type of the index (BTREE, FULLTEXT, HASH, RTREE)"
            },
            "COMMENT": {
                "type": "varchar",
                "description": "Information about the index not described in other columns"
            },
            "INDEX_COMMENT": {
                "type": "varchar",
                "description": "A comment provided for the index"
            },
            "IGNORED": {
                "type": "varchar",
                "description": "Whether the index is ignored"
            }
        },
        "description": "The `STATISTICS` table in the Information Schema of MariaDB provides metadata about table indexes. It includes details about each index, such as the table name, column names, whether the index is unique, and its sequence in the index.",
        "simple_ddl": "CREATE TABLE STATISTICS (\n  TABLE_CATALOG varchar,\n  TABLE_SCHEMA varchar,\n  TABLE_NAME varchar,\n  NON_UNIQUE bigint,\n  INDEX_SCHEMA varchar,\n  INDEX_NAME varchar,\n  SEQ_IN_INDEX bigint,\n  COLUMN_NAME varchar,\n  COLLATION varchar,\n  CARDINALITY bigint,\n  SUB_PART bigint,\n  PACKED varchar,\n  NULLABLE varchar,\n  INDEX_TYPE varchar,\n  COMMENT varchar,\n  INDEX_COMMENT varchar,\n  IGNORED varchar\n);"
    },
    "SQL_FUNCTIONS": {
        "ddl": "CREATE TEMPORARY TABLE `SQL_FUNCTIONS` (\n  `FUNCTION` varchar(64)\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "FUNCTION": {
                "type": "varchar",
                "description": "The name of the SQL function."
            }
        },
        "description": "The `SQL_FUNCTIONS` table in the Information Schema provides a list of SQL functions that are available in MariaDB. It includes information such as the function name and its description, helping users to understand the functionalities offered by various built-in SQL functions.",
        "simple_ddl": "CREATE TABLE SQL_FUNCTIONS (\n  FUNCTION varchar\n);"
    },
    "SYSTEM_VARIABLES": {
        "ddl": "CREATE TEMPORARY TABLE `SYSTEM_VARIABLES` (\n  `VARIABLE_NAME` varchar(64) NOT NULL,\n  `SESSION_VALUE` varchar(2048),\n  `GLOBAL_VALUE` varchar(2048),\n  `GLOBAL_VALUE_ORIGIN` varchar(64) NOT NULL,\n  `DEFAULT_VALUE` varchar(2048),\n  `VARIABLE_SCOPE` varchar(64) NOT NULL,\n  `VARIABLE_TYPE` varchar(64) NOT NULL,\n  `VARIABLE_COMMENT` varchar(2048) NOT NULL,\n  `NUMERIC_MIN_VALUE` varchar(21),\n  `NUMERIC_MAX_VALUE` varchar(21),\n  `NUMERIC_BLOCK_SIZE` varchar(21),\n  `ENUM_VALUE_LIST` longtext,\n  `READ_ONLY` varchar(3) NOT NULL,\n  `COMMAND_LINE_ARGUMENT` varchar(64),\n  `GLOBAL_VALUE_PATH` varchar(2048)\n) ENGINE=Aria DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci PAGE_CHECKSUM=0",
        "columns": {
            "VARIABLE_NAME": {
                "type": "varchar",
                "description": "The name of the system variable"
            },
            "SESSION_VALUE": {
                "type": "varchar",
                "description": "The current session value of the system variable"
            },
            "GLOBAL_VALUE": {
                "type": "varchar",
                "description": "The current global value of the system variable"
            },
            "GLOBAL_VALUE_ORIGIN": {
                "type": "varchar",
                "description": "Indicates how the global value was set (e.g., COMPILE TIME, EXPLICIT, AUTO)"
            },
            "DEFAULT_VALUE": {
                "type": "varchar",
                "description": "The default value of the system variable"
            },
            "VARIABLE_SCOPE": {
                "type": "varchar",
                "description": "Indicates the scope of the variable (e.g., GLOBAL, SESSION)"
            },
            "VARIABLE_TYPE": {
                "type": "varchar",
                "description": "The data type of the system variable (e.g., BOOLEAN, INTEGER, STRING)"
            },
            "VARIABLE_COMMENT": {
                "type": "varchar",
                "description": "A comment or description of the system variable"
            },
            "NUMERIC_MIN_VALUE": {
                "type": "varchar",
                "description": "The minimum numeric value for the variable, if applicable"
            },
            "NUMERIC_MAX_VALUE": {
                "type": "varchar",
                "description": "The maximum numeric value for the variable, if applicable"
            },
            "NUMERIC_BLOCK_SIZE": {
                "type": "varchar",
                "description": "The block size for setting numeric variables, if applicable"
            },
            "ENUM_VALUE_LIST": {
                "type": "longtext",
                "description": "A list of valid values for ENUM type variables"
            },
            "READ_ONLY": {
                "type": "varchar",
                "description": "Indicates whether the variable is read-only"
            },
            "COMMAND_LINE_ARGUMENT": {
                "type": "varchar",
                "description": "The command line argument that can set the variable, if applicable"
            },
            "GLOBAL_VALUE_PATH": {
                "type": "varchar",
                "description": "The path to the variable value in the global settings, if applicable"
            }
        },
        "description": "The `SYSTEM_VARIABLES` table in the Information Schema provides information about the system variables of the MariaDB server. It includes details such as the variable name, its current value, and potentially its default value, making it useful for troubleshooting and configuring the server.",
        "simple_ddl": "CREATE TABLE SYSTEM_VARIABLES (\n  VARIABLE_NAME varchar,\n  SESSION_VALUE varchar,\n  GLOBAL_VALUE varchar,\n  GLOBAL_VALUE_ORIGIN varchar,\n  DEFAULT_VALUE varchar,\n  VARIABLE_SCOPE varchar,\n  VARIABLE_TYPE varchar,\n  VARIABLE_COMMENT varchar,\n  NUMERIC_MIN_VALUE varchar,\n  NUMERIC_MAX_VALUE varchar,\n  NUMERIC_BLOCK_SIZE varchar,\n  ENUM_VALUE_LIST longtext,\n  READ_ONLY varchar,\n  COMMAND_LINE_ARGUMENT varchar,\n  GLOBAL_VALUE_PATH varchar\n);"
    },
    "TABLES": {
        "ddl": "CREATE TEMPORARY TABLE `TABLES` (\n  `TABLE_CATALOG` varchar(512) NOT NULL,\n  `TABLE_SCHEMA` varchar(64) NOT NULL,\n  `TABLE_NAME` varchar(64) NOT NULL,\n  `TABLE_TYPE` varchar(64) NOT NULL,\n  `ENGINE` varchar(64),\n  `VERSION` bigint(21) unsigned,\n  `ROW_FORMAT` varchar(10),\n  `TABLE_ROWS` bigint(21) unsigned,\n  `AVG_ROW_LENGTH` bigint(21) unsigned,\n  `DATA_LENGTH` bigint(21) unsigned,\n  `MAX_DATA_LENGTH` bigint(21) unsigned,\n  `INDEX_LENGTH` bigint(21) unsigned,\n  `DATA_FREE` bigint(21) unsigned,\n  `AUTO_INCREMENT` bigint(21) unsigned,\n  `CREATE_TIME` datetime,\n  `UPDATE_TIME` datetime,\n  `CHECK_TIME` datetime,\n  `TABLE_COLLATION` varchar(32),\n  `CHECKSUM` bigint(21) unsigned,\n  `CREATE_OPTIONS` varchar(2048),\n  `TABLE_COMMENT` varchar(2048) NOT NULL,\n  `MAX_INDEX_LENGTH` bigint(21) unsigned,\n  `TEMPORARY` varchar(1)\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "TABLE_CATALOG": {
                "type": "varchar",
                "description": "The catalog to which the table belongs; always 'def' in MariaDB."
            },
            "TABLE_SCHEMA": {
                "type": "varchar",
                "description": "Name of the database (schema) to which the table belongs."
            },
            "TABLE_NAME": {
                "type": "varchar",
                "description": "Name of the table."
            },
            "TABLE_TYPE": {
                "type": "varchar",
                "description": "Type of table, such as BASE TABLE for a standard table or VIEW for a view."
            },
            "ENGINE": {
                "type": "varchar",
                "description": "Storage engine for the table (e.g., InnoDB, MyISAM)."
            },
            "VERSION": {
                "type": "bigint",
                "description": "Version number of the table's .frm file."
            },
            "ROW_FORMAT": {
                "type": "varchar",
                "description": "Row format used by the storage engine (e.g., Dynamic, Fixed)."
            },
            "TABLE_ROWS": {
                "type": "bigint",
                "description": "Estimated number of rows in the table."
            },
            "AVG_ROW_LENGTH": {
                "type": "bigint",
                "description": "Average length of the rows in the table."
            },
            "DATA_LENGTH": {
                "type": "bigint",
                "description": "Length (in bytes) of the data file for the table. Databse Size is derived using this column."
            },
            "MAX_DATA_LENGTH": {
                "type": "bigint",
                "description": "Maximum length (in bytes) that the data file for the table can reach."
            },
            "INDEX_LENGTH": {
                "type": "bigint",
                "description": "Length (in bytes) of the index file for the table. Database Size is derived using this column."
            },
            "DATA_FREE": {
                "type": "bigint",
                "description": "Number of allocated but unused bytes in the table."
            },
            "AUTO_INCREMENT": {
                "type": "bigint",
                "description": "Current AUTO_INCREMENT value for the table."
            },
            "CREATE_TIME": {
                "type": "datetime",
                "description": "Timestamp for when the table was created."
            },
            "UPDATE_TIME": {
                "type": "datetime",
                "description": "Timestamp for the last update to the table."
            },
            "CHECK_TIME": {
                "type": "datetime",
                "description": "Timestamp for the last check (optimization, repair) of the table."
            },
            "TABLE_COLLATION": {
                "type": "varchar",
                "description": "Collation setting for the table."
            },
            "CHECKSUM": {
                "type": "bigint",
                "description": "Checksum value for the table content."
            },
            "CREATE_OPTIONS": {
                "type": "varchar",
                "description": "Any additional options used during table creation."
            },
            "TABLE_COMMENT": {
                "type": "varchar",
                "description": "Comments about the table."
            },
            "MAX_INDEX_LENGTH": {
                "type": "bigint",
                "description": "Maximum length (in bytes) for the indexes on the table."
            },
            "TEMPORARY": {
                "type": "varchar",
                "description": "Indicates whether the table is a temporary table."
            }
        },
        "description": "The `TABLES` table in the Information Schema provides information like names, engines they use, size of the tables etc about tables in databases. Size of database is derived using this table. It includes details like table type, engine used, version, row format, table rows, data length, index length, creation time, update time, and more for each table.",
        "simple_ddl": "CREATE TABLE TABLES (\n  TABLE_CATALOG varchar,\n  TABLE_SCHEMA varchar,\n  TABLE_NAME varchar,\n  TABLE_TYPE varchar,\n  ENGINE varchar,\n  VERSION bigint,\n  ROW_FORMAT varchar,\n  TABLE_ROWS bigint,\n  AVG_ROW_LENGTH bigint,\n  DATA_LENGTH bigint,\n  MAX_DATA_LENGTH bigint,\n  INDEX_LENGTH bigint,\n  DATA_FREE bigint,\n  AUTO_INCREMENT bigint,\n  CREATE_TIME datetime,\n  UPDATE_TIME datetime,\n  CHECK_TIME datetime,\n  TABLE_COLLATION varchar,\n  CHECKSUM bigint,\n  CREATE_OPTIONS varchar,\n  TABLE_COMMENT varchar,\n  MAX_INDEX_LENGTH bigint,\n  TEMPORARY varchar\n);"
    },
    "TABLESPACES": {
        "ddl": "CREATE TEMPORARY TABLE `TABLESPACES` (\n  `TABLESPACE_NAME` varchar(64) NOT NULL,\n  `ENGINE` varchar(64) NOT NULL,\n  `TABLESPACE_TYPE` varchar(64),\n  `LOGFILE_GROUP_NAME` varchar(64),\n  `EXTENT_SIZE` bigint(21) unsigned,\n  `AUTOEXTEND_SIZE` bigint(21) unsigned,\n  `MAXIMUM_SIZE` bigint(21) unsigned,\n  `NODEGROUP_ID` bigint(21) unsigned,\n  `TABLESPACE_COMMENT` varchar(2048)\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "TABLESPACE_NAME": {
                "type": "varchar",
                "description": "The name of the tablespace."
            },
            "ENGINE": {
                "type": "varchar",
                "description": "The name of the storage engine that uses the tablespace."
            },
            "TABLESPACE_TYPE": {
                "type": "varchar",
                "description": "The type of the tablespace."
            },
            "LOGFILE_GROUP_NAME": {
                "type": "varchar",
                "description": "The name of the logfile group that the tablespace belongs to."
            },
            "EXTENT_SIZE": {
                "type": "bigint",
                "description": "The size, in bytes, of each extent in the tablespace."
            },
            "AUTOEXTEND_SIZE": {
                "type": "bigint",
                "description": "The size in bytes by which the tablespace is automatically extended when it becomes full."
            },
            "MAXIMUM_SIZE": {
                "type": "bigint",
                "description": "The maximum size, in bytes, to which the tablespace can automatically extend."
            },
            "NODEGROUP_ID": {
                "type": "bigint",
                "description": "The nodegroup ID for the tablespace."
            },
            "TABLESPACE_COMMENT": {
                "type": "varchar",
                "description": "A comment provided for the tablespace."
            }
        },
        "description": "The `TABLESPACES` table in the Information Schema provides detailed information about all tablespaces in a database environment. It includes data such as the tablespace name, engine, and additional attributes which are crucial for managing storage and schema organization in MariaDB.",
        "simple_ddl": "CREATE TABLE TABLESPACES (\n  TABLESPACE_NAME varchar,\n  ENGINE varchar,\n  TABLESPACE_TYPE varchar,\n  LOGFILE_GROUP_NAME varchar,\n  EXTENT_SIZE bigint,\n  AUTOEXTEND_SIZE bigint,\n  MAXIMUM_SIZE bigint,\n  NODEGROUP_ID bigint,\n  TABLESPACE_COMMENT varchar\n);"
    },
    "TABLE_CONSTRAINTS": {
        "ddl": "CREATE TEMPORARY TABLE `TABLE_CONSTRAINTS` (\n  `CONSTRAINT_CATALOG` varchar(512) NOT NULL,\n  `CONSTRAINT_SCHEMA` varchar(64) NOT NULL,\n  `CONSTRAINT_NAME` varchar(64) NOT NULL,\n  `TABLE_SCHEMA` varchar(64) NOT NULL,\n  `TABLE_NAME` varchar(64) NOT NULL,\n  `CONSTRAINT_TYPE` varchar(64) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "CONSTRAINT_CATALOG": {
                "type": "varchar",
                "description": "The name of the catalog to which the constraint belongs, always 'def' in MariaDB since catalogs are not supported."
            },
            "CONSTRAINT_SCHEMA": {
                "type": "varchar",
                "description": "The name of the schema (database) to which the constraint belongs."
            },
            "CONSTRAINT_NAME": {
                "type": "varchar",
                "description": "The name of the constraint."
            },
            "TABLE_SCHEMA": {
                "type": "varchar",
                "description": "The name of the schema (database) to which the table with the constraint belongs."
            },
            "TABLE_NAME": {
                "type": "varchar",
                "description": "The name of the table to which the constraint is applied."
            },
            "CONSTRAINT_TYPE": {
                "type": "varchar",
                "description": "The type of constraint applied (e.g., PRIMARY KEY, UNIQUE, FOREIGN KEY)."
            }
        },
        "description": "The `TABLE_CONSTRAINTS` table in the Information Schema provides details about the constraints defined on tables within the database. Specifically, it lists constraints like primary keys, foreign keys, unique constraints, and checks, identifying each by table and constraint type.",
        "simple_ddl": "CREATE TABLE TABLE_CONSTRAINTS (\n  CONSTRAINT_CATALOG varchar,\n  CONSTRAINT_SCHEMA varchar,\n  CONSTRAINT_NAME varchar,\n  TABLE_SCHEMA varchar,\n  TABLE_NAME varchar,\n  CONSTRAINT_TYPE varchar\n);"
    },
    "TABLE_PRIVILEGES": {
        "ddl": "CREATE TEMPORARY TABLE `TABLE_PRIVILEGES` (\n  `GRANTEE` varchar(385) NOT NULL,\n  `TABLE_CATALOG` varchar(512) NOT NULL,\n  `TABLE_SCHEMA` varchar(64) NOT NULL,\n  `TABLE_NAME` varchar(64) NOT NULL,\n  `PRIVILEGE_TYPE` varchar(64) NOT NULL,\n  `IS_GRANTABLE` varchar(3) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "GRANTEE": {
                "type": "varchar",
                "description": "The user or role to whom the privilege is granted"
            },
            "TABLE_CATALOG": {
                "type": "varchar",
                "description": "The name of the catalog to which the table belongs, always 'def' in MariaDB"
            },
            "TABLE_SCHEMA": {
                "type": "varchar",
                "description": "The name of the database (schema) that contains the table"
            },
            "TABLE_NAME": {
                "type": "varchar",
                "description": "The name of the table to which the privilege refers"
            },
            "PRIVILEGE_TYPE": {
                "type": "varchar",
                "description": "The type of privilege granted on the table, e.g., SELECT, INSERT"
            },
            "IS_GRANTABLE": {
                "type": "varchar",
                "description": "Whether the grantee can grant the privilege to others ('YES' or 'NO')"
            }
        },
        "description": "The `TABLE_PRIVILEGES` table in the MariaDB Information Schema provides information about all table-level privileges granted to users. It displays the database, table name, grantee, and the specific privileges granted on that table.",
        "simple_ddl": "CREATE TABLE TABLE_PRIVILEGES (\n  GRANTEE varchar,\n  TABLE_CATALOG varchar,\n  TABLE_SCHEMA varchar,\n  TABLE_NAME varchar,\n  PRIVILEGE_TYPE varchar,\n  IS_GRANTABLE varchar\n);"
    },
    "TRIGGERS": {
        "ddl": "CREATE TEMPORARY TABLE `TRIGGERS` (\n  `TRIGGER_CATALOG` varchar(512) NOT NULL,\n  `TRIGGER_SCHEMA` varchar(64) NOT NULL,\n  `TRIGGER_NAME` varchar(64) NOT NULL,\n  `EVENT_MANIPULATION` varchar(6) NOT NULL,\n  `EVENT_OBJECT_CATALOG` varchar(512) NOT NULL,\n  `EVENT_OBJECT_SCHEMA` varchar(64) NOT NULL,\n  `EVENT_OBJECT_TABLE` varchar(64) NOT NULL,\n  `ACTION_ORDER` bigint(4) NOT NULL,\n  `ACTION_CONDITION` longtext,\n  `ACTION_STATEMENT` longtext NOT NULL,\n  `ACTION_ORIENTATION` varchar(9) NOT NULL,\n  `ACTION_TIMING` varchar(6) NOT NULL,\n  `ACTION_REFERENCE_OLD_TABLE` varchar(64),\n  `ACTION_REFERENCE_NEW_TABLE` varchar(64),\n  `ACTION_REFERENCE_OLD_ROW` varchar(3) NOT NULL,\n  `ACTION_REFERENCE_NEW_ROW` varchar(3) NOT NULL,\n  `CREATED` datetime(2),\n  `SQL_MODE` varchar(8192) NOT NULL,\n  `DEFINER` varchar(384) NOT NULL,\n  `CHARACTER_SET_CLIENT` varchar(32) NOT NULL,\n  `COLLATION_CONNECTION` varchar(32) NOT NULL,\n  `DATABASE_COLLATION` varchar(32) NOT NULL\n) ENGINE=Aria DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci PAGE_CHECKSUM=0",
        "columns": {
            "TRIGGER_CATALOG": {
                "type": "varchar",
                "description": "The name of the catalog to which the trigger belongs, always 'def'"
            },
            "TRIGGER_SCHEMA": {
                "type": "varchar",
                "description": "The name of the schema (database) to which the trigger belongs"
            },
            "TRIGGER_NAME": {
                "type": "varchar",
                "description": "The name of the trigger"
            },
            "EVENT_MANIPULATION": {
                "type": "varchar",
                "description": "The type of operation that fires the trigger (INSERT, UPDATE, DELETE)"
            },
            "EVENT_OBJECT_CATALOG": {
                "type": "varchar",
                "description": "The name of the catalog to which the object triggering the event belongs, always 'def'"
            },
            "EVENT_OBJECT_SCHEMA": {
                "type": "varchar",
                "description": "The name of the schema (database) to which the object triggering the event belongs"
            },
            "EVENT_OBJECT_TABLE": {
                "type": "varchar",
                "description": "The name of the table to which the event that fires the trigger applies"
            },
            "ACTION_ORDER": {
                "type": "bigint",
                "description": "The ordinal position of the action in relation to other actions on the same event"
            },
            "ACTION_CONDITION": {
                "type": "longtext",
                "description": "For future use, currently always NULL in MariaDB"
            },
            "ACTION_STATEMENT": {
                "type": "longtext",
                "description": "The statement executed when the trigger is activated"
            },
            "ACTION_ORIENTATION": {
                "type": "varchar",
                "description": "Whether the action statement applies to each row affected or to the statement as a whole (ROW or STATEMENT)"
            },
            "ACTION_TIMING": {
                "type": "varchar",
                "description": "When the trigger event will fire (BEFORE or AFTER)"
            },
            "ACTION_REFERENCE_OLD_TABLE": {
                "type": "varchar",
                "description": "For triggers on UPDATE statements, this shows the name of the virtual table holding old row values"
            },
            "ACTION_REFERENCE_NEW_TABLE": {
                "type": "varchar",
                "description": "For triggers on UPDATE statements, this shows the name of the virtual table holding new row values"
            },
            "ACTION_REFERENCE_OLD_ROW": {
                "type": "varchar",
                "description": "For row-level triggers, the name of the virtual table holding the old row values"
            },
            "ACTION_REFERENCE_NEW_ROW": {
                "type": "varchar",
                "description": "For row-level triggers, the name of the virtual table holding the new row values"
            },
            "CREATED": {
                "type": "datetime",
                "description": "The date and time when the trigger was created"
            },
            "SQL_MODE": {
                "type": "varchar",
                "description": "The SQL mode in effect when the trigger was created"
            },
            "DEFINER": {
                "type": "varchar",
                "description": "The account of the user who created the trigger"
            },
            "CHARACTER_SET_CLIENT": {
                "type": "varchar",
                "description": "The session character set in use when the trigger was created"
            },
            "COLLATION_CONNECTION": {
                "type": "varchar",
                "description": "The session collation in use when the trigger was created"
            },
            "DATABASE_COLLATION": {
                "type": "varchar",
                "description": "The collation of the database when the trigger was created"
            }
        },
        "description": "The `TRIGGERS` table in the Information Schema provides information about triggers defined in the database. It includes details such as the trigger name, the timing of the trigger (BEFORE or AFTER), the event that activates the trigger (INSERT, UPDATE, DELETE), and the table on which the trigger is defined.",
        "simple_ddl": "CREATE TABLE TRIGGERS (\n  TRIGGER_CATALOG varchar,\n  TRIGGER_SCHEMA varchar,\n  TRIGGER_NAME varchar,\n  EVENT_MANIPULATION varchar,\n  EVENT_OBJECT_CATALOG varchar,\n  EVENT_OBJECT_SCHEMA varchar,\n  EVENT_OBJECT_TABLE varchar,\n  ACTION_ORDER bigint,\n  ACTION_CONDITION longtext,\n  ACTION_STATEMENT longtext,\n  ACTION_ORIENTATION varchar,\n  ACTION_TIMING varchar,\n  ACTION_REFERENCE_OLD_TABLE varchar,\n  ACTION_REFERENCE_NEW_TABLE varchar,\n  ACTION_REFERENCE_OLD_ROW varchar,\n  ACTION_REFERENCE_NEW_ROW varchar,\n  CREATED datetime,\n  SQL_MODE varchar,\n  DEFINER varchar,\n  CHARACTER_SET_CLIENT varchar,\n  COLLATION_CONNECTION varchar,\n  DATABASE_COLLATION varchar\n);"
    },
    "USER_PRIVILEGES": {
        "ddl": "CREATE TEMPORARY TABLE `USER_PRIVILEGES` (\n  `GRANTEE` varchar(385) NOT NULL,\n  `TABLE_CATALOG` varchar(512) NOT NULL,\n  `PRIVILEGE_TYPE` varchar(64) NOT NULL,\n  `IS_GRANTABLE` varchar(3) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "GRANTEE": {
                "type": "varchar",
                "description": "The user or role the privileges are granted to, including the host from which they connect"
            },
            "TABLE_CATALOG": {
                "type": "varchar",
                "description": "The name of the catalog to which the privilege refers, always 'def' in MariaDB"
            },
            "PRIVILEGE_TYPE": {
                "type": "varchar",
                "description": "The specific privilege granted to the user or role"
            },
            "IS_GRANTABLE": {
                "type": "varchar",
                "description": "Whether the grantee can grant the privilege to others ('YES' or 'NO')"
            }
        },
        "description": "The `USER_PRIVILEGES` table in the Information Schema provides a list of the global privileges granted to users. It shows essential privilege details such as the grantee, privilege type, and whether it is grantable.",
        "simple_ddl": "CREATE TABLE USER_PRIVILEGES (\n  GRANTEE varchar,\n  TABLE_CATALOG varchar,\n  PRIVILEGE_TYPE varchar,\n  IS_GRANTABLE varchar\n);"
    },
    "VIEWS": {
        "ddl": "CREATE TEMPORARY TABLE `VIEWS` (\n  `TABLE_CATALOG` varchar(512) NOT NULL,\n  `TABLE_SCHEMA` varchar(64) NOT NULL,\n  `TABLE_NAME` varchar(64) NOT NULL,\n  `VIEW_DEFINITION` longtext NOT NULL,\n  `CHECK_OPTION` varchar(8) NOT NULL,\n  `IS_UPDATABLE` varchar(3) NOT NULL,\n  `DEFINER` varchar(384) NOT NULL,\n  `SECURITY_TYPE` varchar(7) NOT NULL,\n  `CHARACTER_SET_CLIENT` varchar(32) NOT NULL,\n  `COLLATION_CONNECTION` varchar(32) NOT NULL,\n  `ALGORITHM` varchar(10) NOT NULL\n) ENGINE=Aria DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci PAGE_CHECKSUM=0",
        "columns": {
            "TABLE_CATALOG": {
                "type": "varchar",
                "description": "The catalog to which the view belongs; always 'def' in MariaDB."
            },
            "TABLE_SCHEMA": {
                "type": "varchar",
                "description": "The schema (database) to which the view belongs."
            },
            "TABLE_NAME": {
                "type": "varchar",
                "description": "The name of the view."
            },
            "VIEW_DEFINITION": {
                "type": "longtext",
                "description": "The SQL statement used to create the view."
            },
            "CHECK_OPTION": {
                "type": "varchar",
                "description": "Indicates the level of check option enforced: NONE, CASCADED, or LOCAL."
            },
            "IS_UPDATABLE": {
                "type": "varchar",
                "description": "Whether the view is updatable or not."
            },
            "DEFINER": {
                "type": "varchar",
                "description": "The user who created the view."
            },
            "SECURITY_TYPE": {
                "type": "varchar",
                "description": "Defines the security context in which the view is executed: DEFINER or INVOKER."
            },
            "CHARACTER_SET_CLIENT": {
                "type": "varchar",
                "description": "The character set in use by the client when the view was created."
            },
            "COLLATION_CONNECTION": {
                "type": "varchar",
                "description": "The collation in use by the connection when the view was created."
            },
            "ALGORITHM": {
                "type": "varchar",
                "description": "The algorithm used by the view: UNDEFINED, MERGE, or TEMPTABLE."
            }
        },
        "description": "The `VIEWS` table in the Information Schema provides information about all views in a database. It includes details like the view's name, the SQL security characteristic, and the statement used to define the view.",
        "simple_ddl": "CREATE TABLE VIEWS (\n  TABLE_CATALOG varchar,\n  TABLE_SCHEMA varchar,\n  TABLE_NAME varchar,\n  VIEW_DEFINITION longtext,\n  CHECK_OPTION varchar,\n  IS_UPDATABLE varchar,\n  DEFINER varchar,\n  SECURITY_TYPE varchar,\n  CHARACTER_SET_CLIENT varchar,\n  COLLATION_CONNECTION varchar,\n  ALGORITHM varchar\n);"
    },
    "CLIENT_STATISTICS": {
        "ddl": "CREATE TEMPORARY TABLE `CLIENT_STATISTICS` (\n  `CLIENT` varchar(64) NOT NULL,\n  `TOTAL_CONNECTIONS` bigint(21) NOT NULL,\n  `CONCURRENT_CONNECTIONS` bigint(21) NOT NULL,\n  `CONNECTED_TIME` bigint(21) NOT NULL,\n  `BUSY_TIME` double NOT NULL,\n  `CPU_TIME` double NOT NULL,\n  `BYTES_RECEIVED` bigint(21) NOT NULL,\n  `BYTES_SENT` bigint(21) NOT NULL,\n  `BINLOG_BYTES_WRITTEN` bigint(21) NOT NULL,\n  `ROWS_READ` bigint(21) NOT NULL,\n  `ROWS_SENT` bigint(21) NOT NULL,\n  `ROWS_DELETED` bigint(21) NOT NULL,\n  `ROWS_INSERTED` bigint(21) NOT NULL,\n  `ROWS_UPDATED` bigint(21) NOT NULL,\n  `SELECT_COMMANDS` bigint(21) NOT NULL,\n  `UPDATE_COMMANDS` bigint(21) NOT NULL,\n  `OTHER_COMMANDS` bigint(21) NOT NULL,\n  `COMMIT_TRANSACTIONS` bigint(21) NOT NULL,\n  `ROLLBACK_TRANSACTIONS` bigint(21) NOT NULL,\n  `DENIED_CONNECTIONS` bigint(21) NOT NULL,\n  `LOST_CONNECTIONS` bigint(21) NOT NULL,\n  `ACCESS_DENIED` bigint(21) NOT NULL,\n  `EMPTY_QUERIES` bigint(21) NOT NULL,\n  `TOTAL_SSL_CONNECTIONS` bigint(21) unsigned NOT NULL,\n  `MAX_STATEMENT_TIME_EXCEEDED` bigint(21) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "CLIENT": {
                "type": "varchar",
                "description": "The name of the client."
            },
            "TOTAL_CONNECTIONS": {
                "type": "bigint",
                "description": "The total number of connections made by this client."
            },
            "CONCURRENT_CONNECTIONS": {
                "type": "bigint",
                "description": "The maximum number of connections the client had open at the same time."
            },
            "CONNECTED_TIME": {
                "type": "bigint",
                "description": "The total time, in seconds, that the client was connected."
            },
            "BUSY_TIME": {
                "type": "double",
                "description": "The total time, in seconds, that MariaDB server spent processing statements for the client."
            },
            "CPU_TIME": {
                "type": "double",
                "description": "The total CPU time, in seconds, used by statements from the client."
            },
            "BYTES_RECEIVED": {
                "type": "bigint",
                "description": "The total number of bytes received from the client."
            },
            "BYTES_SENT": {
                "type": "bigint",
                "description": "The total number of bytes sent to the client."
            },
            "BINLOG_BYTES_WRITTEN": {
                "type": "bigint",
                "description": "The total number of bytes written to the binary log from the client's statements."
            },
            "ROWS_READ": {
                "type": "bigint",
                "description": "The total number of rows read by the client."
            },
            "ROWS_SENT": {
                "type": "bigint",
                "description": "The total number of rows sent to the client."
            },
            "ROWS_DELETED": {
                "type": "bigint",
                "description": "The total number of rows deleted by the client."
            },
            "ROWS_INSERTED": {
                "type": "bigint",
                "description": "The total number of rows inserted by the client."
            },
            "ROWS_UPDATED": {
                "type": "bigint",
                "description": "The total number of rows updated by the client."
            },
            "SELECT_COMMANDS": {
                "type": "bigint",
                "description": "The total number of SELECT commands executed by the client."
            },
            "UPDATE_COMMANDS": {
                "type": "bigint",
                "description": "The total number of UPDATE commands executed by the client."
            },
            "OTHER_COMMANDS": {
                "type": "bigint",
                "description": "The total number of commands, not classified as SELECT, UPDATE, INSERT or DELETE, executed by the client."
            },
            "COMMIT_TRANSACTIONS": {
                "type": "bigint",
                "description": "The total number of transactions committed by the client."
            },
            "ROLLBACK_TRANSACTIONS": {
                "type": "bigint",
                "description": "The total number of transactions rolled back by the client."
            },
            "DENIED_CONNECTIONS": {
                "type": "bigint",
                "description": "The total number of connections denied to this client."
            },
            "LOST_CONNECTIONS": {
                "type": "bigint",
                "description": "The total number of connections that were lost (not properly closed) by the client."
            },
            "ACCESS_DENIED": {
                "type": "bigint",
                "description": "The total number of times the client was denied access."
            },
            "EMPTY_QUERIES": {
                "type": "bigint",
                "description": "The total number of queries from the client that did nothing."
            },
            "TOTAL_SSL_CONNECTIONS": {
                "type": "bigint",
                "description": "The total number of connections from this client that used SSL."
            },
            "MAX_STATEMENT_TIME_EXCEEDED": {
                "type": "bigint",
                "description": "The total number of times a statement executed by the client exceeded the maximum statement execution time."
            }
        },
        "description": "The CLIENT_STATISTICS table in the information schema provides statistical information about client activity. It helps in analyzing the server's workload by tracking metrics such as the number of connections, queries, and bytes sent by each client.",
        "simple_ddl": "CREATE TABLE CLIENT_STATISTICS (\n  CLIENT varchar,\n  TOTAL_CONNECTIONS bigint,\n  CONCURRENT_CONNECTIONS bigint,\n  CONNECTED_TIME bigint,\n  BUSY_TIME double,\n  CPU_TIME double,\n  BYTES_RECEIVED bigint,\n  BYTES_SENT bigint,\n  BINLOG_BYTES_WRITTEN bigint,\n  ROWS_READ bigint,\n  ROWS_SENT bigint,\n  ROWS_DELETED bigint,\n  ROWS_INSERTED bigint,\n  ROWS_UPDATED bigint,\n  SELECT_COMMANDS bigint,\n  UPDATE_COMMANDS bigint,\n  OTHER_COMMANDS bigint,\n  COMMIT_TRANSACTIONS bigint,\n  ROLLBACK_TRANSACTIONS bigint,\n  DENIED_CONNECTIONS bigint,\n  LOST_CONNECTIONS bigint,\n  ACCESS_DENIED bigint,\n  EMPTY_QUERIES bigint,\n  TOTAL_SSL_CONNECTIONS bigint,\n  MAX_STATEMENT_TIME_EXCEEDED bigint\n);"
    },
    "INDEX_STATISTICS": {
        "ddl": "CREATE TEMPORARY TABLE `INDEX_STATISTICS` (\n  `TABLE_SCHEMA` varchar(192) NOT NULL,\n  `TABLE_NAME` varchar(192) NOT NULL,\n  `INDEX_NAME` varchar(192) NOT NULL,\n  `ROWS_READ` bigint(21) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "TABLE_SCHEMA": {
                "type": "varchar",
                "description": "The name of the schema (database) the indexed table belongs to"
            },
            "TABLE_NAME": {
                "type": "varchar",
                "description": "The name of the table that has the index"
            },
            "INDEX_NAME": {
                "type": "varchar",
                "description": "The name of the index"
            },
            "ROWS_READ": {
                "type": "bigint",
                "description": "The number of rows read from the index"
            }
        },
        "description": "The `INDEX_STATISTICS` table in the Information Schema of MariaDB is used to provide information about table index statistics. It helps in analyzing the performance of indexes by displaying how many times each index has been used in query operations.",
        "simple_ddl": "CREATE TABLE INDEX_STATISTICS (\n  TABLE_SCHEMA varchar,\n  TABLE_NAME varchar,\n  INDEX_NAME varchar,\n  ROWS_READ bigint\n);"
    },
    "INNODB_FT_CONFIG": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_FT_CONFIG` (\n  `KEY` varchar(193) NOT NULL,\n  `VALUE` varchar(193) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "KEY": {
                "type": "varchar",
                "description": "The name of the Fulltext index configuration parameter."
            },
            "VALUE": {
                "type": "varchar",
                "description": "The value assigned to the Fulltext index configuration parameter."
            }
        },
        "description": "The `INNODB_FT_CONFIG` table provides configuration parameters that are relevant to InnoDB full-text search indexes. It helps in managing and understanding the behavior of full-text searches within InnoDB.",
        "simple_ddl": "CREATE TABLE INNODB_FT_CONFIG (\n  KEY varchar,\n  VALUE varchar\n);"
    },
    "GEOMETRY_COLUMNS": {
        "ddl": "CREATE TEMPORARY TABLE `GEOMETRY_COLUMNS` (\n  `F_TABLE_CATALOG` varchar(512) NOT NULL,\n  `F_TABLE_SCHEMA` varchar(64) NOT NULL,\n  `F_TABLE_NAME` varchar(64) NOT NULL,\n  `F_GEOMETRY_COLUMN` varchar(64) NOT NULL,\n  `G_TABLE_CATALOG` varchar(512) NOT NULL,\n  `G_TABLE_SCHEMA` varchar(64) NOT NULL,\n  `G_TABLE_NAME` varchar(64) NOT NULL,\n  `G_GEOMETRY_COLUMN` varchar(64) NOT NULL,\n  `STORAGE_TYPE` tinyint(2) NOT NULL,\n  `GEOMETRY_TYPE` int(7) NOT NULL,\n  `COORD_DIMENSION` tinyint(2) NOT NULL,\n  `MAX_PPR` tinyint(2) NOT NULL,\n  `SRID` smallint(5) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "F_TABLE_CATALOG": {
                "type": "varchar",
                "description": "Name of the catalog to which the foreign table belongs; always def"
            },
            "F_TABLE_SCHEMA": {
                "type": "varchar",
                "description": "Name of the schema that contains the foreign table"
            },
            "F_TABLE_NAME": {
                "type": "varchar",
                "description": "Name of the foreign table"
            },
            "F_GEOMETRY_COLUMN": {
                "type": "varchar",
                "description": "Name of the geometric column in the foreign table"
            },
            "G_TABLE_CATALOG": {
                "type": "varchar",
                "description": "Name of the catalog to which the geometry table belongs; always def"
            },
            "G_TABLE_SCHEMA": {
                "type": "varchar",
                "description": "Name of the schema that contains the geometry table"
            },
            "G_TABLE_NAME": {
                "type": "varchar",
                "description": "Name of the geometry table"
            },
            "G_GEOMETRY_COLUMN": {
                "type": "varchar",
                "description": "Name of the geometric column in the geometry table"
            },
            "STORAGE_TYPE": {
                "type": "tinyint",
                "description": "Format in which the geometry data is stored"
            },
            "GEOMETRY_TYPE": {
                "type": "int",
                "description": "Type of the geometry, e.g., POINT, LINESTRING"
            },
            "COORD_DIMENSION": {
                "type": "tinyint",
                "description": "Number of dimensions in the geometry column (2, 3, or 4 for XYZM)"
            },
            "MAX_PPR": {
                "type": "tinyint",
                "description": "Maximum number of points per ring in a polygon"
            },
            "SRID": {
                "type": "smallint",
                "description": "Spatial Reference System Identifier for the geometry data"
            }
        },
        "description": "The `GEOMETRY_COLUMNS` table in the Information Schema of MariaDB contains descriptions of feature tables within a database that have columns of geometry type. It provides detailed metadata including the table name, column name, geometry type, and the spatial reference system used for each geometry column.",
        "simple_ddl": "CREATE TABLE GEOMETRY_COLUMNS (\n  F_TABLE_CATALOG varchar,\n  F_TABLE_SCHEMA varchar,\n  F_TABLE_NAME varchar,\n  F_GEOMETRY_COLUMN varchar,\n  G_TABLE_CATALOG varchar,\n  G_TABLE_SCHEMA varchar,\n  G_TABLE_NAME varchar,\n  G_GEOMETRY_COLUMN varchar,\n  STORAGE_TYPE tinyint,\n  GEOMETRY_TYPE int,\n  COORD_DIMENSION tinyint,\n  MAX_PPR tinyint,\n  SRID smallint\n);"
    },
    "INNODB_SYS_TABLESTATS": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_SYS_TABLESTATS` (\n  `TABLE_ID` bigint(21) unsigned NOT NULL,\n  `NAME` varchar(64) NOT NULL,\n  `STATS_INITIALIZED` int(1) NOT NULL,\n  `NUM_ROWS` bigint(21) unsigned NOT NULL,\n  `CLUST_INDEX_SIZE` bigint(21) unsigned NOT NULL,\n  `OTHER_INDEX_SIZE` bigint(21) unsigned NOT NULL,\n  `MODIFIED_COUNTER` bigint(21) unsigned NOT NULL,\n  `AUTOINC` bigint(21) unsigned NOT NULL,\n  `REF_COUNT` int(11) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "TABLE_ID": {
                "type": "bigint",
                "description": "A unique identifier for the table within the InnoDB storage engine"
            },
            "NAME": {
                "type": "varchar",
                "description": "The name of the table including the database name"
            },
            "STATS_INITIALIZED": {
                "type": "int",
                "description": "Indicates whether the statistics have been initialized ('Initialized' or 'Uninitialized')"
            },
            "NUM_ROWS": {
                "type": "bigint",
                "description": "An estimate of the number of rows in the table"
            },
            "CLUST_INDEX_SIZE": {
                "type": "bigint",
                "description": "The size of the clustered index for the table in pages"
            },
            "OTHER_INDEX_SIZE": {
                "type": "bigint",
                "description": "The size of all other indexes for the table in pages, not including the clustered index"
            },
            "MODIFIED_COUNTER": {
                "type": "bigint",
                "description": "Number of rows modified since the last statistics calculation"
            },
            "AUTOINC": {
                "type": "bigint",
                "description": "The current value of the AUTO_INCREMENT column for the table"
            },
            "REF_COUNT": {
                "type": "int",
                "description": "Number of foreign key references to the table or references from the table to others"
            }
        },
        "description": "The `INNODB_SYS_TABLESTATS` table provides real-time statistics about InnoDB tables, such as the number of rows, clustered index size, and sum of other index sizes. It's essential for monitoring the performance and storage efficiency of InnoDB tables in a MariaDB database environment.",
        "simple_ddl": "CREATE TABLE INNODB_SYS_TABLESTATS (\n  TABLE_ID bigint,\n  NAME varchar,\n  STATS_INITIALIZED int,\n  NUM_ROWS bigint,\n  CLUST_INDEX_SIZE bigint,\n  OTHER_INDEX_SIZE bigint,\n  MODIFIED_COUNTER bigint,\n  AUTOINC bigint,\n  REF_COUNT int\n);"
    },
    "SPATIAL_REF_SYS": {
        "ddl": "CREATE TEMPORARY TABLE `SPATIAL_REF_SYS` (\n  `SRID` smallint(5) NOT NULL,\n  `AUTH_NAME` varchar(512) NOT NULL,\n  `AUTH_SRID` int(5) NOT NULL,\n  `SRTEXT` varchar(2048) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "SRID": {
                "type": "smallint",
                "description": "An identifier that is unique within the database and is used to reference spatial reference systems."
            },
            "AUTH_NAME": {
                "type": "varchar",
                "description": "The name of the authoritative body that defines the spatial reference system."
            },
            "AUTH_SRID": {
                "type": "int",
                "description": "The identifier assigned by the authoritative body to the spatial reference system."
            },
            "SRTEXT": {
                "type": "varchar",
                "description": "A well-known text representation of the spatial reference system."
            }
        },
        "description": "The SPATIAL_REF_SYS table is part of the Information Schema in MariaDB and other databases that support spatial data. It provides information about the spatial reference systems available in the database, including the SRID (Spatial Reference System Identifier), authorization name, and well-known text (WKT) representation of the spatial reference system.",
        "simple_ddl": "CREATE TABLE SPATIAL_REF_SYS (\n  SRID smallint,\n  AUTH_NAME varchar,\n  AUTH_SRID int,\n  SRTEXT varchar\n);"
    },
    "USER_STATISTICS": {
        "ddl": "CREATE TEMPORARY TABLE `USER_STATISTICS` (\n  `USER` varchar(128) NOT NULL,\n  `TOTAL_CONNECTIONS` int(11) NOT NULL,\n  `CONCURRENT_CONNECTIONS` int(11) NOT NULL,\n  `CONNECTED_TIME` int(11) NOT NULL,\n  `BUSY_TIME` double NOT NULL,\n  `CPU_TIME` double NOT NULL,\n  `BYTES_RECEIVED` bigint(21) NOT NULL,\n  `BYTES_SENT` bigint(21) NOT NULL,\n  `BINLOG_BYTES_WRITTEN` bigint(21) NOT NULL,\n  `ROWS_READ` bigint(21) NOT NULL,\n  `ROWS_SENT` bigint(21) NOT NULL,\n  `ROWS_DELETED` bigint(21) NOT NULL,\n  `ROWS_INSERTED` bigint(21) NOT NULL,\n  `ROWS_UPDATED` bigint(21) NOT NULL,\n  `SELECT_COMMANDS` bigint(21) NOT NULL,\n  `UPDATE_COMMANDS` bigint(21) NOT NULL,\n  `OTHER_COMMANDS` bigint(21) NOT NULL,\n  `COMMIT_TRANSACTIONS` bigint(21) NOT NULL,\n  `ROLLBACK_TRANSACTIONS` bigint(21) NOT NULL,\n  `DENIED_CONNECTIONS` bigint(21) NOT NULL,\n  `LOST_CONNECTIONS` bigint(21) NOT NULL,\n  `ACCESS_DENIED` bigint(21) NOT NULL,\n  `EMPTY_QUERIES` bigint(21) NOT NULL,\n  `TOTAL_SSL_CONNECTIONS` bigint(21) unsigned NOT NULL,\n  `MAX_STATEMENT_TIME_EXCEEDED` bigint(21) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "USER": {
                "type": "varchar",
                "description": "The MariaDB user for whom the statistical data is being recorded"
            },
            "TOTAL_CONNECTIONS": {
                "type": "int",
                "description": "The total number of connections made by this user"
            },
            "CONCURRENT_CONNECTIONS": {
                "type": "int",
                "description": "The maximum number of concurrent connections by the user"
            },
            "CONNECTED_TIME": {
                "type": "int",
                "description": "The total time, in seconds, the user has been connected"
            },
            "BUSY_TIME": {
                "type": "double",
                "description": "Total time, in seconds, the user's connections were doing something"
            },
            "CPU_TIME": {
                "type": "double",
                "description": "Total CPU time, in seconds, used by the user's connections"
            },
            "BYTES_RECEIVED": {
                "type": "bigint",
                "description": "Total number of bytes received by the user's connections"
            },
            "BYTES_SENT": {
                "type": "bigint",
                "description": "Total number of bytes sent by the user's connections"
            },
            "BINLOG_BYTES_WRITTEN": {
                "type": "bigint",
                "description": "Total number of bytes written to the binary log from the user's statements"
            },
            "ROWS_READ": {
                "type": "bigint",
                "description": "Total number of rows read by the user's commands"
            },
            "ROWS_SENT": {
                "type": "bigint",
                "description": "Total number of rows sent to the client by the user's commands"
            },
            "ROWS_DELETED": {
                "type": "bigint",
                "description": "Total number of rows deleted by the user's commands"
            },
            "ROWS_INSERTED": {
                "type": "bigint",
                "description": "Total number of rows inserted by the user's commands"
            },
            "ROWS_UPDATED": {
                "type": "bigint",
                "description": "Total number of rows updated by the user's commands"
            },
            "SELECT_COMMANDS": {
                "type": "bigint",
                "description": "Number of SELECT commands executed by the user"
            },
            "UPDATE_COMMANDS": {
                "type": "bigint",
                "description": "Number of UPDATE commands executed by the user"
            },
            "OTHER_COMMANDS": {
                "type": "bigint",
                "description": "Number of other commands executed by the user"
            },
            "COMMIT_TRANSACTIONS": {
                "type": "bigint",
                "description": "Number of commits performed by the user"
            },
            "ROLLBACK_TRANSACTIONS": {
                "type": "bigint",
                "description": "Number of rollbacks issued by the user"
            },
            "DENIED_CONNECTIONS": {
                "type": "bigint",
                "description": "Number of connections denied to this user"
            },
            "LOST_CONNECTIONS": {
                "type": "bigint",
                "description": "Number of connections that were lost or closed unexpectantly for this user"
            },
            "ACCESS_DENIED": {
                "type": "bigint",
                "description": "Number of times access was denied for this user"
            },
            "EMPTY_QUERIES": {
                "type": "bigint",
                "description": "Number of empty queries from the user"
            },
            "TOTAL_SSL_CONNECTIONS": {
                "type": "bigint",
                "description": "Total number of SSL connections made by this user"
            },
            "MAX_STATEMENT_TIME_EXCEEDED": {
                "type": "bigint",
                "description": "Number of times the execution of statements by this user exceeded the max_statement_time"
            }
        },
        "description": "The `USER_STATISTICS` table in the Information Schema provides comprehensive statistics about user activity within the MariaDB database. It includes detailed metrics like the number of connections, commands, rows read, and bytes sent, helping in monitoring and optimizing user performance.",
        "simple_ddl": "CREATE TABLE USER_STATISTICS (\n  USER varchar,\n  TOTAL_CONNECTIONS int,\n  CONCURRENT_CONNECTIONS int,\n  CONNECTED_TIME int,\n  BUSY_TIME double,\n  CPU_TIME double,\n  BYTES_RECEIVED bigint,\n  BYTES_SENT bigint,\n  BINLOG_BYTES_WRITTEN bigint,\n  ROWS_READ bigint,\n  ROWS_SENT bigint,\n  ROWS_DELETED bigint,\n  ROWS_INSERTED bigint,\n  ROWS_UPDATED bigint,\n  SELECT_COMMANDS bigint,\n  UPDATE_COMMANDS bigint,\n  OTHER_COMMANDS bigint,\n  COMMIT_TRANSACTIONS bigint,\n  ROLLBACK_TRANSACTIONS bigint,\n  DENIED_CONNECTIONS bigint,\n  LOST_CONNECTIONS bigint,\n  ACCESS_DENIED bigint,\n  EMPTY_QUERIES bigint,\n  TOTAL_SSL_CONNECTIONS bigint,\n  MAX_STATEMENT_TIME_EXCEEDED bigint\n);"
    },
    "INNODB_TRX": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_TRX` (\n  `trx_id` bigint(21) unsigned NOT NULL,\n  `trx_state` varchar(13) NOT NULL,\n  `trx_started` datetime NOT NULL,\n  `trx_requested_lock_id` varchar(81),\n  `trx_wait_started` datetime,\n  `trx_weight` bigint(21) unsigned NOT NULL,\n  `trx_mysql_thread_id` bigint(21) unsigned NOT NULL,\n  `trx_query` varchar(1024),\n  `trx_operation_state` varchar(64),\n  `trx_tables_in_use` bigint(21) unsigned NOT NULL,\n  `trx_tables_locked` bigint(21) unsigned NOT NULL,\n  `trx_lock_structs` bigint(21) unsigned NOT NULL,\n  `trx_lock_memory_bytes` bigint(21) unsigned NOT NULL,\n  `trx_rows_locked` bigint(21) unsigned NOT NULL,\n  `trx_rows_modified` bigint(21) unsigned NOT NULL,\n  `trx_concurrency_tickets` bigint(21) unsigned NOT NULL,\n  `trx_isolation_level` enum('READ UNCOMMITTED','READ COMMITTED','REPEATABLE READ','SERIALIZABLE') NOT NULL,\n  `trx_unique_checks` int(1) NOT NULL,\n  `trx_foreign_key_checks` int(1) NOT NULL,\n  `trx_last_foreign_key_error` varchar(256),\n  `trx_is_read_only` int(1) NOT NULL,\n  `trx_autocommit_non_locking` int(1) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "trx_id": {
                "type": "bigint",
                "description": "The unique identifier of the transaction"
            },
            "trx_state": {
                "type": "varchar",
                "description": "The current state of the transaction (RUNNING, LOCK WAIT, ROLLING BACK, COMMITTING)"
            },
            "trx_started": {
                "type": "datetime",
                "description": "The timestamp when the transaction started"
            },
            "trx_requested_lock_id": {
                "type": "varchar",
                "description": "The lock ID the transaction is currently waiting for, if any"
            },
            "trx_wait_started": {
                "type": "datetime",
                "description": "The timestamp when the transaction started waiting for the lock, if applicable"
            },
            "trx_weight": {
                "type": "bigint",
                "description": "A measure of the transaction's weight, considering factors like row locks and undo log size"
            },
            "trx_mysql_thread_id": {
                "type": "bigint",
                "description": "The thread ID of the MySQL thread associated with this transaction"
            },
            "trx_query": {
                "type": "varchar",
                "description": "The SQL query currently being executed in the transaction, if any"
            },
            "trx_operation_state": {
                "type": "varchar",
                "description": "The current operation state within the transaction"
            },
            "trx_tables_in_use": {
                "type": "bigint",
                "description": "The number of tables currently being used by the transaction"
            },
            "trx_tables_locked": {
                "type": "bigint",
                "description": "The number of tables that have been locked by the transaction"
            },
            "trx_lock_structs": {
                "type": "bigint",
                "description": "The number of lock structs (lock objects) associated with the transaction"
            },
            "trx_lock_memory_bytes": {
                "type": "bigint",
                "description": "The amount of memory allocated for locks for the transaction in bytes"
            },
            "trx_rows_locked": {
                "type": "bigint",
                "description": "The number of rows locked by the transaction"
            },
            "trx_rows_modified": {
                "type": "bigint",
                "description": "The number of rows modified by the transaction"
            },
            "trx_concurrency_tickets": {
                "type": "bigint",
                "description": "The number of concurrency tickets for the transaction, affecting its scheduling"
            },
            "trx_isolation_level": {
                "type": "enum",
                "description": "The isolation level of the transaction (READ UNCOMMITTED, READ COMMITTED, REPEATABLE READ, SERIALIZABLE)"
            },
            "trx_unique_checks": {
                "type": "int",
                "description": "Whether unique checks are being enforced for the transaction (1 for yes, 0 for no)"
            },
            "trx_foreign_key_checks": {
                "type": "int",
                "description": "Whether foreign key checks are being enforced for the transaction (1 for yes, 0 for no)"
            },
            "trx_last_foreign_key_error": {
                "type": "varchar",
                "description": "Description of the last foreign key error encountered by the transaction, if any"
            },
            "trx_is_read_only": {
                "type": "int",
                "description": "Indicates whether the transaction is read-only (1 for yes, 0 for no)"
            },
            "trx_autocommit_non_locking": {
                "type": "int",
                "description": "Indicates if it is an autocommit non-locking select transaction"
            }
        },
        "description": "The `INNODB_TRX` table in the Information Schema provides real-time information about each transaction currently executing within the InnoDB storage engine. It includes details such as transaction ID, state, isolation level, and locks held by the transaction.",
        "simple_ddl": "CREATE TABLE INNODB_TRX (\n  trx_id bigint,\n  trx_state varchar,\n  trx_started datetime,\n  trx_requested_lock_id varchar,\n  trx_wait_started datetime,\n  trx_weight bigint,\n  trx_mysql_thread_id bigint,\n  trx_query varchar,\n  trx_operation_state varchar,\n  trx_tables_in_use bigint,\n  trx_tables_locked bigint,\n  trx_lock_structs bigint,\n  trx_lock_memory_bytes bigint,\n  trx_rows_locked bigint,\n  trx_rows_modified bigint,\n  trx_concurrency_tickets bigint,\n  trx_isolation_level enum,\n  trx_unique_checks int,\n  trx_foreign_key_checks int,\n  trx_last_foreign_key_error varchar,\n  trx_is_read_only int,\n  trx_autocommit_non_locking int\n);"
    },
    "INNODB_CMP_PER_INDEX": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_CMP_PER_INDEX` (\n  `database_name` varchar(64) NOT NULL,\n  `table_name` varchar(64) NOT NULL,\n  `index_name` varchar(64) NOT NULL,\n  `compress_ops` int(11) NOT NULL,\n  `compress_ops_ok` int(11) NOT NULL,\n  `compress_time` int(11) NOT NULL,\n  `uncompress_ops` int(11) NOT NULL,\n  `uncompress_time` int(11) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "database_name": {
                "type": "varchar",
                "description": "The name of the database."
            },
            "table_name": {
                "type": "varchar",
                "description": "The name of the table where the index resides."
            },
            "index_name": {
                "type": "varchar",
                "description": "The name of the index."
            },
            "compress_ops": {
                "type": "int",
                "description": "Number of times a B-tree page of the index was compressed."
            },
            "compress_ops_ok": {
                "type": "int",
                "description": "Number of times a B-tree page compression was successful."
            },
            "compress_time": {
                "type": "int",
                "description": "The time spent in compressing B-tree pages (in seconds)."
            },
            "uncompress_ops": {
                "type": "int",
                "description": "Number of times a B-tree page of the index was uncompressed."
            },
            "uncompress_time": {
                "type": "int",
                "description": "The time spent in uncompressing B-tree pages (in seconds)."
            }
        },
        "description": "The `INNODB_CMP_PER_INDEX` table provides information on the compression statistics for each InnoDB table and index combination. It details the operational characteristics such as compression, uncompression operations, and the compression failure count, aiding in performance optimization and troubleshooting of InnoDB table compression.",
        "simple_ddl": "CREATE TABLE INNODB_CMP_PER_INDEX (\n  database_name varchar,\n  table_name varchar,\n  index_name varchar,\n  compress_ops int,\n  compress_ops_ok int,\n  compress_time int,\n  uncompress_ops int,\n  uncompress_time int\n);"
    },
    "INNODB_METRICS": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_METRICS` (\n  `NAME` varchar(193) NOT NULL,\n  `SUBSYSTEM` varchar(193) NOT NULL,\n  `COUNT` bigint(21) NOT NULL,\n  `MAX_COUNT` bigint(21),\n  `MIN_COUNT` bigint(21),\n  `AVG_COUNT` float,\n  `COUNT_RESET` bigint(21) NOT NULL,\n  `MAX_COUNT_RESET` bigint(21),\n  `MIN_COUNT_RESET` bigint(21),\n  `AVG_COUNT_RESET` float,\n  `TIME_ENABLED` datetime,\n  `TIME_DISABLED` datetime,\n  `TIME_ELAPSED` bigint(21),\n  `TIME_RESET` datetime,\n  `ENABLED` int(1) NOT NULL,\n  `TYPE` enum('value','status_counter','set_owner','set_member','counter') NOT NULL,\n  `COMMENT` varchar(193) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "NAME": {
                "type": "varchar",
                "description": "The name of the metric"
            },
            "SUBSYSTEM": {
                "type": "varchar",
                "description": "The subsystem of InnoDB the metric belongs to"
            },
            "COUNT": {
                "type": "bigint",
                "description": "Current count of the metric since the last reset"
            },
            "MAX_COUNT": {
                "type": "bigint",
                "description": "Maximum count of the metric recorded since the last reset"
            },
            "MIN_COUNT": {
                "type": "bigint",
                "description": "Minimum count of the metric recorded since the last reset"
            },
            "AVG_COUNT": {
                "type": "float",
                "description": "Average count of the metric since the last reset"
            },
            "COUNT_RESET": {
                "type": "bigint",
                "description": "Count of the metric since the last server startup"
            },
            "MAX_COUNT_RESET": {
                "type": "bigint",
                "description": "Maximum count of the metric recorded since the last server startup"
            },
            "MIN_COUNT_RESET": {
                "type": "bigint",
                "description": "Minimum count of the metric recorded since the last server startup"
            },
            "AVG_COUNT_RESET": {
                "type": "float",
                "description": "Average count of the metric since the last server startup"
            },
            "TIME_ENABLED": {
                "type": "datetime",
                "description": "Timestamp when the metric was last enabled"
            },
            "TIME_DISABLED": {
                "type": "datetime",
                "description": "Timestamp when the metric was last disabled"
            },
            "TIME_ELAPSED": {
                "type": "bigint",
                "description": "Time elapsed in seconds since the last reset"
            },
            "TIME_RESET": {
                "type": "datetime",
                "description": "Timestamp of the last reset"
            },
            "ENABLED": {
                "type": "int",
                "description": "Whether the metric is currently enabled or not (YES or NO)"
            },
            "TYPE": {
                "type": "enum",
                "description": "Type of the metric, indicating its nature, like status, counter, etc."
            },
            "COMMENT": {
                "type": "varchar",
                "description": "Description of what the metric measures"
            }
        },
        "description": "The INNODB_METRICS table in the Information Schema provides detailed information about various internal InnoDB metrics, useful for monitoring and troubleshooting InnoDB performance. It includes metrics on activities like buffer pool size, row operations, and many others, helping with database optimization efforts.",
        "simple_ddl": "CREATE TABLE INNODB_METRICS (\n  NAME varchar,\n  SUBSYSTEM varchar,\n  COUNT bigint,\n  MAX_COUNT bigint,\n  MIN_COUNT bigint,\n  AVG_COUNT float,\n  COUNT_RESET bigint,\n  MAX_COUNT_RESET bigint,\n  MIN_COUNT_RESET bigint,\n  AVG_COUNT_RESET float,\n  TIME_ENABLED datetime,\n  TIME_DISABLED datetime,\n  TIME_ELAPSED bigint,\n  TIME_RESET datetime,\n  ENABLED int,\n  TYPE enum,\n  COMMENT varchar\n);"
    },
    "INNODB_FT_DELETED": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_FT_DELETED` (\n  `DOC_ID` bigint(21) unsigned NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "DOC_ID": {
                "type": "bigint",
                "description": "A unique identifier for the document that has been deleted from the InnoDB FULLTEXT index"
            }
        },
        "description": "The `INNODB_FT_DELETED` table in the Information Schema of MariaDB is used for full-text search functionalities within InnoDB. It specifically keeps track of deleted document IDs that need to be removed from the full-text index.",
        "simple_ddl": "CREATE TABLE INNODB_FT_DELETED (\n  DOC_ID bigint\n);"
    },
    "INNODB_CMP": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_CMP` (\n  `page_size` int(5) NOT NULL,\n  `compress_ops` int(11) NOT NULL,\n  `compress_ops_ok` int(11) NOT NULL,\n  `compress_time` int(11) NOT NULL,\n  `uncompress_ops` int(11) NOT NULL,\n  `uncompress_time` int(11) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "page_size": {
                "type": "int",
                "description": "The compressed page size in bytes."
            },
            "compress_ops": {
                "type": "int",
                "description": "Number of compression operations attempted."
            },
            "compress_ops_ok": {
                "type": "int",
                "description": "Number of compression operations that succeeded."
            },
            "compress_time": {
                "type": "int",
                "description": "Amount of time spent in attempts to compress data, in milliseconds."
            },
            "uncompress_ops": {
                "type": "int",
                "description": "Number of decompression operations."
            },
            "uncompress_time": {
                "type": "int",
                "description": "Amount of time spent in decompression, in milliseconds."
            }
        },
        "description": "The `INNODB_CMP` table in the Information Schema provides information on the compression operations of InnoDB tables. It tracks the number of times pages have been compressed and uncompressed, facilitating analysis and tuning of table compression performance.",
        "simple_ddl": "CREATE TABLE INNODB_CMP (\n  page_size int,\n  compress_ops int,\n  compress_ops_ok int,\n  compress_time int,\n  uncompress_ops int,\n  uncompress_time int\n);"
    },
    "THREAD_POOL_WAITS": {
        "ddl": "CREATE TEMPORARY TABLE `THREAD_POOL_WAITS` (\n  `REASON` varchar(16) NOT NULL,\n  `COUNT` bigint(19) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "REASON": {
                "type": "varchar",
                "description": "The reason for the wait in the thread pool, indicating what the thread was or is waiting for."
            },
            "COUNT": {
                "type": "bigint",
                "description": "The total count of waits for each distinct reason."
            }
        },
        "description": "The `THREAD_POOL_WAITS` table in the Information Schema of MariaDB is used to display wait time statistics for thread groups in the thread pool plugin. It provides insights into the performance of thread pooling by showing the number of waits and the total wait time for threads.",
        "simple_ddl": "CREATE TABLE THREAD_POOL_WAITS (\n  REASON varchar,\n  COUNT bigint\n);"
    },
    "INNODB_CMP_RESET": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_CMP_RESET` (\n  `page_size` int(5) NOT NULL,\n  `compress_ops` int(11) NOT NULL,\n  `compress_ops_ok` int(11) NOT NULL,\n  `compress_time` int(11) NOT NULL,\n  `uncompress_ops` int(11) NOT NULL,\n  `uncompress_time` int(11) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "page_size": {
                "type": "int",
                "description": "The compressed page size in bytes."
            },
            "compress_ops": {
                "type": "int",
                "description": "Number of times a B-tree page compression operation was attempted."
            },
            "compress_ops_ok": {
                "type": "int",
                "description": "Number of times a B-tree page compression operation was successful."
            },
            "compress_time": {
                "type": "int",
                "description": "The total amount of time spent in B-tree page compression operations, in milliseconds."
            },
            "uncompress_ops": {
                "type": "int",
                "description": "Number of times a compressed B-tree page was uncompressed."
            },
            "uncompress_time": {
                "type": "int",
                "description": "The total amount of time spent in uncompressing B-tree pages, in milliseconds."
            }
        },
        "description": "The `INNODB_CMP_RESET` table in the Information Schema is used for resetting the counters for compressed pages within InnoDB. It essentially provides a means to clear the current count information about compression operations and their efficiency, allowing for a fresh start in monitoring these metrics.",
        "simple_ddl": "CREATE TABLE INNODB_CMP_RESET (\n  page_size int,\n  compress_ops int,\n  compress_ops_ok int,\n  compress_time int,\n  uncompress_ops int,\n  uncompress_time int\n);"
    },
    "THREAD_POOL_QUEUES": {
        "ddl": "CREATE TEMPORARY TABLE `THREAD_POOL_QUEUES` (\n  `GROUP_ID` int(6) NOT NULL,\n  `POSITION` int(6) NOT NULL,\n  `PRIORITY` int(1) NOT NULL,\n  `CONNECTION_ID` bigint(19) unsigned,\n  `QUEUEING_TIME_MICROSECONDS` bigint(19) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "GROUP_ID": {
                "type": "int",
                "description": "An integer identifying the thread pool group the statement was assigned to"
            },
            "POSITION": {
                "type": "int",
                "description": "The position number in the queue where the statement is located"
            },
            "PRIORITY": {
                "type": "int",
                "description": "The priority of the statement in the queue"
            },
            "CONNECTION_ID": {
                "type": "bigint",
                "description": "The connection identifier for the thread handling the statement"
            },
            "QUEUEING_TIME_MICROSECONDS": {
                "type": "bigint",
                "description": "The time in microseconds the statement has been in the queue"
            }
        },
        "description": "The `THREAD_POOL_QUEUES` table in the Information Schema provides information about the operation queues in the thread pool plugin, which is central to managing concurrent connections efficiently in MariaDB. It shows details about the queue length, queue wait, and other statistics essential for analyzing and optimizing thread pool performance.",
        "simple_ddl": "CREATE TABLE THREAD_POOL_QUEUES (\n  GROUP_ID int,\n  POSITION int,\n  PRIORITY int,\n  CONNECTION_ID bigint,\n  QUEUEING_TIME_MICROSECONDS bigint\n);"
    },
    "TABLE_STATISTICS": {
        "ddl": "CREATE TEMPORARY TABLE `TABLE_STATISTICS` (\n  `TABLE_SCHEMA` varchar(192) NOT NULL,\n  `TABLE_NAME` varchar(192) NOT NULL,\n  `ROWS_READ` bigint(21) NOT NULL,\n  `ROWS_CHANGED` bigint(21) NOT NULL,\n  `ROWS_CHANGED_X_INDEXES` bigint(21) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "TABLE_SCHEMA": {
                "type": "varchar",
                "description": "The database name to which the table belongs"
            },
            "TABLE_NAME": {
                "type": "varchar",
                "description": "The name of the table"
            },
            "ROWS_READ": {
                "type": "bigint",
                "description": "The number of rows read from the table since the last status reset"
            },
            "ROWS_CHANGED": {
                "type": "bigint",
                "description": "The number of rows changed in the table since the last status reset"
            },
            "ROWS_CHANGED_X_INDEXES": {
                "type": "bigint",
                "description": "The product of ROWS_CHANGED and the number of indexes of the table since the last status reset"
            }
        },
        "description": "The `TABLE_STATISTICS` table in the MariaDB Information Schema is used to provide statistical information about table access and activity. It includes metrics such as rows read, rows changed, and rows changed X index, which can be valuable for performance analysis and optimization.",
        "simple_ddl": "CREATE TABLE TABLE_STATISTICS (\n  TABLE_SCHEMA varchar,\n  TABLE_NAME varchar,\n  ROWS_READ bigint,\n  ROWS_CHANGED bigint,\n  ROWS_CHANGED_X_INDEXES bigint\n);"
    },
    "INNODB_SYS_FIELDS": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_SYS_FIELDS` (\n  `INDEX_ID` bigint(21) unsigned NOT NULL,\n  `NAME` varchar(64) NOT NULL,\n  `POS` int(11) unsigned NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "INDEX_ID": {
                "type": "bigint",
                "description": "An identifier for the index this column is part of, correlates to INDEX_ID in the INNODB_SYS_INDEXES table"
            },
            "NAME": {
                "type": "varchar",
                "description": "The name of the column"
            },
            "POS": {
                "type": "int",
                "description": "The position of the column within the index, starting from 0"
            }
        },
        "description": "The `INNODB_SYS_FIELDS` table within the MariaDB Information Schema provides details about the columns of InnoDB index fields. This table is useful for understanding the structure and column attributes of indexes in InnoDB tables.",
        "simple_ddl": "CREATE TABLE INNODB_SYS_FIELDS (\n  INDEX_ID bigint,\n  NAME varchar,\n  POS int\n);"
    },
    "INNODB_BUFFER_PAGE_LRU": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_BUFFER_PAGE_LRU` (\n  `POOL_ID` int(11) unsigned NOT NULL,\n  `LRU_POSITION` bigint(21) unsigned NOT NULL,\n  `SPACE` int(11) unsigned NOT NULL,\n  `PAGE_NUMBER` int(11) unsigned NOT NULL,\n  `PAGE_TYPE` varchar(64),\n  `FLUSH_TYPE` int(11) unsigned NOT NULL,\n  `FIX_COUNT` int(11) unsigned NOT NULL,\n  `IS_HASHED` int(1) NOT NULL,\n  `NEWEST_MODIFICATION` bigint(21) unsigned NOT NULL,\n  `OLDEST_MODIFICATION` bigint(21) unsigned NOT NULL,\n  `ACCESS_TIME` bigint(21) unsigned NOT NULL,\n  `TABLE_NAME` varchar(1024),\n  `INDEX_NAME` varchar(64),\n  `NUMBER_RECORDS` bigint(21) unsigned NOT NULL,\n  `DATA_SIZE` bigint(21) unsigned NOT NULL,\n  `COMPRESSED_SIZE` bigint(21) unsigned NOT NULL,\n  `COMPRESSED` int(1) NOT NULL,\n  `IO_FIX` enum('IO_NONE','IO_READ','IO_WRITE') NOT NULL,\n  `IS_OLD` int(1),\n  `FREE_PAGE_CLOCK` bigint(21) unsigned NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "POOL_ID": {
                "type": "int",
                "description": "Unique identifier for the buffer pool instance"
            },
            "LRU_POSITION": {
                "type": "bigint",
                "description": "Position of the page within the LRU list"
            },
            "SPACE": {
                "type": "int",
                "description": "The tablespace ID for the page"
            },
            "PAGE_NUMBER": {
                "type": "int",
                "description": "The number of the page within the tablespace"
            },
            "PAGE_TYPE": {
                "type": "varchar",
                "description": "The type of the page (e.g., index page, undo log page)"
            },
            "FLUSH_TYPE": {
                "type": "int",
                "description": "Describes the page's flush type"
            },
            "FIX_COUNT": {
                "type": "int",
                "description": "Number of processes currently accessing the page"
            },
            "IS_HASHED": {
                "type": "int",
                "description": "Indicates if the page is hashed into the buffer pool"
            },
            "NEWEST_MODIFICATION": {
                "type": "bigint",
                "description": "Log sequence number of the newest modification"
            },
            "OLDEST_MODIFICATION": {
                "type": "bigint",
                "description": "Log sequence number of the oldest modification"
            },
            "ACCESS_TIME": {
                "type": "bigint",
                "description": "The last access time of the page in the buffer pool"
            },
            "TABLE_NAME": {
                "type": "varchar",
                "description": "Name of the table the page belongs to, if applicable"
            },
            "INDEX_NAME": {
                "type": "varchar",
                "description": "Name of the index the page belongs to, if applicable"
            },
            "NUMBER_RECORDS": {
                "type": "bigint",
                "description": "Number of records on the page"
            },
            "DATA_SIZE": {
                "type": "bigint",
                "description": "Data size of the page in bytes"
            },
            "COMPRESSED_SIZE": {
                "type": "bigint",
                "description": "Size of the compressed page in bytes, if page is compressed"
            },
            "COMPRESSED": {
                "type": "int",
                "description": "Indicates whether the page is compressed"
            },
            "IO_FIX": {
                "type": "enum",
                "description": "Describes the current I/O fix for the page"
            },
            "IS_OLD": {
                "type": "int",
                "description": "Indicates if the page is in the 'old' sublist of the LRU list"
            },
            "FREE_PAGE_CLOCK": {
                "type": "bigint",
                "description": "The value of the free page clock when the page was last accessed"
            }
        },
        "description": "The `INNODB_BUFFER_PAGE_LRU` table provides insights into the InnoDB buffer pool's least recently used (LRU) list. It shows details about pages in the buffer pool, including their age, type, and whether they are dirty or clean, helping in analyzing the buffer pool's efficiency and performance.",
        "simple_ddl": "CREATE TABLE INNODB_BUFFER_PAGE_LRU (\n  POOL_ID int,\n  LRU_POSITION bigint,\n  SPACE int,\n  PAGE_NUMBER int,\n  PAGE_TYPE varchar,\n  FLUSH_TYPE int,\n  FIX_COUNT int,\n  IS_HASHED int,\n  NEWEST_MODIFICATION bigint,\n  OLDEST_MODIFICATION bigint,\n  ACCESS_TIME bigint,\n  TABLE_NAME varchar,\n  INDEX_NAME varchar,\n  NUMBER_RECORDS bigint,\n  DATA_SIZE bigint,\n  COMPRESSED_SIZE bigint,\n  COMPRESSED int,\n  IO_FIX enum,\n  IS_OLD int,\n  FREE_PAGE_CLOCK bigint\n);"
    },
    "INNODB_LOCKS": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_LOCKS` (\n  `lock_id` varchar(81) NOT NULL,\n  `lock_trx_id` bigint(21) unsigned NOT NULL,\n  `lock_mode` enum('S','S,GAP','X','X,GAP','IS','IS,GAP','IX','IX,GAP','AUTO_INC') NOT NULL,\n  `lock_type` enum('RECORD','TABLE') NOT NULL,\n  `lock_table` varchar(1024) NOT NULL,\n  `lock_index` varchar(1024),\n  `lock_space` int(11) unsigned,\n  `lock_page` int(11) unsigned,\n  `lock_rec` int(11) unsigned,\n  `lock_data` varchar(8192)\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "lock_id": {
                "type": "varchar",
                "description": "A unique identifier for the lock"
            },
            "lock_trx_id": {
                "type": "bigint",
                "description": "The transaction identifier associated with the lock"
            },
            "lock_mode": {
                "type": "enum",
                "description": "The mode of the lock, such as S (shared) or X (exclusive)"
            },
            "lock_type": {
                "type": "enum",
                "description": "The type of the lock, for example, TABLE, RECORD"
            },
            "lock_table": {
                "type": "varchar",
                "description": "The name of the table on which the lock is held"
            },
            "lock_index": {
                "type": "varchar",
                "description": "The name of the index on which the lock is held, if applicable"
            },
            "lock_space": {
                "type": "int",
                "description": "The tablespace identifier for the lock, if applicable"
            },
            "lock_page": {
                "type": "int",
                "description": "The page number within the tablespace for the lock, if applicable"
            },
            "lock_rec": {
                "type": "int",
                "description": "The heap number of the record locked, if applicable"
            },
            "lock_data": {
                "type": "varchar",
                "description": "The primary key value of the locked row, if it is a record lock"
            }
        },
        "description": "The `INNODB_LOCKS` table within the Information Schema provides information about each lock that an InnoDB transaction has requested but has yet to be granted, or has been granted. It is instrumental in diagnosing locking issues by detailing the specific type of locks, their status, and the objects they are associated with, facilitating troubleshooting of deadlock issues or lock contention in the database.",
        "simple_ddl": "CREATE TABLE INNODB_LOCKS (\n  lock_id varchar,\n  lock_trx_id bigint,\n  lock_mode enum,\n  lock_type enum,\n  lock_table varchar,\n  lock_index varchar,\n  lock_space int,\n  lock_page int,\n  lock_rec int,\n  lock_data varchar\n);"
    },
    "INNODB_FT_INDEX_TABLE": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_FT_INDEX_TABLE` (\n  `WORD` varchar(337) NOT NULL,\n  `FIRST_DOC_ID` bigint(21) unsigned NOT NULL,\n  `LAST_DOC_ID` bigint(21) unsigned NOT NULL,\n  `DOC_COUNT` bigint(21) unsigned NOT NULL,\n  `DOC_ID` bigint(21) unsigned NOT NULL,\n  `POSITION` bigint(21) unsigned NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "WORD": {
                "type": "varchar",
                "description": "The actual word indexed in the FULLTEXT index"
            },
            "FIRST_DOC_ID": {
                "type": "bigint",
                "description": "The first document ID where the word appears"
            },
            "LAST_DOC_ID": {
                "type": "bigint",
                "description": "The last document ID where the word appears"
            },
            "DOC_COUNT": {
                "type": "bigint",
                "description": "The number of documents in which the word appears"
            },
            "DOC_ID": {
                "type": "bigint",
                "description": "The document ID in the current row, relevant for the INNODB_FT_INDEX_CACHE table"
            },
            "POSITION": {
                "type": "bigint",
                "description": "The position of the word in the document, relevant for the INNODB_FT_INDEX_CACHE table"
            }
        },
        "description": "The `INNODB_FT_INDEX_TABLE` table in the Information Schema is used to display information about FULLTEXT indexes in InnoDB tables. It helps in analyzing and optimizing FULLTEXT search indexes by providing details on the indexes.",
        "simple_ddl": "CREATE TABLE INNODB_FT_INDEX_TABLE (\n  WORD varchar,\n  FIRST_DOC_ID bigint,\n  LAST_DOC_ID bigint,\n  DOC_COUNT bigint,\n  DOC_ID bigint,\n  POSITION bigint\n);"
    },
    "INNODB_CMPMEM": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_CMPMEM` (\n  `page_size` int(5) NOT NULL,\n  `buffer_pool_instance` int(11) NOT NULL,\n  `pages_used` int(11) NOT NULL,\n  `pages_free` int(11) NOT NULL,\n  `relocation_ops` bigint(21) NOT NULL,\n  `relocation_time` int(11) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "page_size": {
                "type": "int",
                "description": "Size of the compressed page in bytes."
            },
            "buffer_pool_instance": {
                "type": "int",
                "description": "ID of the buffer pool instance where the compression occurred."
            },
            "pages_used": {
                "type": "int",
                "description": "Number of pages currently used."
            },
            "pages_free": {
                "type": "int",
                "description": "Number of pages currently available."
            },
            "relocation_ops": {
                "type": "bigint",
                "description": "Number of relocation operations to make space for other pages."
            },
            "relocation_time": {
                "type": "int",
                "description": "Total time in milliseconds spent in relocation operations."
            }
        },
        "description": "The `INNODB_CMPMEM` table in the Information Schema of MariaDB is used for tracking the memory compression for InnoDB compressed tables. It provides information on the amount of memory allocated and used for compressed pages, aiding in the assessment and management of memory usage efficiency for compressed InnoDB tables.",
        "simple_ddl": "CREATE TABLE INNODB_CMPMEM (\n  page_size int,\n  buffer_pool_instance int,\n  pages_used int,\n  pages_free int,\n  relocation_ops bigint,\n  relocation_time int\n);"
    },
    "THREAD_POOL_GROUPS": {
        "ddl": "CREATE TEMPORARY TABLE `THREAD_POOL_GROUPS` (\n  `GROUP_ID` int(6) NOT NULL,\n  `CONNECTIONS` int(6) NOT NULL,\n  `THREADS` int(6) NOT NULL,\n  `ACTIVE_THREADS` int(6) NOT NULL,\n  `STANDBY_THREADS` int(6) NOT NULL,\n  `QUEUE_LENGTH` int(6) NOT NULL,\n  `HAS_LISTENER` tinyint(1) NOT NULL,\n  `IS_STALLED` tinyint(1) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "GROUP_ID": {
                "type": "int",
                "description": "Uniquely identifies a thread pool group within the THREAD_POOL_GROUPS table."
            },
            "CONNECTIONS": {
                "type": "int",
                "description": "Number of current connections associated with the thread pool group."
            },
            "THREADS": {
                "type": "int",
                "description": "Total number of threads within the thread pool group."
            },
            "ACTIVE_THREADS": {
                "type": "int",
                "description": "Number of threads that are actively processing requests."
            },
            "STANDBY_THREADS": {
                "type": "int",
                "description": "Number of threads standing by, ready to handle requests."
            },
            "QUEUE_LENGTH": {
                "type": "int",
                "description": "The length of the queue holding tasks waiting to be executed by threads."
            },
            "HAS_LISTENER": {
                "type": "tinyint",
                "description": "Indicates whether the thread pool group is listening for new connections (1 for true)."
            },
            "IS_STALLED": {
                "type": "tinyint",
                "description": "Indicates if the thread pool group is stalled (1 for true)."
            }
        },
        "description": "The `THREAD_POOL_GROUPS` table in MariaDB's Information Schema provides information about thread pool groups. It includes details such as the group number, number of threads, and statements processed, which are crucial for monitoring and tuning the performance of thread pools.",
        "simple_ddl": "CREATE TABLE THREAD_POOL_GROUPS (\n  GROUP_ID int,\n  CONNECTIONS int,\n  THREADS int,\n  ACTIVE_THREADS int,\n  STANDBY_THREADS int,\n  QUEUE_LENGTH int,\n  HAS_LISTENER tinyint,\n  IS_STALLED tinyint\n);"
    },
    "INNODB_CMP_PER_INDEX_RESET": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_CMP_PER_INDEX_RESET` (\n  `database_name` varchar(64) NOT NULL,\n  `table_name` varchar(64) NOT NULL,\n  `index_name` varchar(64) NOT NULL,\n  `compress_ops` int(11) NOT NULL,\n  `compress_ops_ok` int(11) NOT NULL,\n  `compress_time` int(11) NOT NULL,\n  `uncompress_ops` int(11) NOT NULL,\n  `uncompress_time` int(11) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "database_name": {
                "type": "varchar",
                "description": "The name of the schema containing the table for which the index compression information applies"
            },
            "table_name": {
                "type": "varchar",
                "description": "The name of the table for which the index compression information applies"
            },
            "index_name": {
                "type": "varchar",
                "description": "The name of the index for which the compression information is provided"
            },
            "compress_ops": {
                "type": "int",
                "description": "Number of times a B-tree page of the index was compressed"
            },
            "compress_ops_ok": {
                "type": "int",
                "description": "Number of times a B-tree page of the index was successfully compressed"
            },
            "compress_time": {
                "type": "int",
                "description": "Total time in milliseconds spent in attempts to compress B-tree pages of the index"
            },
            "uncompress_ops": {
                "type": "int",
                "description": "Number of times a B-tree page of the index was uncompressed"
            },
            "uncompress_time": {
                "type": "int",
                "description": "Total time in milliseconds spent in operations to uncompress B-tree pages of the index"
            }
        },
        "description": "The `INNODB_CMP_PER_INDEX_RESET` table in the Information Schema provides compressed table information on a per-index basis, specifically for those tables that use InnoDB compression. It is essentially used to reset the counters used to track compression operations for each index, allowing for monitoring and analysis of compression efficiency and performance over time.",
        "simple_ddl": "CREATE TABLE INNODB_CMP_PER_INDEX_RESET (\n  database_name varchar,\n  table_name varchar,\n  index_name varchar,\n  compress_ops int,\n  compress_ops_ok int,\n  compress_time int,\n  uncompress_ops int,\n  uncompress_time int\n);"
    },
    "INNODB_SYS_FOREIGN_COLS": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_SYS_FOREIGN_COLS` (\n  `ID` varchar(193) NOT NULL,\n  `FOR_COL_NAME` varchar(64) NOT NULL,\n  `REF_COL_NAME` varchar(64) NOT NULL,\n  `POS` int(11) unsigned NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "ID": {
                "type": "varchar",
                "description": "The identifier for the foreign key constraint, matches the ID in the INNODB_SYS_FOREIGN table"
            },
            "FOR_COL_NAME": {
                "type": "varchar",
                "description": "The name of the column in the table that has the foreign key"
            },
            "REF_COL_NAME": {
                "type": "varchar",
                "description": "The name of the referenced column in the referenced table"
            },
            "POS": {
                "type": "int",
                "description": "The position of the column within the key"
            }
        },
        "description": "The `INNODB_SYS_FOREIGN_COLS` table in the Information Schema provides detailed information about columns that are part of foreign keys in InnoDB tables. It includes the names of the columns in the foreign key and the referenced column in the referenced table.",
        "simple_ddl": "CREATE TABLE INNODB_SYS_FOREIGN_COLS (\n  ID varchar,\n  FOR_COL_NAME varchar,\n  REF_COL_NAME varchar,\n  POS int\n);"
    },
    "INNODB_FT_INDEX_CACHE": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_FT_INDEX_CACHE` (\n  `WORD` varchar(337) NOT NULL,\n  `FIRST_DOC_ID` bigint(21) unsigned NOT NULL,\n  `LAST_DOC_ID` bigint(21) unsigned NOT NULL,\n  `DOC_COUNT` bigint(21) unsigned NOT NULL,\n  `DOC_ID` bigint(21) unsigned NOT NULL,\n  `POSITION` bigint(21) unsigned NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "WORD": {
                "type": "varchar",
                "description": "The actual word from the FULLTEXT index."
            },
            "FIRST_DOC_ID": {
                "type": "bigint",
                "description": "The smallest document ID where the word was found."
            },
            "LAST_DOC_ID": {
                "type": "bigint",
                "description": "The largest document ID where the word was found."
            },
            "DOC_COUNT": {
                "type": "bigint",
                "description": "The number of documents containing the word."
            },
            "DOC_ID": {
                "type": "bigint",
                "description": "The ID of the document where the word was found."
            },
            "POSITION": {
                "type": "bigint",
                "description": "The position of the word within the document."
            }
        },
        "description": "The `INNODB_FT_INDEX_CACHE` table is used to store the in-memory full-text search index for InnoDB tables. It provides detailed information related to the full-text indexes, useful for optimizing and troubleshooting full-text search implementations.",
        "simple_ddl": "CREATE TABLE INNODB_FT_INDEX_CACHE (\n  WORD varchar,\n  FIRST_DOC_ID bigint,\n  LAST_DOC_ID bigint,\n  DOC_COUNT bigint,\n  DOC_ID bigint,\n  POSITION bigint\n);"
    },
    "INNODB_BUFFER_POOL_STATS": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_BUFFER_POOL_STATS` (\n  `POOL_ID` int(11) unsigned NOT NULL,\n  `POOL_SIZE` bigint(21) unsigned NOT NULL,\n  `FREE_BUFFERS` bigint(21) unsigned NOT NULL,\n  `DATABASE_PAGES` bigint(21) unsigned NOT NULL,\n  `OLD_DATABASE_PAGES` bigint(21) unsigned NOT NULL,\n  `MODIFIED_DATABASE_PAGES` bigint(21) unsigned NOT NULL,\n  `PENDING_DECOMPRESS` bigint(21) unsigned NOT NULL,\n  `PENDING_READS` bigint(21) unsigned NOT NULL,\n  `PENDING_FLUSH_LRU` bigint(21) unsigned NOT NULL,\n  `PENDING_FLUSH_LIST` bigint(21) unsigned NOT NULL,\n  `PAGES_MADE_YOUNG` bigint(21) unsigned NOT NULL,\n  `PAGES_NOT_MADE_YOUNG` bigint(21) unsigned NOT NULL,\n  `PAGES_MADE_YOUNG_RATE` float NOT NULL,\n  `PAGES_MADE_NOT_YOUNG_RATE` float NOT NULL,\n  `NUMBER_PAGES_READ` bigint(21) unsigned NOT NULL,\n  `NUMBER_PAGES_CREATED` bigint(21) unsigned NOT NULL,\n  `NUMBER_PAGES_WRITTEN` bigint(21) unsigned NOT NULL,\n  `PAGES_READ_RATE` float NOT NULL,\n  `PAGES_CREATE_RATE` float NOT NULL,\n  `PAGES_WRITTEN_RATE` float NOT NULL,\n  `NUMBER_PAGES_GET` bigint(21) unsigned NOT NULL,\n  `HIT_RATE` bigint(21) unsigned NOT NULL,\n  `YOUNG_MAKE_PER_THOUSAND_GETS` bigint(21) unsigned NOT NULL,\n  `NOT_YOUNG_MAKE_PER_THOUSAND_GETS` bigint(21) unsigned NOT NULL,\n  `NUMBER_PAGES_READ_AHEAD` bigint(21) unsigned NOT NULL,\n  `NUMBER_READ_AHEAD_EVICTED` bigint(21) unsigned NOT NULL,\n  `READ_AHEAD_RATE` float NOT NULL,\n  `READ_AHEAD_EVICTED_RATE` float NOT NULL,\n  `LRU_IO_TOTAL` bigint(21) unsigned NOT NULL,\n  `LRU_IO_CURRENT` bigint(21) unsigned NOT NULL,\n  `UNCOMPRESS_TOTAL` bigint(21) unsigned NOT NULL,\n  `UNCOMPRESS_CURRENT` bigint(21) unsigned NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "POOL_ID": {
                "type": "int",
                "description": "The buffer pool identifier"
            },
            "POOL_SIZE": {
                "type": "bigint",
                "description": "The size of the buffer pool, in pages"
            },
            "FREE_BUFFERS": {
                "type": "bigint",
                "description": "The number of free pages in the buffer pool"
            },
            "DATABASE_PAGES": {
                "type": "bigint",
                "description": "The number of pages used by the database in the buffer pool"
            },
            "OLD_DATABASE_PAGES": {
                "type": "bigint",
                "description": "The number of pages in the old sublist of the LRU list"
            },
            "MODIFIED_DATABASE_PAGES": {
                "type": "bigint",
                "description": "The number of pages modified since the last flush"
            },
            "PENDING_DECOMPRESS": {
                "type": "bigint",
                "description": "The number of pending decompress operations in the buffer pool"
            },
            "PENDING_READS": {
                "type": "bigint",
                "description": "The number of pending read operations in the buffer pool"
            },
            "PENDING_FLUSH_LRU": {
                "type": "bigint",
                "description": "The number of pages in the LRU list pending flush"
            },
            "PENDING_FLUSH_LIST": {
                "type": "bigint",
                "description": "The number of pages in the flush list pending flush"
            },
            "PAGES_MADE_YOUNG": {
                "type": "bigint",
                "description": "The number of pages made young"
            },
            "PAGES_NOT_MADE_YOUNG": {
                "type": "bigint",
                "description": "The number of pages that were not made young"
            },
            "PAGES_MADE_YOUNG_RATE": {
                "type": "float",
                "description": "The rate at which pages are made young per second"
            },
            "PAGES_MADE_NOT_YOUNG_RATE": {
                "type": "float",
                "description": "The rate at which pages are not made young per second"
            },
            "NUMBER_PAGES_READ": {
                "type": "bigint",
                "description": "The number of pages read from the buffer pool"
            },
            "NUMBER_PAGES_CREATED": {
                "type": "bigint",
                "description": "The number of pages created in the buffer pool"
            },
            "NUMBER_PAGES_WRITTEN": {
                "type": "bigint",
                "description": "The number of pages written from the buffer pool"
            },
            "PAGES_READ_RATE": {
                "type": "float",
                "description": "The rate at which pages are read per second"
            },
            "PAGES_CREATE_RATE": {
                "type": "float",
                "description": "The rate at which pages are created per second"
            },
            "PAGES_WRITTEN_RATE": {
                "type": "float",
                "description": "The rate at which pages are written per second"
            },
            "NUMBER_PAGES_GET": {
                "type": "bigint",
                "description": "The number of page requests served by the buffer pool"
            },
            "HIT_RATE": {
                "type": "bigint",
                "description": "The cache hit rate in the buffer pool"
            },
            "YOUNG_MAKE_PER_THOUSAND_GETS": {
                "type": "bigint",
                "description": "The number of pages made young per thousand gets"
            },
            "NOT_YOUNG_MAKE_PER_THOUSAND_GETS": {
                "type": "bigint",
                "description": "The number of pages not made young per thousand gets"
            },
            "NUMBER_PAGES_READ_AHEAD": {
                "type": "bigint",
                "description": "The number of pages read into the buffer pool as part of read-ahead"
            },
            "NUMBER_READ_AHEAD_EVICTED": {
                "type": "bigint",
                "description": "The number of read-ahead pages that were evicted without being accessed"
            },
            "READ_AHEAD_RATE": {
                "type": "float",
                "description": "The rate at which pages are read ahead per second"
            },
            "READ_AHEAD_EVICTED_RATE": {
                "type": "float",
                "description": "The rate at which read-ahead pages are evicted per second"
            },
            "LRU_IO_TOTAL": {
                "type": "bigint",
                "description": "The total number of input/output operations done as part of LRU maintenance"
            },
            "LRU_IO_CURRENT": {
                "type": "bigint",
                "description": "The number of current input/output operations done as part of LRU maintenance"
            },
            "UNCOMPRESS_TOTAL": {
                "type": "bigint",
                "description": "The total number of uncompressed operations in the buffer pool"
            },
            "UNCOMPRESS_CURRENT": {
                "type": "bigint",
                "description": "The number of current uncompressed operations in the buffer pool"
            }
        },
        "description": "The `INNODB_BUFFER_POOL_STATS` table within the Information Schema provides real-time statistics about the InnoDB buffer pool. It includes various metrics such as efficiency, usage rates, and operational statistics, essential for monitoring and tuning the performance of the InnoDB storage engine.",
        "simple_ddl": "CREATE TABLE INNODB_BUFFER_POOL_STATS (\n  POOL_ID int,\n  POOL_SIZE bigint,\n  FREE_BUFFERS bigint,\n  DATABASE_PAGES bigint,\n  OLD_DATABASE_PAGES bigint,\n  MODIFIED_DATABASE_PAGES bigint,\n  PENDING_DECOMPRESS bigint,\n  PENDING_READS bigint,\n  PENDING_FLUSH_LRU bigint,\n  PENDING_FLUSH_LIST bigint,\n  PAGES_MADE_YOUNG bigint,\n  PAGES_NOT_MADE_YOUNG bigint,\n  PAGES_MADE_YOUNG_RATE float,\n  PAGES_MADE_NOT_YOUNG_RATE float,\n  NUMBER_PAGES_READ bigint,\n  NUMBER_PAGES_CREATED bigint,\n  NUMBER_PAGES_WRITTEN bigint,\n  PAGES_READ_RATE float,\n  PAGES_CREATE_RATE float,\n  PAGES_WRITTEN_RATE float,\n  NUMBER_PAGES_GET bigint,\n  HIT_RATE bigint,\n  YOUNG_MAKE_PER_THOUSAND_GETS bigint,\n  NOT_YOUNG_MAKE_PER_THOUSAND_GETS bigint,\n  NUMBER_PAGES_READ_AHEAD bigint,\n  NUMBER_READ_AHEAD_EVICTED bigint,\n  READ_AHEAD_RATE float,\n  READ_AHEAD_EVICTED_RATE float,\n  LRU_IO_TOTAL bigint,\n  LRU_IO_CURRENT bigint,\n  UNCOMPRESS_TOTAL bigint,\n  UNCOMPRESS_CURRENT bigint\n);"
    },
    "INNODB_FT_BEING_DELETED": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_FT_BEING_DELETED` (\n  `DOC_ID` bigint(21) unsigned NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "DOC_ID": {
                "type": "bigint",
                "description": "A unique identifier for a document that is being deleted from a FULLTEXT index in the process"
            }
        },
        "description": "The `INNODB_FT_BEING_DELETED` table from the Information Schema provides insight into the full-text index cache during reorganization in MariaDB, specifically showing which words are currently being marked for deletion. It is particularly useful for monitoring and debugging full-text index operations.",
        "simple_ddl": "CREATE TABLE INNODB_FT_BEING_DELETED (\n  DOC_ID bigint\n);"
    },
    "INNODB_SYS_FOREIGN": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_SYS_FOREIGN` (\n  `ID` varchar(193) NOT NULL,\n  `FOR_NAME` varchar(193) NOT NULL,\n  `REF_NAME` varchar(193) NOT NULL,\n  `N_COLS` int(11) unsigned NOT NULL,\n  `TYPE` int(11) unsigned NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "ID": {
                "type": "varchar",
                "description": "Identifier for the foreign key constraint"
            },
            "FOR_NAME": {
                "type": "varchar",
                "description": "The name of the child table in the foreign key relationship"
            },
            "REF_NAME": {
                "type": "varchar",
                "description": "The name of the parent table in the foreign key relationship"
            },
            "N_COLS": {
                "type": "int",
                "description": "Number of columns in the foreign key"
            },
            "TYPE": {
                "type": "int",
                "description": "Type of the foreign key relationship"
            }
        },
        "description": "The `INNODB_SYS_FOREIGN` table provides details about foreign key constraints within the InnoDB storage engine. It specifically includes information on the constraint names, the table containing the constraint, and the referenced table.",
        "simple_ddl": "CREATE TABLE INNODB_SYS_FOREIGN (\n  ID varchar,\n  FOR_NAME varchar,\n  REF_NAME varchar,\n  N_COLS int,\n  TYPE int\n);"
    },
    "INNODB_CMPMEM_RESET": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_CMPMEM_RESET` (\n  `page_size` int(5) NOT NULL,\n  `buffer_pool_instance` int(11) NOT NULL,\n  `pages_used` int(11) NOT NULL,\n  `pages_free` int(11) NOT NULL,\n  `relocation_ops` bigint(21) NOT NULL,\n  `relocation_time` int(11) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "page_size": {
                "type": "int",
                "description": "The compressed page size in bytes."
            },
            "buffer_pool_instance": {
                "type": "int",
                "description": "The ID of the buffer pool instance."
            },
            "pages_used": {
                "type": "int",
                "description": "Number of pages currently used."
            },
            "pages_free": {
                "type": "int",
                "description": "Number of pages currently free."
            },
            "relocation_ops": {
                "type": "bigint",
                "description": "Number of times a page was relocated."
            },
            "relocation_time": {
                "type": "int",
                "description": "Total time spent in relocating pages, in microseconds."
            }
        },
        "description": "The `INNODB_CMPMEM_RESET` table in the Information Schema is used to reset the status counters for the compressed InnoDB pages without resetting other status variables in INNODB_CMPMEM. This allows users to monitor the effectiveness and efficiency of page compression in InnoDB over time.",
        "simple_ddl": "CREATE TABLE INNODB_CMPMEM_RESET (\n  page_size int,\n  buffer_pool_instance int,\n  pages_used int,\n  pages_free int,\n  relocation_ops bigint,\n  relocation_time int\n);"
    },
    "INNODB_FT_DEFAULT_STOPWORD": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_FT_DEFAULT_STOPWORD` (\n  `value` varchar(18) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "value": {
                "type": "varchar",
                "description": "Contains the default stopwords for InnoDB full-text search indexes"
            }
        },
        "description": "The `INNODB_FT_DEFAULT_STOPWORD` table within the Information Schema provides a list of default stop words for the InnoDB full-text search indexes. These are words that are omitted from the index because they are too common to be useful in searching.",
        "simple_ddl": "CREATE TABLE INNODB_FT_DEFAULT_STOPWORD (\n  value varchar\n);"
    },
    "INNODB_SYS_TABLES": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_SYS_TABLES` (\n  `TABLE_ID` bigint(21) unsigned NOT NULL,\n  `NAME` varchar(655) NOT NULL,\n  `FLAG` int(11) NOT NULL,\n  `N_COLS` int(11) unsigned NOT NULL,\n  `SPACE` int(11) unsigned NOT NULL,\n  `ROW_FORMAT` enum('Redundant','Compact','Compressed','Dynamic'),\n  `ZIP_PAGE_SIZE` int(11) unsigned NOT NULL,\n  `SPACE_TYPE` enum('Single','System')\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "TABLE_ID": {
                "type": "bigint",
                "description": "A unique identifier for each table within the InnoDB storage engine"
            },
            "NAME": {
                "type": "varchar",
                "description": "The name of the table, including the database name"
            },
            "FLAG": {
                "type": "int",
                "description": "A number that represents certain characteristics of the table, such as whether it's compressed"
            },
            "N_COLS": {
                "type": "int",
                "description": "The number of columns in the table, including virtual generated columns"
            },
            "SPACE": {
                "type": "int",
                "description": "The tablespace identifier where the table is stored"
            },
            "ROW_FORMAT": {
                "type": "enum",
                "description": "The format used to store rows in the table (e.g., Redundant, Compact, Dynamic, Compressed)"
            },
            "ZIP_PAGE_SIZE": {
                "type": "int",
                "description": "The size of the compressed page, applicable only for tables with ROW_FORMAT=Compressed"
            },
            "SPACE_TYPE": {
                "type": "enum",
                "description": "The type of the tablespace, indicating whether it\u2019s a system, undo log, or user tablespace"
            }
        },
        "description": "The `INNODB_SYS_TABLES` table from the Information Schema provides metadata about InnoDB tables within the database. It includes information such as table names, IDs, the number of rows, and other details crucial for understanding the structure and characteristics of InnoDB tables.",
        "simple_ddl": "CREATE TABLE INNODB_SYS_TABLES (\n  TABLE_ID bigint,\n  NAME varchar,\n  FLAG int,\n  N_COLS int,\n  SPACE int,\n  ROW_FORMAT enum,\n  ZIP_PAGE_SIZE int,\n  SPACE_TYPE enum\n);"
    },
    "INNODB_SYS_COLUMNS": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_SYS_COLUMNS` (\n  `TABLE_ID` bigint(21) unsigned NOT NULL,\n  `NAME` varchar(64) NOT NULL,\n  `POS` bigint(21) unsigned NOT NULL,\n  `MTYPE` int(11) NOT NULL,\n  `PRTYPE` int(11) NOT NULL,\n  `LEN` int(11) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "TABLE_ID": {
                "type": "bigint",
                "description": "An internal identifier for the table, matching the TABLE_ID in INNODB_SYS_TABLES"
            },
            "NAME": {
                "type": "varchar",
                "description": "The name of the column"
            },
            "POS": {
                "type": "bigint",
                "description": "The position of the column within the table, starting from 0"
            },
            "MTYPE": {
                "type": "int",
                "description": "The main datatype of the column, displayed as an integer"
            },
            "PRTYPE": {
                "type": "int",
                "description": "Precise datatype and flags of the column, encoded as an integer"
            },
            "LEN": {
                "type": "int",
                "description": "The maximum length of the column in bytes"
            }
        },
        "description": "The `INNODB_SYS_COLUMNS` table within the Information Schema provides detailed information about columns in InnoDB tables. It includes the column name, data type, position in the table, and other metadata essential for understanding the structure of InnoDB tables.",
        "simple_ddl": "CREATE TABLE INNODB_SYS_COLUMNS (\n  TABLE_ID bigint,\n  NAME varchar,\n  POS bigint,\n  MTYPE int,\n  PRTYPE int,\n  LEN int\n);"
    },
    "INNODB_SYS_TABLESPACES": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_SYS_TABLESPACES` (\n  `SPACE` int(11) unsigned NOT NULL,\n  `NAME` varchar(655) NOT NULL,\n  `FLAG` int(11) unsigned NOT NULL,\n  `ROW_FORMAT` varchar(22),\n  `PAGE_SIZE` int(11) unsigned NOT NULL,\n  `FILENAME` varchar(512) NOT NULL,\n  `FS_BLOCK_SIZE` int(11) unsigned NOT NULL,\n  `FILE_SIZE` bigint(21) unsigned NOT NULL,\n  `ALLOCATED_SIZE` bigint(21) unsigned NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "SPACE": {
                "type": "int",
                "description": "Unique tablespace ID"
            },
            "NAME": {
                "type": "varchar",
                "description": "The name of the tablespace"
            },
            "FLAG": {
                "type": "int",
                "description": "Combination of flags that convey information about the tablespace format and storage"
            },
            "ROW_FORMAT": {
                "type": "varchar",
                "description": "Format of the rows in the tablespace (Compact, Redundant, Dynamic, or Compressed)"
            },
            "PAGE_SIZE": {
                "type": "int",
                "description": "The page size in bytes for the tablespace"
            },
            "FILENAME": {
                "type": "varchar",
                "description": "The file path to the tablespace file"
            },
            "FS_BLOCK_SIZE": {
                "type": "int",
                "description": "File system block size in bytes"
            },
            "FILE_SIZE": {
                "type": "bigint",
                "description": "The size of the file that contains the tablespace, in bytes"
            },
            "ALLOCATED_SIZE": {
                "type": "bigint",
                "description": "The size of the space allocated for the tablespace, in bytes"
            }
        },
        "description": "The `INNODB_SYS_TABLESPACES` table in the Information Schema provides metadata about InnoDB tablespaces. It includes details such as the tablespace name, file path, and size, which are useful for monitoring and managing the physical storage of InnoDB data.",
        "simple_ddl": "CREATE TABLE INNODB_SYS_TABLESPACES (\n  SPACE int,\n  NAME varchar,\n  FLAG int,\n  ROW_FORMAT varchar,\n  PAGE_SIZE int,\n  FILENAME varchar,\n  FS_BLOCK_SIZE int,\n  FILE_SIZE bigint,\n  ALLOCATED_SIZE bigint\n);"
    },
    "INNODB_SYS_INDEXES": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_SYS_INDEXES` (\n  `INDEX_ID` bigint(21) unsigned NOT NULL,\n  `NAME` varchar(64) NOT NULL,\n  `TABLE_ID` bigint(21) unsigned NOT NULL,\n  `TYPE` int(11) NOT NULL,\n  `N_FIELDS` int(11) NOT NULL,\n  `PAGE_NO` int(11),\n  `SPACE` int(11),\n  `MERGE_THRESHOLD` int(11) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "INDEX_ID": {
                "type": "bigint",
                "description": "A unique identifier for the index within the database"
            },
            "NAME": {
                "type": "varchar",
                "description": "The name of the index"
            },
            "TABLE_ID": {
                "type": "bigint",
                "description": "A unique identifier for the table that the index belongs to"
            },
            "TYPE": {
                "type": "int",
                "description": "The type of index, indicating if it's clustered or secondary and other characteristics"
            },
            "N_FIELDS": {
                "type": "int",
                "description": "The number of fields included in the index"
            },
            "PAGE_NO": {
                "type": "int",
                "description": "The page number in the InnoDB tablespace where the index is stored"
            },
            "SPACE": {
                "type": "int",
                "description": "The tablespace identifier that the index tablespace resides in"
            },
            "MERGE_THRESHOLD": {
                "type": "int",
                "description": "The threshold percentage for merging index pages when they become too fragmented"
            }
        },
        "description": "The `INNODB_SYS_INDEXES` table is part of the Information Schema in MariaDB and provides metadata about InnoDB indexes. It includes details like the index name, the table it belongs to, the number of fields in the index, and whether it is a unique index.",
        "simple_ddl": "CREATE TABLE INNODB_SYS_INDEXES (\n  INDEX_ID bigint,\n  NAME varchar,\n  TABLE_ID bigint,\n  TYPE int,\n  N_FIELDS int,\n  PAGE_NO int,\n  SPACE int,\n  MERGE_THRESHOLD int\n);"
    },
    "INNODB_BUFFER_PAGE": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_BUFFER_PAGE` (\n  `POOL_ID` int(11) unsigned NOT NULL,\n  `BLOCK_ID` bigint(21) unsigned NOT NULL,\n  `SPACE` int(11) unsigned NOT NULL,\n  `PAGE_NUMBER` int(11) unsigned NOT NULL,\n  `PAGE_TYPE` varchar(64),\n  `FLUSH_TYPE` int(11) unsigned NOT NULL,\n  `FIX_COUNT` int(11) unsigned NOT NULL,\n  `IS_HASHED` int(1) NOT NULL,\n  `NEWEST_MODIFICATION` bigint(21) unsigned NOT NULL,\n  `OLDEST_MODIFICATION` bigint(21) unsigned NOT NULL,\n  `ACCESS_TIME` bigint(21) unsigned NOT NULL,\n  `TABLE_NAME` varchar(1024),\n  `INDEX_NAME` varchar(64),\n  `NUMBER_RECORDS` bigint(21) unsigned NOT NULL,\n  `DATA_SIZE` bigint(21) unsigned NOT NULL,\n  `COMPRESSED_SIZE` bigint(21) unsigned NOT NULL,\n  `PAGE_STATE` enum('NOT_USED','MEMORY','REMOVE_HASH','FILE_PAGE') NOT NULL,\n  `IO_FIX` enum('IO_NONE','IO_READ','IO_WRITE') NOT NULL,\n  `IS_OLD` int(1) NOT NULL,\n  `FREE_PAGE_CLOCK` bigint(21) unsigned NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "POOL_ID": {
                "type": "int",
                "description": "Identifier for the buffer pool instance"
            },
            "BLOCK_ID": {
                "type": "bigint",
                "description": "Block identifier"
            },
            "SPACE": {
                "type": "int",
                "description": "Tablespace identifier"
            },
            "PAGE_NUMBER": {
                "type": "int",
                "description": "Page number within the tablespace"
            },
            "PAGE_TYPE": {
                "type": "varchar",
                "description": "Type of the page (e.g., INDEX, UNDO_LOG, etc.)"
            },
            "FLUSH_TYPE": {
                "type": "int",
                "description": "Type of flush operation performed on the page"
            },
            "FIX_COUNT": {
                "type": "int",
                "description": "Number of current page locks"
            },
            "IS_HASHED": {
                "type": "int",
                "description": "Whether the page is hashed into the buffer pool"
            },
            "NEWEST_MODIFICATION": {
                "type": "bigint",
                "description": "Log sequence number of the newest modification"
            },
            "OLDEST_MODIFICATION": {
                "type": "bigint",
                "description": "Log sequence number of the oldest modification"
            },
            "ACCESS_TIME": {
                "type": "bigint",
                "description": "The last time the page was accessed"
            },
            "TABLE_NAME": {
                "type": "varchar",
                "description": "Name of the table to which the page belongs"
            },
            "INDEX_NAME": {
                "type": "varchar",
                "description": "Name of the index to which the page belongs, if applicable"
            },
            "NUMBER_RECORDS": {
                "type": "bigint",
                "description": "Number of records stored in the page"
            },
            "DATA_SIZE": {
                "type": "bigint",
                "description": "Data size of the page in bytes"
            },
            "COMPRESSED_SIZE": {
                "type": "bigint",
                "description": "Compressed size of the page in bytes, if applicable"
            },
            "PAGE_STATE": {
                "type": "enum",
                "description": "Current state of the page (e.g., FREE, NOT_FREE, etc.)"
            },
            "IO_FIX": {
                "type": "enum",
                "description": "Current I/O fix for the page (e.g., IO_NONE, IO_READ, etc.)"
            },
            "IS_OLD": {
                "type": "int",
                "description": "Whether the page is in the old blocks sub-list"
            },
            "FREE_PAGE_CLOCK": {
                "type": "bigint",
                "description": "Value of the free page clock at the time the page was last made free"
            }
        },
        "description": "The `INNODB_BUFFER_PAGE` table in the Information Schema of MariaDB provides detailed information on each page inside the InnoDB buffer pool. It includes details such as the page number, page type, tablespace ID, and whether the page is fixed or hashed, among other metrics, helping in the analysis and optimization of the InnoDB buffer pool usage.",
        "simple_ddl": "CREATE TABLE INNODB_BUFFER_PAGE (\n  POOL_ID int,\n  BLOCK_ID bigint,\n  SPACE int,\n  PAGE_NUMBER int,\n  PAGE_TYPE varchar,\n  FLUSH_TYPE int,\n  FIX_COUNT int,\n  IS_HASHED int,\n  NEWEST_MODIFICATION bigint,\n  OLDEST_MODIFICATION bigint,\n  ACCESS_TIME bigint,\n  TABLE_NAME varchar,\n  INDEX_NAME varchar,\n  NUMBER_RECORDS bigint,\n  DATA_SIZE bigint,\n  COMPRESSED_SIZE bigint,\n  PAGE_STATE enum,\n  IO_FIX enum,\n  IS_OLD int,\n  FREE_PAGE_CLOCK bigint\n);"
    },
    "INNODB_SYS_VIRTUAL": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_SYS_VIRTUAL` (\n  `TABLE_ID` bigint(21) unsigned NOT NULL,\n  `POS` int(11) unsigned NOT NULL,\n  `BASE_POS` int(11) unsigned NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "TABLE_ID": {
                "type": "bigint",
                "description": "The table ID that owns the virtual column"
            },
            "POS": {
                "type": "int",
                "description": "The position of the virtual column in the table"
            },
            "BASE_POS": {
                "type": "int",
                "description": "The base column position that the virtual column is based on"
            }
        },
        "description": "The `INNODB_SYS_VIRTUAL` table provides information about InnoDB virtual (computed) columns in tables. It is useful for understanding and managing features related to virtual columns, such as their definitions and which columns are virtual within the InnoDB storage engine.",
        "simple_ddl": "CREATE TABLE INNODB_SYS_VIRTUAL (\n  TABLE_ID bigint,\n  POS int,\n  BASE_POS int\n);"
    },
    "USER_VARIABLES": {
        "ddl": "CREATE TEMPORARY TABLE `user_variables` (\n  `VARIABLE_NAME` varchar(64) NOT NULL,\n  `VARIABLE_VALUE` varchar(2048),\n  `VARIABLE_TYPE` varchar(64) NOT NULL,\n  `CHARACTER_SET_NAME` varchar(32)\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "VARIABLE_NAME": {
                "type": "varchar",
                "description": "The name of the user-defined variable."
            },
            "VARIABLE_VALUE": {
                "type": "varchar",
                "description": "The current value of the user-defined variable."
            },
            "VARIABLE_TYPE": {
                "type": "varchar",
                "description": "The type of the variable, such as USER or SESSION."
            },
            "CHARACTER_SET_NAME": {
                "type": "varchar",
                "description": "The name of the character set that the variable value is stored in."
            }
        },
        "description": "The `USER_VARIABLES` table in the MariaDB Information Schema provides details about user-defined variables for the current session. It displays the variables' names, their data types, and their values, aiding in debugging and monitoring user-defined variable usage.",
        "simple_ddl": "CREATE TABLE user_variables (\n  VARIABLE_NAME varchar,\n  VARIABLE_VALUE varchar,\n  VARIABLE_TYPE varchar,\n  CHARACTER_SET_NAME varchar\n);"
    },
    "INNODB_TABLESPACES_ENCRYPTION": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_TABLESPACES_ENCRYPTION` (\n  `SPACE` int(11) unsigned NOT NULL,\n  `NAME` varchar(655),\n  `ENCRYPTION_SCHEME` int(11) unsigned NOT NULL,\n  `KEYSERVER_REQUESTS` int(11) unsigned NOT NULL,\n  `MIN_KEY_VERSION` int(11) unsigned NOT NULL,\n  `CURRENT_KEY_VERSION` int(11) unsigned NOT NULL,\n  `KEY_ROTATION_PAGE_NUMBER` bigint(21) unsigned,\n  `KEY_ROTATION_MAX_PAGE_NUMBER` bigint(21) unsigned,\n  `CURRENT_KEY_ID` int(11) unsigned NOT NULL,\n  `ROTATING_OR_FLUSHING` int(1) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "SPACE": {
                "type": "int",
                "description": "The space ID of the tablespace"
            },
            "NAME": {
                "type": "varchar",
                "description": "Name of the tablespace"
            },
            "ENCRYPTION_SCHEME": {
                "type": "int",
                "description": "Encryption scheme being used"
            },
            "KEYSERVER_REQUESTS": {
                "type": "int",
                "description": "Number of requests made to the key server"
            },
            "MIN_KEY_VERSION": {
                "type": "int",
                "description": "Minimum encryption key version"
            },
            "CURRENT_KEY_VERSION": {
                "type": "int",
                "description": "Current encryption key version in use"
            },
            "KEY_ROTATION_PAGE_NUMBER": {
                "type": "bigint",
                "description": "The page number where key rotation is currently happening"
            },
            "KEY_ROTATION_MAX_PAGE_NUMBER": {
                "type": "bigint",
                "description": "The maximum page number for key rotation"
            },
            "CURRENT_KEY_ID": {
                "type": "int",
                "description": "The ID of the current encryption key"
            },
            "ROTATING_OR_FLUSHING": {
                "type": "int",
                "description": "Shows whether a re-encrypt operation or flushing is happening"
            }
        },
        "description": "The `INNODB_TABLESPACES_ENCRYPTION` table in the Information Schema provides detailed information about the encryption settings of InnoDB tablespaces. It helps in monitoring and managing the encryption status of tables within the database, including whether they are currently encrypted and what encryption algorithm is being used.",
        "simple_ddl": "CREATE TABLE INNODB_TABLESPACES_ENCRYPTION (\n  SPACE int,\n  NAME varchar,\n  ENCRYPTION_SCHEME int,\n  KEYSERVER_REQUESTS int,\n  MIN_KEY_VERSION int,\n  CURRENT_KEY_VERSION int,\n  KEY_ROTATION_PAGE_NUMBER bigint,\n  KEY_ROTATION_MAX_PAGE_NUMBER bigint,\n  CURRENT_KEY_ID int,\n  ROTATING_OR_FLUSHING int\n);"
    },
    "INNODB_LOCK_WAITS": {
        "ddl": "CREATE TEMPORARY TABLE `INNODB_LOCK_WAITS` (\n  `requesting_trx_id` bigint(21) unsigned NOT NULL,\n  `requested_lock_id` varchar(81) NOT NULL,\n  `blocking_trx_id` bigint(21) unsigned NOT NULL,\n  `blocking_lock_id` varchar(81) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "requesting_trx_id": {
                "type": "bigint",
                "description": "The transaction ID of the transaction requesting the lock"
            },
            "requested_lock_id": {
                "type": "varchar",
                "description": "The lock ID of the lock being requested"
            },
            "blocking_trx_id": {
                "type": "bigint",
                "description": "The transaction ID of the transaction holding the lock that is blocking the requesting transaction"
            },
            "blocking_lock_id": {
                "type": "varchar",
                "description": "The lock ID of the lock that is blocking the requesting transaction"
            }
        },
        "description": "The `INNODB_LOCK_WAITS` table provides information on which locks are waiting for other locks to be released in the InnoDB storage engine. It helps in identifying and analyzing deadlock issues by showing the blocking and waiting lock relationships.",
        "simple_ddl": "CREATE TABLE INNODB_LOCK_WAITS (\n  requesting_trx_id bigint,\n  requested_lock_id varchar,\n  blocking_trx_id bigint,\n  blocking_lock_id varchar\n);"
    },
    "THREAD_POOL_STATS": {
        "ddl": "CREATE TEMPORARY TABLE `THREAD_POOL_STATS` (\n  `GROUP_ID` int(6) NOT NULL,\n  `THREAD_CREATIONS` bigint(19) NOT NULL,\n  `THREAD_CREATIONS_DUE_TO_STALL` bigint(19) NOT NULL,\n  `WAKES` bigint(19) NOT NULL,\n  `WAKES_DUE_TO_STALL` bigint(19) NOT NULL,\n  `THROTTLES` bigint(19) NOT NULL,\n  `STALLS` bigint(19) NOT NULL,\n  `POLLS_BY_LISTENER` bigint(19) NOT NULL,\n  `POLLS_BY_WORKER` bigint(19) NOT NULL,\n  `DEQUEUES_BY_LISTENER` bigint(19) NOT NULL,\n  `DEQUEUES_BY_WORKER` bigint(19) NOT NULL\n) ENGINE=MEMORY DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci",
        "columns": {
            "GROUP_ID": {
                "type": "int",
                "description": "Identifies the thread pool group"
            },
            "THREAD_CREATIONS": {
                "type": "bigint",
                "description": "Number of threads created in the thread pool"
            },
            "THREAD_CREATIONS_DUE_TO_STALL": {
                "type": "bigint",
                "description": "Count of threads created due to stalls in the thread pool"
            },
            "WAKES": {
                "type": "bigint",
                "description": "Number of wake events in the thread pool"
            },
            "WAKES_DUE_TO_STALL": {
                "type": "bigint",
                "description": "Count of wake events caused by stalls in the thread pool"
            },
            "THROTTLES": {
                "type": "bigint",
                "description": "Number of throttle events in the thread pool"
            },
            "STALLS": {
                "type": "bigint",
                "description": "Number of stall events in the thread pool"
            },
            "POLLS_BY_LISTENER": {
                "type": "bigint",
                "description": "Count of polls performed by listeners in the thread pool"
            },
            "POLLS_BY_WORKER": {
                "type": "bigint",
                "description": "Count of polls performed by workers in the thread pool"
            },
            "DEQUEUES_BY_LISTENER": {
                "type": "bigint",
                "description": "Number of dequeues performed by listeners in the thread pool"
            },
            "DEQUEUES_BY_WORKER": {
                "type": "bigint",
                "description": "Number of dequeues performed by workers in the thread pool"
            }
        },
        "description": "The `THREAD_POOL_STATS` table in the MariaDB Information Schema provides statistics about the thread pool's performance. It includes information regarding the number of threads, statements processed, and waiting times, useful for monitoring and optimizing server performance with the thread pool plugin.",
        "simple_ddl": "CREATE TABLE THREAD_POOL_STATS (\n  GROUP_ID int,\n  THREAD_CREATIONS bigint,\n  THREAD_CREATIONS_DUE_TO_STALL bigint,\n  WAKES bigint,\n  WAKES_DUE_TO_STALL bigint,\n  THROTTLES bigint,\n  STALLS bigint,\n  POLLS_BY_LISTENER bigint,\n  POLLS_BY_WORKER bigint,\n  DEQUEUES_BY_LISTENER bigint,\n  DEQUEUES_BY_WORKER bigint\n);"
    }
}