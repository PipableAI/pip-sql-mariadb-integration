{
    "ALL_PLUGINS": "CREATE TABLE ALL_PLUGINS (\n  PLUGIN_NAME varchar, --The name of the plugin\n  PLUGIN_VERSION varchar, --The version of the plugin\n  PLUGIN_STATUS varchar, --The status of the plugin (e.g., ACTIVE, INACTIVE)\n  PLUGIN_TYPE varchar, --The type of the plugin (e.g., STORAGE ENGINE, FUNCTION)\n  PLUGIN_TYPE_VERSION varchar, --The version of the plugin type\n  PLUGIN_LIBRARY varchar, --The name of the library that implements the plugin, if any\n  PLUGIN_LIBRARY_VERSION varchar, --The version of the library that implements the plugin, if it is specified\n  PLUGIN_AUTHOR varchar, --The author of the plugin\n  PLUGIN_DESCRIPTION longtext, --A description of what the plugin does\n  PLUGIN_LICENSE varchar, --The licensing information for the plugin\n  LOAD_OPTION varchar, --Indicates how the plugin is loaded (e.g., ON, OFF, FORCE, FORCE_PLUS_PERMANENT)\n  PLUGIN_MATURITY varchar, --The maturity level of the plugin (e.g., Unknown, Experimental, Beta, Stable)\n  PLUGIN_AUTH_VERSION varchar, --The version of the authentication method used by the plugin, if applicable\n);",
    "APPLICABLE_ROLES": "CREATE TABLE APPLICABLE_ROLES (\n  GRANTEE varchar, --The user to whom the role is applicable, including the host from which they connect.\n  ROLE_NAME varchar, --The name of the applicable role.\n  IS_GRANTABLE varchar, --Indicates whether the grantee is permitted to grant this role to others.\n  IS_DEFAULT varchar, --Specifies whether the role is a default role for the grantee.\n);",
    "CHARACTER_SETS": "CREATE TABLE CHARACTER_SETS (\n  CHARACTER_SET_NAME varchar, --Name of the character set.\n  DEFAULT_COLLATE_NAME varchar, --Name of the default collation for the character set.\n  DESCRIPTION varchar, --Description of the character set.\n  MAXLEN bigint, --Maximum length (in bytes) of a string in this character set.\n);",
    "CHECK_CONSTRAINTS": "CREATE TABLE CHECK_CONSTRAINTS (\n  CONSTRAINT_CATALOG varchar, --The catalog to which the constraint belongs, always 'def' in MariaDB\n  CONSTRAINT_SCHEMA varchar, --The schema (database) to which the constraint belongs\n  TABLE_NAME varchar, --The name of the table on which the constraint is defined\n  CONSTRAINT_NAME varchar, --The name of the constraint\n  LEVEL varchar, --Indicates whether the constraint is at the column level or table level\n  CHECK_CLAUSE longtext, --The SQL-expression defining the constraint\n);",
    "COLLATIONS": "CREATE TABLE COLLATIONS (\n  COLLATION_NAME varchar, --The name of the collation.\n  CHARACTER_SET_NAME varchar, --The name of the character set.\n  ID bigint, --The ID of the collation.\n  IS_DEFAULT varchar, --Whether the collation is the default for its character set.\n  IS_COMPILED varchar, --Whether the collation is compiled into the server.\n  SORTLEN bigint, --The length of the sort key for the collation.\n);",
    "COLLATION_CHARACTER_SET_APPLICABILITY": "CREATE TABLE COLLATION_CHARACTER_SET_APPLICABILITY (\n  COLLATION_NAME varchar, --The collation name.\n  CHARACTER_SET_NAME varchar, --The name of the character set with which the collation is associated.\n);",
    "COLUMNS": "CREATE TABLE COLUMNS (\n  TABLE_CATALOG varchar, --The name of the catalog to which the table containing the column belongs, always 'def' in MariaDB\n  TABLE_SCHEMA varchar, --The name of the database(schema) to which the table with the column belongs\n  TABLE_NAME varchar, --The name of the table to which the column belongs\n  COLUMN_NAME varchar, --The name of the column\n  ORDINAL_POSITION bigint, --The position of the column within the table, starting with 1\n  COLUMN_DEFAULT longtext, --The default value of the column\n  IS_NULLABLE varchar, --Indicates whether the column can accept NULL values ('YES' or 'NO')\n  DATA_TYPE varchar, --The data type of the column\n  CHARACTER_MAXIMUM_LENGTH bigint, --The maximum length of a character or text column in characters\n  CHARACTER_OCTET_LENGTH bigint, --The maximum length of a character or text column in bytes\n  NUMERIC_PRECISION bigint, --The precision of numeric columns (the maximum number of digits)\n  NUMERIC_SCALE bigint, --The scale of numeric columns (the number of digits after the decimal point)\n  DATETIME_PRECISION bigint, --The fractional seconds precision of time, datetime, and timestamp columns\n  CHARACTER_SET_NAME varchar, --The character set for character or text columns\n  COLLATION_NAME varchar, --The collation sequence for character or text columns\n  COLUMN_TYPE longtext, --The column type including length, precision, or other information\n  COLUMN_KEY varchar, --Indicates whether the column is indexed ('PRI' for Primary Key, 'UNI' for Unique Key, 'MUL' for indexed with possible duplicates)\n  EXTRA varchar, --Additional information about the column (e.g., auto_increment for automatically incremented values)\n  PRIVILEGES varchar, --The type of access permitted to the column (select, insert, update, references)\n  COLUMN_COMMENT varchar, --Any comment provided for the column as metadata\n  IS_GENERATED varchar, --Indicates whether the column is a generated column ('ALWAYS' or 'NEVER')\n  GENERATION_EXPRESSION longtext, --For generated columns, this is the expression used to compute the column's value\n);",
    "COLUMN_PRIVILEGES": "CREATE TABLE COLUMN_PRIVILEGES (\n  GRANTEE varchar, --The user or role to whom the privilege is granted\n  TABLE_CATALOG varchar, --The name of the catalog to which the table with the column belongs, always 'def' in MariaDB\n  TABLE_SCHEMA varchar, --The name of the database (schema) to which the table with the column belongs\n  TABLE_NAME varchar, --The name of the table to which the column belongs\n  COLUMN_NAME varchar, --The name of the column for which the privilege is granted\n  PRIVILEGE_TYPE varchar, --The type of privilege granted on the column\n  IS_GRANTABLE varchar, --YES if the privilege can be granted to others, otherwise NO\n);",
    "ENABLED_ROLES": "CREATE TABLE ENABLED_ROLES (\n  ROLE_NAME varchar, --Name of the currently enabled role\n);",
    "ENGINES": "CREATE TABLE ENGINES (\n  ENGINE varchar, --The storage engine name\n  SUPPORT varchar, --Indicates the support status of the engine in the server, which could be 'YES', 'NO', 'DEFAULT', or 'DISABLED'\n  COMMENT varchar, --A brief comment about the storage engine\n  TRANSACTIONS varchar, --Whether the engine supports transactions or not\n  XA varchar, --Whether the engine supports XA transactions or not\n  SAVEPOINTS varchar, --Whether the engine supports savepoints and rollback to savepoints\n);",
    "EVENTS": "CREATE TABLE EVENTS (\n  EVENT_CATALOG varchar, --The database catalog to which the event belongs, always 'def' in MariaDB since catalogs are not supported.\n  EVENT_SCHEMA varchar, --The name of the database (schema) to which the event belongs.\n  EVENT_NAME varchar, --The name of the event.\n  DEFINER varchar, --The account of the user who created the event, in 'user_name@host_name' format.\n  TIME_ZONE varchar, --The time zone in which the event\u2019s timing is scheduled.\n  EVENT_BODY varchar, --The type of statement the event executes, e.g., SQL.\n  EVENT_DEFINITION longtext, --The SQL statement executed by the event.\n  EVENT_TYPE varchar, --Indicates whether the event is a 'ONE TIME' event or 'RECURRING'.\n  EXECUTE_AT datetime, --For one-time events, the specific datetime when the event will execute.\n  INTERVAL_VALUE varchar, --The value of the interval for recurring events.\n  INTERVAL_FIELD varchar, --The unit of the interval for recurring events, e.g., 'DAY', 'HOUR'.\n  SQL_MODE varchar, --The SQL mode in effect when the event runs.\n  STARTS datetime, --For recurring events, the datetime when the event will start executing.\n  ENDS datetime, --For recurring events, the datetime when the event will stop executing.\n  STATUS varchar, --The status of the event, e.g., 'ENABLED', 'DISABLED'.\n  ON_COMPLETION varchar, --Determines whether the event should be dropped or preserved after its completion.\n  CREATED datetime, --The datetime when the event was created.\n  LAST_ALTERED datetime, --The datetime when the event was last altered.\n  LAST_EXECUTED datetime, --The datetime when the event was last executed.\n  EVENT_COMMENT varchar, --Any comment provided for the event.\n  ORIGINATOR bigint, --The server ID of the original MySQL server where the event was created in a replicated environment.\n  CHARACTER_SET_CLIENT varchar, --The session value of the character_set_client system variable when the event was created.\n  COLLATION_CONNECTION varchar, --The session value of the collation_connection system variable when the event was created.\n  DATABASE_COLLATION varchar, --The collation of the database (schema) to which the event belongs.\n);",
    "FILES": "CREATE TABLE FILES (\n  FILE_ID bigint, --Uniquely identifies each file\n  FILE_NAME varchar, --The name of the file including the path if applicable\n  FILE_TYPE varchar, --The type of file (e.g., TABLE, TABLESPACE, LOGFILE, etc.)\n  TABLESPACE_NAME varchar, --Name of the tablespace that the file belongs to\n  TABLE_CATALOG varchar, --Always NULL in current versions of MariaDB\n  TABLE_SCHEMA varchar, --The schema (database) name to which the table belongs\n  TABLE_NAME varchar, --Name of the table\n  LOGFILE_GROUP_NAME varchar, --Name of the log file group\n  LOGFILE_GROUP_NUMBER bigint, --Number of the log file group\n  ENGINE varchar, --The storage engine (e.g., InnoDB, MyISAM)\n  FULLTEXT_KEYS varchar, --Not documented\n  DELETED_ROWS bigint, --The number of deleted rows in the table\n  UPDATE_COUNT bigint, --Not documented\n  FREE_EXTENTS bigint, --Number of free extents\n  TOTAL_EXTENTS bigint, --Total number of extents\n  EXTENT_SIZE bigint, --Size of each extent\n  INITIAL_SIZE bigint, --Initial size of the file\n  MAXIMUM_SIZE bigint, --Maximum size the file can grow to\n  AUTOEXTEND_SIZE bigint, --Size increments when auto-extending\n  CREATION_TIME datetime, --When the file was created\n  LAST_UPDATE_TIME datetime, --The last time the file was updated\n  LAST_ACCESS_TIME datetime, --The last access time of the file\n  RECOVER_TIME bigint, --Not documented\n  TRANSACTION_COUNTER bigint, --Not documented\n  VERSION bigint, --Version information for the file\n  ROW_FORMAT varchar, --Row format of the table (e.g., Dynamic, Fixed)\n  TABLE_ROWS bigint, --Approximate number of rows in the table\n  AVG_ROW_LENGTH bigint, --Average length of a row in the table\n  DATA_LENGTH bigint, --Length of the data file\n  MAX_DATA_LENGTH bigint, --Maximum allowed data file length\n  INDEX_LENGTH bigint, --Length of the index file\n  DATA_FREE bigint, --Free bytes available in the data file\n  CREATE_TIME datetime, --When the table was created\n  UPDATE_TIME datetime, --The last time the table was updated\n  CHECK_TIME datetime, --The last time the table was checked\n  CHECKSUM bigint, --Checksum for the table\n  STATUS varchar, --Status of the file (e.g., NORMAL, DELETED)\n  EXTRA varchar, --Not documented\n);",
    "GLOBAL_STATUS": "CREATE TABLE GLOBAL_STATUS (\n  VARIABLE_NAME varchar, --The name of the status variable.\n  VARIABLE_VALUE varchar, --The current value of the status variable.\n);",
    "GLOBAL_VARIABLES": "CREATE TABLE GLOBAL_VARIABLES (\n  VARIABLE_NAME varchar, --The name of the system variable.\n  VARIABLE_VALUE varchar, --The current value of the system variable.\n);",
    "KEYWORDS": "CREATE TABLE KEYWORDS (\n  WORD varchar, --The reserved word.\n);",
    "KEY_CACHES": "CREATE TABLE KEY_CACHES (\n  KEY_CACHE_NAME varchar, --The name of the key cache.\n  SEGMENTS int, --The number of segments within the key cache.\n  SEGMENT_NUMBER int, --The segment number within the key cache.\n  FULL_SIZE bigint, --The total size of the key cache in blocks.\n  BLOCK_SIZE bigint, --The size of each block within the key cache.\n  USED_BLOCKS bigint, --The number of blocks currently used within the key cache.\n  UNUSED_BLOCKS bigint, --The number of unused blocks within the key cache.\n  DIRTY_BLOCKS bigint, --The number of blocks marked as dirty within the key cache.\n  READ_REQUESTS bigint, --The number of read requests made to the key cache.\n  READS bigint, --The number of actual reads from the key cache.\n  WRITE_REQUESTS bigint, --The number of write requests made to the key cache.\n  WRITES bigint, --The number of actual writes to the key cache.\n);",
    "KEY_COLUMN_USAGE": "CREATE TABLE KEY_COLUMN_USAGE (\n  CONSTRAINT_CATALOG varchar, --Catalog to which the constraint belongs, always 'def'\n  CONSTRAINT_SCHEMA varchar, --Schema (database) in which the constraint is defined\n  CONSTRAINT_NAME varchar, --Name of the constraint\n  TABLE_CATALOG varchar, --Catalog of the table; always 'def'\n  TABLE_SCHEMA varchar, --Schema (database) of the table in which the column is found\n  TABLE_NAME varchar, --Name of the table in which the column is found\n  COLUMN_NAME varchar, --Name of the column associated with the constraint\n  ORDINAL_POSITION bigint, --Position of the column within the constraint\n  POSITION_IN_UNIQUE_CONSTRAINT bigint, --Position of the column in the unique constraint (NULL if not applicable)\n  REFERENCED_TABLE_SCHEMA varchar, --Schema (database) of the referenced table (NULL if not applicable)\n  REFERENCED_TABLE_NAME varchar, --Name of the referenced table (NULL if not applicable)\n  REFERENCED_COLUMN_NAME varchar, --Name of the column in the referenced table (NULL if not applicable)\n);",
    "OPTIMIZER_TRACE": "CREATE TABLE OPTIMIZER_TRACE (\n  QUERY longtext, --Stores the original query that the optimizer trace is for.\n  TRACE longtext, --Holds the JSON-formatted trace of the optimizer's decision-making process for the given query.\n  MISSING_BYTES_BEYOND_MAX_MEM_SIZE int, --Indicates the number of bytes that could not be stored in the trace because the trace exceeded the maximum allowed memory size for the optimizer trace.\n  INSUFFICIENT_PRIVILEGES tinyint, --Shows whether the trace could not be collected fully or in part because of insufficient privileges.\n);",
    "PARAMETERS": "CREATE TABLE PARAMETERS (\n  SPECIFIC_CATALOG varchar, --The name of the database (always the current database) the routine is contained in.\n  SPECIFIC_SCHEMA varchar, --The name of the schema the routine is contained in.\n  SPECIFIC_NAME varchar, --The unique name of the routine.\n  ORDINAL_POSITION int, --The position of the parameter in the routine (starts at 1).\n  PARAMETER_MODE varchar, --The mode of the parameter: IN, OUT, or INOUT.\n  PARAMETER_NAME varchar, --The name of the parameter.\n  DATA_TYPE varchar, --The data type of the parameter.\n  CHARACTER_MAXIMUM_LENGTH int, --Maximum length in characters for character-based columns.\n  CHARACTER_OCTET_LENGTH int, --Maximum length in bytes for character- or binary-based columns.\n  NUMERIC_PRECISION int, --The precision of numeric columns.\n  NUMERIC_SCALE int, --The scale of numeric columns.\n  DATETIME_PRECISION bigint, --The fractional seconds precision of time, datetime, and timestamp columns.\n  CHARACTER_SET_NAME varchar, --The name of the character set for the column.\n  COLLATION_NAME varchar, --The name of the collation for the column.\n  DTD_IDENTIFIER longtext, --Data type descriptor for the parameter.\n  ROUTINE_TYPE varchar, --The type of routine: FUNCTION or PROCEDURE.\n);",
    "PARTITIONS": "CREATE TABLE PARTITIONS (\n  TABLE_CATALOG varchar, --Database catalog to which the partition belongs, always 'def'\n  TABLE_SCHEMA varchar, --Name of the schema that the partitioned table is in\n  TABLE_NAME varchar, --Name of the partitioned table\n  PARTITION_NAME varchar, --Name of the partition\n  SUBPARTITION_NAME varchar, --Name of the subpartition\n  PARTITION_ORDINAL_POSITION bigint, --Ordinal position of the partition within the table\n  SUBPARTITION_ORDINAL_POSITION bigint, --Ordinal position of the subpartition within the parent partition\n  PARTITION_METHOD varchar, --Method used for partitioning ('RANGE', 'LIST', 'HASH', 'KEY', etc.)\n  SUBPARTITION_METHOD varchar, --Method used for subpartitioning\n  PARTITION_EXPRESSION longtext, --Expression used for partitioning\n  SUBPARTITION_EXPRESSION longtext, --Expression used for subpartitioning\n  PARTITION_DESCRIPTION longtext, --Description of the partition\n  TABLE_ROWS bigint, --Estimated number of rows in the partition\n  AVG_ROW_LENGTH bigint, --Average length of a row in the partition, in bytes\n  DATA_LENGTH bigint, --Total length of the data file for the partition, in bytes\n  MAX_DATA_LENGTH bigint, --Maximum data length allowed for the partition, in bytes\n  INDEX_LENGTH bigint, --Total length of the index file for the partition, in bytes\n  DATA_FREE bigint, --Number of allocated but unused bytes in the partition\n  CREATE_TIME datetime, --Timestamp of the partition's creation\n  UPDATE_TIME datetime, --Timestamp of the last update to the partition\n  CHECK_TIME datetime, --Timestamp of the last check of the partition\n  CHECKSUM bigint, --Checksum for the partition\n  PARTITION_COMMENT varchar, --Any comment provided for the partition\n  NODEGROUP varchar, --Nodegroup ID for the partition if using MySQL Cluster\n  TABLESPACE_NAME varchar, --Tablespace in which the partition is stored\n);",
    "PLUGINS": "CREATE TABLE PLUGINS (\n  PLUGIN_NAME varchar, --The name of the plugin\n  PLUGIN_VERSION varchar, --Version information of the plugin\n  PLUGIN_STATUS varchar, --Status of the plugin (e.g., ACTIVE, INACTIVE)\n  PLUGIN_TYPE varchar, --Type of the plugin (e.g., STORAGE ENGINE, FUNCTION)\n  PLUGIN_TYPE_VERSION varchar, --Version of the plugin type\n  PLUGIN_LIBRARY varchar, --Name of the library file associated with the plugin\n  PLUGIN_LIBRARY_VERSION varchar, --Version of the library file\n  PLUGIN_AUTHOR varchar, --Name of the author of the plugin\n  PLUGIN_DESCRIPTION longtext, --Description of what the plugin does\n  PLUGIN_LICENSE varchar, --License type under which the plugin is released\n  LOAD_OPTION varchar, --Indicates how the plugin is loaded (e.g., ON STARTUP, DEMAND)\n  PLUGIN_MATURITY varchar, --Maturity level of the plugin (e.g., STABLE, BETA, EXPERIMENTAL)\n  PLUGIN_AUTH_VERSION varchar, --Version of the plugin authorization/authentication mechanism\n);",
    "PROCESSLIST": "CREATE TABLE PROCESSLIST (\n  ID bigint, --The connection or thread identifier\n  USER varchar, --The MariaDB user who issued the statement\n  HOST varchar, --The host name of the client issuing the command\n  DB varchar, --The default database for the connection, if one exists\n  COMMAND varchar, --The type of command the thread is executing\n  TIME int, --The time in seconds the thread has been in its current state\n  STATE varchar, --An action, event, or state that indicates what the thread is doing\n  INFO longtext, --The statement the thread is executing, text format\n  TIME_MS decimal, --The time in milliseconds the thread has been in its current state\n  STAGE tinyint, --Current stage of the command execution in progress\n  MAX_STAGE tinyint, --Maximum number of stages required for command execution\n  PROGRESS decimal, --Percentage of work completed for the current stage\n  MEMORY_USED bigint, --Amount of memory currently being used by the thread\n  MAX_MEMORY_USED bigint, --Maximum amount of memory used during the lifespan of the thread\n  EXAMINED_ROWS int, --Number of rows examined by the current query\n  QUERY_ID bigint, --Unique identifier for the query being executed\n  INFO_BINARY blob, --Binary version of the INFO column if the statement is non-text or too long\n  TID bigint, --Thread ID of the specific process\n);",
    "PROFILING": "CREATE TABLE PROFILING (\n  QUERY_ID int, --The identifier for the query in the profiling context\n  SEQ int, --Sequence number of the state change\n  STATE varchar, --Current state of the profiled query\n  DURATION decimal, --Time spent in the current state, in seconds\n  CPU_USER decimal, --User CPU time used\n  CPU_SYSTEM decimal, --System CPU time used\n  CONTEXT_VOLUNTARY int, --Number of voluntary context switches\n  CONTEXT_INVOLUNTARY int, --Number of involuntary context switches\n  BLOCK_OPS_IN int, --Number of block input operations\n  BLOCK_OPS_OUT int, --Number of block output operations\n  MESSAGES_SENT int, --Number of messages sent\n  MESSAGES_RECEIVED int, --Number of messages received\n  PAGE_FAULTS_MAJOR int, --Number of major page faults\n  PAGE_FAULTS_MINOR int, --Number of minor page faults\n  SWAPS int, --Number of swaps\n  SOURCE_FUNCTION varchar, --Name of the source function issuing the query\n  SOURCE_FILE varchar, --Name of the source file issuing the query\n  SOURCE_LINE int, --Line number in the source file\n);",
    "REFERENTIAL_CONSTRAINTS": "CREATE TABLE REFERENTIAL_CONSTRAINTS (\n  CONSTRAINT_CATALOG varchar, --The name of the catalog to which the constraint belongs; always def in MariaDB.\n  CONSTRAINT_SCHEMA varchar, --The name of the database (schema) to which the constraint belongs.\n  CONSTRAINT_NAME varchar, --The name of the constraint.\n  UNIQUE_CONSTRAINT_CATALOG varchar, --The name of the catalog to which the unique constraint belongs; always def in MariaDB.\n  UNIQUE_CONSTRAINT_SCHEMA varchar, --The name of the schema to which the unique constraint belongs.\n  UNIQUE_CONSTRAINT_NAME varchar, --The name of the unique constraint.\n  MATCH_OPTION varchar, --How columns in a foreign key constraint are matched with columns in the referenced table; always NONE in MariaDB.\n  UPDATE_RULE varchar, --The action the database should take on update operations to the foreign key.\n  DELETE_RULE varchar, --The action the database should take on delete operations to the foreign key.\n  TABLE_NAME varchar, --The name of the table with the constraint.\n  REFERENCED_TABLE_NAME varchar, --The name of the table referenced by the constraint.\n);",
    "ROUTINES": "CREATE TABLE ROUTINES (\n  SPECIFIC_NAME varchar, --A unique name for the routine, differentiating it from others in a schema\n  ROUTINE_CATALOG varchar, --The name of the catalog to which the routine belongs; always def in MySQL\n  ROUTINE_SCHEMA varchar, --The name of the schema to which the routine belongs\n  ROUTINE_NAME varchar, --The name of the routine\n  ROUTINE_TYPE varchar, --The type of the routine, can be either PROCEDURE or FUNCTION\n  DATA_TYPE varchar, --Data type of the routine's return value (for functions)\n  CHARACTER_MAXIMUM_LENGTH int, --Maximum length for character string that the function returns (for functions)\n  CHARACTER_OCTET_LENGTH int, --Maximum length in octets for a character string that the function returns, considering character set\n  NUMERIC_PRECISION int, --Numeric precision of the routine\u2019s return value (for functions)\n  NUMERIC_SCALE int, --Digits to the right of the decimal point in the routine\u2019s return value (for functions)\n  DATETIME_PRECISION bigint, --Fractional seconds precision of the routine\u2019s return value if it's a date or time data type (for functions)\n  CHARACTER_SET_NAME varchar, --Character set for the return value of the function\n  COLLATION_NAME varchar, --Collation for the return value of the function\n  DTD_IDENTIFIER longtext, --Data type descriptor for the routine\u2019s return value (for functions)\n  ROUTINE_BODY varchar, --Whether the routine has an SQL or an external body\n  ROUTINE_DEFINITION longtext, --Definition of the routine as provided by the creator\n  EXTERNAL_NAME varchar, --Name of the external application that provides the routine, if it's an external routine\n  EXTERNAL_LANGUAGE varchar, --The language in which the external routine is written\n  PARAMETER_STYLE varchar, --Indicates whether the routine uses SQL or JAVA parameter style\n  IS_DETERMINISTIC varchar, --YES if the routine always produces the same result given the same inputs; otherwise NO\n  SQL_DATA_ACCESS varchar, --Kind of data access the routine needs (e.g., READS SQL DATA, MODIFIES SQL DATA)\n  SQL_PATH varchar, --Null for MySQL, as it does not support the feature\n  SECURITY_TYPE varchar, --Defines the security context in which the routine is executed (INVOKER, DEFINER)\n  CREATED datetime, --Timestamp when the routine was created\n  LAST_ALTERED datetime, --Timestamp of the routine\u2019s last modification\n  SQL_MODE varchar, --SQL mode in effect when the routine was created\n  ROUTINE_COMMENT longtext, --Comment provided by its creator\n  DEFINER varchar, --Account that created the routine\n  CHARACTER_SET_CLIENT varchar, --Session value of character_set_client when the routine was created\n  COLLATION_CONNECTION varchar, --Session value of collation_connection when the routine was created\n  DATABASE_COLLATION varchar, --Collation of the database containing the routine\n);",
    "SCHEMATA": "CREATE TABLE SCHEMATA (\n  CATALOG_NAME varchar, --The name of the catalog. Always 'def' in MariaDB since it does not support catalogs like some other databases.\n  SCHEMA_NAME varchar, --The name of the schema (database).\n  DEFAULT_CHARACTER_SET_NAME varchar, --The default character set name for the schema.\n  DEFAULT_COLLATION_NAME varchar, --The default collation name for the schema.\n  SQL_PATH varchar, --Reserved for future use. Always NULL in MariaDB.\n  SCHEMA_COMMENT varchar, --Comments about the schema.\n);",
    "SCHEMA_PRIVILEGES": "CREATE TABLE SCHEMA_PRIVILEGES (\n  GRANTEE varchar, --The user or role to whom the privilege is granted\n  TABLE_CATALOG varchar, --The name of the catalog to which the privilege refers, always 'def' in MariaDB\n  TABLE_SCHEMA varchar, --The name of the database (schema) to which the privilege refers\n  PRIVILEGE_TYPE varchar, --The type of privilege granted\n  IS_GRANTABLE varchar, --Whether the grantee can grant this privilege to others\n);",
    "SESSION_STATUS": "CREATE TABLE SESSION_STATUS (\n  VARIABLE_NAME varchar, --The name of the status variable.\n  VARIABLE_VALUE varchar, --The current value of the status variable.\n);",
    "SESSION_VARIABLES": "CREATE TABLE SESSION_VARIABLES (\n  VARIABLE_NAME varchar, --The name of the session variable\n  VARIABLE_VALUE varchar, --The current value of the session variable\n);",
    "STATISTICS": "CREATE TABLE STATISTICS (\n  TABLE_CATALOG varchar, --The name of the catalog to which the table with the index belongs, always def\n  TABLE_SCHEMA varchar, --The name of the schema (database) to which the table with the index belongs\n  TABLE_NAME varchar, --The name of the table on which the index is defined\n  NON_UNIQUE bigint, --0 if the index cannot contain duplicates, 1 if it can\n  INDEX_SCHEMA varchar, --The name of the schema (database) to which the index belongs\n  INDEX_NAME varchar, --The name of the index\n  SEQ_IN_INDEX bigint, --The position of the column in the index, starting with 1\n  COLUMN_NAME varchar, --The name of the column included in the index\n  COLLATION varchar, --How the column is sorted in the index. 'A' is ascending, 'D' is descending, NULL means not sorted\n  CARDINALITY bigint, --An estimate of the number of unique values in the index\n  SUB_PART bigint, --The number of indexed characters if the column is only partly indexed, NULL for entire column\n  PACKED varchar, --Indicates if the key is packed, NULL if it is not\n  NULLABLE varchar, --YES if the column can contain NULLs, NO if it cannot\n  INDEX_TYPE varchar, --The type of the index (BTREE, FULLTEXT, HASH, RTREE)\n  COMMENT varchar, --Information about the index not described in other columns\n  INDEX_COMMENT varchar, --A comment provided for the index\n  IGNORED varchar, --Whether the index is ignored\n);",
    "SQL_FUNCTIONS": "CREATE TABLE SQL_FUNCTIONS (\n  FUNCTION varchar, --The name of the SQL function.\n);",
    "SYSTEM_VARIABLES": "CREATE TABLE SYSTEM_VARIABLES (\n  VARIABLE_NAME varchar, --The name of the system variable\n  SESSION_VALUE varchar, --The current session value of the system variable\n  GLOBAL_VALUE varchar, --The current global value of the system variable\n  GLOBAL_VALUE_ORIGIN varchar, --Indicates how the global value was set (e.g., COMPILE TIME, EXPLICIT, AUTO)\n  DEFAULT_VALUE varchar, --The default value of the system variable\n  VARIABLE_SCOPE varchar, --Indicates the scope of the variable (e.g., GLOBAL, SESSION)\n  VARIABLE_TYPE varchar, --The data type of the system variable (e.g., BOOLEAN, INTEGER, STRING)\n  VARIABLE_COMMENT varchar, --A comment or description of the system variable\n  NUMERIC_MIN_VALUE varchar, --The minimum numeric value for the variable, if applicable\n  NUMERIC_MAX_VALUE varchar, --The maximum numeric value for the variable, if applicable\n  NUMERIC_BLOCK_SIZE varchar, --The block size for setting numeric variables, if applicable\n  ENUM_VALUE_LIST longtext, --A list of valid values for ENUM type variables\n  READ_ONLY varchar, --Indicates whether the variable is read-only\n  COMMAND_LINE_ARGUMENT varchar, --The command line argument that can set the variable, if applicable\n  GLOBAL_VALUE_PATH varchar, --The path to the variable value in the global settings, if applicable\n);",
    "TABLES": "CREATE TABLE TABLES (\n  TABLE_CATALOG varchar, --The catalog to which the table belongs; always 'def' in MariaDB.\n  TABLE_SCHEMA varchar, --Name of the database (schema) to which the table belongs.\n  TABLE_NAME varchar, --Name of the table.\n  TABLE_TYPE varchar, --Type of table, such as BASE TABLE for a standard table or VIEW for a view.\n  ENGINE varchar, --Storage engine for the table (e.g., InnoDB, MyISAM).\n  VERSION bigint, --Version number of the table's .frm file.\n  ROW_FORMAT varchar, --Row format used by the storage engine (e.g., Dynamic, Fixed).\n  TABLE_ROWS bigint, --Estimated number of rows in the table.\n  AVG_ROW_LENGTH bigint, --Average length of the rows in the table.\n  DATA_LENGTH bigint, --Length (in bytes) of the data file for the table.\n  MAX_DATA_LENGTH bigint, --Maximum length (in bytes) that the data file for the table can reach.\n  INDEX_LENGTH bigint, --Length (in bytes) of the index file for the table.\n  DATA_FREE bigint, --Number of allocated but unused bytes in the table.\n  AUTO_INCREMENT bigint, --Current AUTO_INCREMENT value for the table.\n  CREATE_TIME datetime, --Timestamp for when the table was created.\n  UPDATE_TIME datetime, --Timestamp for the last update to the table.\n  CHECK_TIME datetime, --Timestamp for the last check (optimization, repair) of the table.\n  TABLE_COLLATION varchar, --Collation setting for the table.\n  CHECKSUM bigint, --Checksum value for the table content.\n  CREATE_OPTIONS varchar, --Any additional options used during table creation.\n  TABLE_COMMENT varchar, --Comments about the table.\n  MAX_INDEX_LENGTH bigint, --Maximum length (in bytes) for the indexes on the table.\n  TEMPORARY varchar, --Indicates whether the table is a temporary table.\n);",
    "TABLESPACES": "CREATE TABLE TABLESPACES (\n  TABLESPACE_NAME varchar, --The name of the tablespace.\n  ENGINE varchar, --The name of the storage engine that uses the tablespace.\n  TABLESPACE_TYPE varchar, --The type of the tablespace.\n  LOGFILE_GROUP_NAME varchar, --The name of the logfile group that the tablespace belongs to.\n  EXTENT_SIZE bigint, --The size, in bytes, of each extent in the tablespace.\n  AUTOEXTEND_SIZE bigint, --The size in bytes by which the tablespace is automatically extended when it becomes full.\n  MAXIMUM_SIZE bigint, --The maximum size, in bytes, to which the tablespace can automatically extend.\n  NODEGROUP_ID bigint, --The nodegroup ID for the tablespace.\n  TABLESPACE_COMMENT varchar, --A comment provided for the tablespace.\n);",
    "TABLE_CONSTRAINTS": "CREATE TABLE TABLE_CONSTRAINTS (\n  CONSTRAINT_CATALOG varchar, --The name of the catalog to which the constraint belongs, always 'def' in MariaDB since catalogs are not supported.\n  CONSTRAINT_SCHEMA varchar, --The name of the schema (database) to which the constraint belongs.\n  CONSTRAINT_NAME varchar, --The name of the constraint.\n  TABLE_SCHEMA varchar, --The name of the schema (database) to which the table with the constraint belongs.\n  TABLE_NAME varchar, --The name of the table to which the constraint is applied.\n  CONSTRAINT_TYPE varchar, --The type of constraint applied (e.g., PRIMARY KEY, UNIQUE, FOREIGN KEY).\n);",
    "TABLE_PRIVILEGES": "CREATE TABLE TABLE_PRIVILEGES (\n  GRANTEE varchar, --The user or role to whom the privilege is granted\n  TABLE_CATALOG varchar, --The name of the catalog to which the table belongs, always 'def' in MariaDB\n  TABLE_SCHEMA varchar, --The name of the database (schema) that contains the table\n  TABLE_NAME varchar, --The name of the table to which the privilege refers\n  PRIVILEGE_TYPE varchar, --The type of privilege granted on the table, e.g., SELECT, INSERT\n  IS_GRANTABLE varchar, --Whether the grantee can grant the privilege to others ('YES' or 'NO')\n);",
    "TRIGGERS": "CREATE TABLE TRIGGERS (\n  TRIGGER_CATALOG varchar, --The name of the catalog to which the trigger belongs, always 'def'\n  TRIGGER_SCHEMA varchar, --The name of the schema (database) to which the trigger belongs\n  TRIGGER_NAME varchar, --The name of the trigger\n  EVENT_MANIPULATION varchar, --The type of operation that fires the trigger (INSERT, UPDATE, DELETE)\n  EVENT_OBJECT_CATALOG varchar, --The name of the catalog to which the object triggering the event belongs, always 'def'\n  EVENT_OBJECT_SCHEMA varchar, --The name of the schema (database) to which the object triggering the event belongs\n  EVENT_OBJECT_TABLE varchar, --The name of the table to which the event that fires the trigger applies\n  ACTION_ORDER bigint, --The ordinal position of the action in relation to other actions on the same event\n  ACTION_CONDITION longtext, --For future use, currently always NULL in MariaDB\n  ACTION_STATEMENT longtext, --The statement executed when the trigger is activated\n  ACTION_ORIENTATION varchar, --Whether the action statement applies to each row affected or to the statement as a whole (ROW or STATEMENT)\n  ACTION_TIMING varchar, --When the trigger event will fire (BEFORE or AFTER)\n  ACTION_REFERENCE_OLD_TABLE varchar, --For triggers on UPDATE statements, this shows the name of the virtual table holding old row values\n  ACTION_REFERENCE_NEW_TABLE varchar, --For triggers on UPDATE statements, this shows the name of the virtual table holding new row values\n  ACTION_REFERENCE_OLD_ROW varchar, --For row-level triggers, the name of the virtual table holding the old row values\n  ACTION_REFERENCE_NEW_ROW varchar, --For row-level triggers, the name of the virtual table holding the new row values\n  CREATED datetime, --The date and time when the trigger was created\n  SQL_MODE varchar, --The SQL mode in effect when the trigger was created\n  DEFINER varchar, --The account of the user who created the trigger\n  CHARACTER_SET_CLIENT varchar, --The session character set in use when the trigger was created\n  COLLATION_CONNECTION varchar, --The session collation in use when the trigger was created\n  DATABASE_COLLATION varchar, --The collation of the database when the trigger was created\n);",
    "USER_PRIVILEGES": "CREATE TABLE USER_PRIVILEGES (\n  GRANTEE varchar, --The user or role the privileges are granted to, including the host from which they connect\n  TABLE_CATALOG varchar, --The name of the catalog to which the privilege refers, always 'def' in MariaDB\n  PRIVILEGE_TYPE varchar, --The specific privilege granted to the user or role\n  IS_GRANTABLE varchar, --Whether the grantee can grant the privilege to others ('YES' or 'NO')\n);",
    "VIEWS": "CREATE TABLE VIEWS (\n  TABLE_CATALOG varchar, --The catalog to which the view belongs; always 'def' in MariaDB.\n  TABLE_SCHEMA varchar, --The schema (database) to which the view belongs.\n  TABLE_NAME varchar, --The name of the view.\n  VIEW_DEFINITION longtext, --The SQL statement used to create the view.\n  CHECK_OPTION varchar, --Indicates the level of check option enforced: NONE, CASCADED, or LOCAL.\n  IS_UPDATABLE varchar, --Whether the view is updatable or not.\n  DEFINER varchar, --The user who created the view.\n  SECURITY_TYPE varchar, --Defines the security context in which the view is executed: DEFINER or INVOKER.\n  CHARACTER_SET_CLIENT varchar, --The character set in use by the client when the view was created.\n  COLLATION_CONNECTION varchar, --The collation in use by the connection when the view was created.\n  ALGORITHM varchar, --The algorithm used by the view: UNDEFINED, MERGE, or TEMPTABLE.\n);",
    "CLIENT_STATISTICS": "CREATE TABLE CLIENT_STATISTICS (\n  CLIENT varchar, --The name of the client.\n  TOTAL_CONNECTIONS bigint, --The total number of connections made by this client.\n  CONCURRENT_CONNECTIONS bigint, --The maximum number of connections the client had open at the same time.\n  CONNECTED_TIME bigint, --The total time, in seconds, that the client was connected.\n  BUSY_TIME double, --The total time, in seconds, that MariaDB server spent processing statements for the client.\n  CPU_TIME double, --The total CPU time, in seconds, used by statements from the client.\n  BYTES_RECEIVED bigint, --The total number of bytes received from the client.\n  BYTES_SENT bigint, --The total number of bytes sent to the client.\n  BINLOG_BYTES_WRITTEN bigint, --The total number of bytes written to the binary log from the client's statements.\n  ROWS_READ bigint, --The total number of rows read by the client.\n  ROWS_SENT bigint, --The total number of rows sent to the client.\n  ROWS_DELETED bigint, --The total number of rows deleted by the client.\n  ROWS_INSERTED bigint, --The total number of rows inserted by the client.\n  ROWS_UPDATED bigint, --The total number of rows updated by the client.\n  SELECT_COMMANDS bigint, --The total number of SELECT commands executed by the client.\n  UPDATE_COMMANDS bigint, --The total number of UPDATE commands executed by the client.\n  OTHER_COMMANDS bigint, --The total number of commands, not classified as SELECT, UPDATE, INSERT or DELETE, executed by the client.\n  COMMIT_TRANSACTIONS bigint, --The total number of transactions committed by the client.\n  ROLLBACK_TRANSACTIONS bigint, --The total number of transactions rolled back by the client.\n  DENIED_CONNECTIONS bigint, --The total number of connections denied to this client.\n  LOST_CONNECTIONS bigint, --The total number of connections that were lost (not properly closed) by the client.\n  ACCESS_DENIED bigint, --The total number of times the client was denied access.\n  EMPTY_QUERIES bigint, --The total number of queries from the client that did nothing.\n  TOTAL_SSL_CONNECTIONS bigint, --The total number of connections from this client that used SSL.\n  MAX_STATEMENT_TIME_EXCEEDED bigint, --The total number of times a statement executed by the client exceeded the maximum statement execution time.\n);",
    "INDEX_STATISTICS": "CREATE TABLE INDEX_STATISTICS (\n  TABLE_SCHEMA varchar, --The name of the schema (database) the indexed table belongs to\n  TABLE_NAME varchar, --The name of the table that has the index\n  INDEX_NAME varchar, --The name of the index\n  ROWS_READ bigint, --The number of rows read from the index\n);",
    "INNODB_FT_CONFIG": "CREATE TABLE INNODB_FT_CONFIG (\n  KEY varchar, --The name of the Fulltext index configuration parameter.\n  VALUE varchar, --The value assigned to the Fulltext index configuration parameter.\n);",
    "GEOMETRY_COLUMNS": "CREATE TABLE GEOMETRY_COLUMNS (\n  F_TABLE_CATALOG varchar, --Name of the catalog to which the foreign table belongs; always def\n  F_TABLE_SCHEMA varchar, --Name of the schema that contains the foreign table\n  F_TABLE_NAME varchar, --Name of the foreign table\n  F_GEOMETRY_COLUMN varchar, --Name of the geometric column in the foreign table\n  G_TABLE_CATALOG varchar, --Name of the catalog to which the geometry table belongs; always def\n  G_TABLE_SCHEMA varchar, --Name of the schema that contains the geometry table\n  G_TABLE_NAME varchar, --Name of the geometry table\n  G_GEOMETRY_COLUMN varchar, --Name of the geometric column in the geometry table\n  STORAGE_TYPE tinyint, --Format in which the geometry data is stored\n  GEOMETRY_TYPE int, --Type of the geometry, e.g., POINT, LINESTRING\n  COORD_DIMENSION tinyint, --Number of dimensions in the geometry column (2, 3, or 4 for XYZM)\n  MAX_PPR tinyint, --Maximum number of points per ring in a polygon\n  SRID smallint, --Spatial Reference System Identifier for the geometry data\n);",
    "INNODB_SYS_TABLESTATS": "CREATE TABLE INNODB_SYS_TABLESTATS (\n  TABLE_ID bigint, --A unique identifier for the table within the InnoDB storage engine\n  NAME varchar, --The name of the table including the database name\n  STATS_INITIALIZED int, --Indicates whether the statistics have been initialized ('Initialized' or 'Uninitialized')\n  NUM_ROWS bigint, --An estimate of the number of rows in the table\n  CLUST_INDEX_SIZE bigint, --The size of the clustered index for the table in pages\n  OTHER_INDEX_SIZE bigint, --The size of all other indexes for the table in pages, not including the clustered index\n  MODIFIED_COUNTER bigint, --Number of rows modified since the last statistics calculation\n  AUTOINC bigint, --The current value of the AUTO_INCREMENT column for the table\n  REF_COUNT int, --Number of foreign key references to the table or references from the table to others\n);",
    "SPATIAL_REF_SYS": "CREATE TABLE SPATIAL_REF_SYS (\n  SRID smallint, --An identifier that is unique within the database and is used to reference spatial reference systems.\n  AUTH_NAME varchar, --The name of the authoritative body that defines the spatial reference system.\n  AUTH_SRID int, --The identifier assigned by the authoritative body to the spatial reference system.\n  SRTEXT varchar, --A well-known text representation of the spatial reference system.\n);",
    "USER_STATISTICS": "CREATE TABLE USER_STATISTICS (\n  USER varchar, --The MariaDB user for whom the statistical data is being recorded\n  TOTAL_CONNECTIONS int, --The total number of connections made by this user\n  CONCURRENT_CONNECTIONS int, --The maximum number of concurrent connections by the user\n  CONNECTED_TIME int, --The total time, in seconds, the user has been connected\n  BUSY_TIME double, --Total time, in seconds, the user's connections were doing something\n  CPU_TIME double, --Total CPU time, in seconds, used by the user's connections\n  BYTES_RECEIVED bigint, --Total number of bytes received by the user's connections\n  BYTES_SENT bigint, --Total number of bytes sent by the user's connections\n  BINLOG_BYTES_WRITTEN bigint, --Total number of bytes written to the binary log from the user's statements\n  ROWS_READ bigint, --Total number of rows read by the user's commands\n  ROWS_SENT bigint, --Total number of rows sent to the client by the user's commands\n  ROWS_DELETED bigint, --Total number of rows deleted by the user's commands\n  ROWS_INSERTED bigint, --Total number of rows inserted by the user's commands\n  ROWS_UPDATED bigint, --Total number of rows updated by the user's commands\n  SELECT_COMMANDS bigint, --Number of SELECT commands executed by the user\n  UPDATE_COMMANDS bigint, --Number of UPDATE commands executed by the user\n  OTHER_COMMANDS bigint, --Number of other commands executed by the user\n  COMMIT_TRANSACTIONS bigint, --Number of commits performed by the user\n  ROLLBACK_TRANSACTIONS bigint, --Number of rollbacks issued by the user\n  DENIED_CONNECTIONS bigint, --Number of connections denied to this user\n  LOST_CONNECTIONS bigint, --Number of connections that were lost or closed unexpectantly for this user\n  ACCESS_DENIED bigint, --Number of times access was denied for this user\n  EMPTY_QUERIES bigint, --Number of empty queries from the user\n  TOTAL_SSL_CONNECTIONS bigint, --Total number of SSL connections made by this user\n  MAX_STATEMENT_TIME_EXCEEDED bigint, --Number of times the execution of statements by this user exceeded the max_statement_time\n);",
    "INNODB_TRX": "CREATE TABLE INNODB_TRX (\n  trx_id bigint, --The unique identifier of the transaction\n  trx_state varchar, --The current state of the transaction (RUNNING, LOCK WAIT, ROLLING BACK, COMMITTING)\n  trx_started datetime, --The timestamp when the transaction started\n  trx_requested_lock_id varchar, --The lock ID the transaction is currently waiting for, if any\n  trx_wait_started datetime, --The timestamp when the transaction started waiting for the lock, if applicable\n  trx_weight bigint, --A measure of the transaction's weight, considering factors like row locks and undo log size\n  trx_mysql_thread_id bigint, --The thread ID of the MySQL thread associated with this transaction\n  trx_query varchar, --The SQL query currently being executed in the transaction, if any\n  trx_operation_state varchar, --The current operation state within the transaction\n  trx_tables_in_use bigint, --The number of tables currently being used by the transaction\n  trx_tables_locked bigint, --The number of tables that have been locked by the transaction\n  trx_lock_structs bigint, --The number of lock structs (lock objects) associated with the transaction\n  trx_lock_memory_bytes bigint, --The amount of memory allocated for locks for the transaction in bytes\n  trx_rows_locked bigint, --The number of rows locked by the transaction\n  trx_rows_modified bigint, --The number of rows modified by the transaction\n  trx_concurrency_tickets bigint, --The number of concurrency tickets for the transaction, affecting its scheduling\n  trx_isolation_level enum, --The isolation level of the transaction (READ UNCOMMITTED, READ COMMITTED, REPEATABLE READ, SERIALIZABLE)\n  trx_unique_checks int, --Whether unique checks are being enforced for the transaction (1 for yes, 0 for no)\n  trx_foreign_key_checks int, --Whether foreign key checks are being enforced for the transaction (1 for yes, 0 for no)\n  trx_last_foreign_key_error varchar, --Description of the last foreign key error encountered by the transaction, if any\n  trx_is_read_only int, --Indicates whether the transaction is read-only (1 for yes, 0 for no)\n  trx_autocommit_non_locking int, --Indicates if it is an autocommit non-locking select transaction\n);",
    "INNODB_CMP_PER_INDEX": "CREATE TABLE INNODB_CMP_PER_INDEX (\n  database_name varchar, --The name of the database.\n  table_name varchar, --The name of the table where the index resides.\n  index_name varchar, --The name of the index.\n  compress_ops int, --Number of times a B-tree page of the index was compressed.\n  compress_ops_ok int, --Number of times a B-tree page compression was successful.\n  compress_time int, --The time spent in compressing B-tree pages (in seconds).\n  uncompress_ops int, --Number of times a B-tree page of the index was uncompressed.\n  uncompress_time int, --The time spent in uncompressing B-tree pages (in seconds).\n);",
    "INNODB_METRICS": "CREATE TABLE INNODB_METRICS (\n  NAME varchar, --The name of the metric\n  SUBSYSTEM varchar, --The subsystem of InnoDB the metric belongs to\n  COUNT bigint, --Current count of the metric since the last reset\n  MAX_COUNT bigint, --Maximum count of the metric recorded since the last reset\n  MIN_COUNT bigint, --Minimum count of the metric recorded since the last reset\n  AVG_COUNT float, --Average count of the metric since the last reset\n  COUNT_RESET bigint, --Count of the metric since the last server startup\n  MAX_COUNT_RESET bigint, --Maximum count of the metric recorded since the last server startup\n  MIN_COUNT_RESET bigint, --Minimum count of the metric recorded since the last server startup\n  AVG_COUNT_RESET float, --Average count of the metric since the last server startup\n  TIME_ENABLED datetime, --Timestamp when the metric was last enabled\n  TIME_DISABLED datetime, --Timestamp when the metric was last disabled\n  TIME_ELAPSED bigint, --Time elapsed in seconds since the last reset\n  TIME_RESET datetime, --Timestamp of the last reset\n  ENABLED int, --Whether the metric is currently enabled or not (YES or NO)\n  TYPE enum, --Type of the metric, indicating its nature, like status, counter, etc.\n  COMMENT varchar, --Description of what the metric measures\n);",
    "INNODB_FT_DELETED": "CREATE TABLE INNODB_FT_DELETED (\n  DOC_ID bigint, --A unique identifier for the document that has been deleted from the InnoDB FULLTEXT index\n);",
    "INNODB_CMP": "CREATE TABLE INNODB_CMP (\n  page_size int, --The compressed page size in bytes.\n  compress_ops int, --Number of compression operations attempted.\n  compress_ops_ok int, --Number of compression operations that succeeded.\n  compress_time int, --Amount of time spent in attempts to compress data, in milliseconds.\n  uncompress_ops int, --Number of decompression operations.\n  uncompress_time int, --Amount of time spent in decompression, in milliseconds.\n);",
    "THREAD_POOL_WAITS": "CREATE TABLE THREAD_POOL_WAITS (\n  REASON varchar, --The reason for the wait in the thread pool, indicating what the thread was or is waiting for.\n  COUNT bigint, --The total count of waits for each distinct reason.\n);",
    "INNODB_CMP_RESET": "CREATE TABLE INNODB_CMP_RESET (\n  page_size int, --The compressed page size in bytes.\n  compress_ops int, --Number of times a B-tree page compression operation was attempted.\n  compress_ops_ok int, --Number of times a B-tree page compression operation was successful.\n  compress_time int, --The total amount of time spent in B-tree page compression operations, in milliseconds.\n  uncompress_ops int, --Number of times a compressed B-tree page was uncompressed.\n  uncompress_time int, --The total amount of time spent in uncompressing B-tree pages, in milliseconds.\n);",
    "THREAD_POOL_QUEUES": "CREATE TABLE THREAD_POOL_QUEUES (\n  GROUP_ID int, --An integer identifying the thread pool group the statement was assigned to\n  POSITION int, --The position number in the queue where the statement is located\n  PRIORITY int, --The priority of the statement in the queue\n  CONNECTION_ID bigint, --The connection identifier for the thread handling the statement\n  QUEUEING_TIME_MICROSECONDS bigint, --The time in microseconds the statement has been in the queue\n);",
    "TABLE_STATISTICS": "CREATE TABLE TABLE_STATISTICS (\n  TABLE_SCHEMA varchar, --The database name to which the table belongs\n  TABLE_NAME varchar, --The name of the table\n  ROWS_READ bigint, --The number of rows read from the table since the last status reset\n  ROWS_CHANGED bigint, --The number of rows changed in the table since the last status reset\n  ROWS_CHANGED_X_INDEXES bigint, --The product of ROWS_CHANGED and the number of indexes of the table since the last status reset\n);",
    "INNODB_SYS_FIELDS": "CREATE TABLE INNODB_SYS_FIELDS (\n  INDEX_ID bigint, --An identifier for the index this column is part of, correlates to INDEX_ID in the INNODB_SYS_INDEXES table\n  NAME varchar, --The name of the column\n  POS int, --The position of the column within the index, starting from 0\n);",
    "INNODB_BUFFER_PAGE_LRU": "CREATE TABLE INNODB_BUFFER_PAGE_LRU (\n  POOL_ID int, --Unique identifier for the buffer pool instance\n  LRU_POSITION bigint, --Position of the page within the LRU list\n  SPACE int, --The tablespace ID for the page\n  PAGE_NUMBER int, --The number of the page within the tablespace\n  PAGE_TYPE varchar, --The type of the page (e.g., index page, undo log page)\n  FLUSH_TYPE int, --Describes the page's flush type\n  FIX_COUNT int, --Number of processes currently accessing the page\n  IS_HASHED int, --Indicates if the page is hashed into the buffer pool\n  NEWEST_MODIFICATION bigint, --Log sequence number of the newest modification\n  OLDEST_MODIFICATION bigint, --Log sequence number of the oldest modification\n  ACCESS_TIME bigint, --The last access time of the page in the buffer pool\n  TABLE_NAME varchar, --Name of the table the page belongs to, if applicable\n  INDEX_NAME varchar, --Name of the index the page belongs to, if applicable\n  NUMBER_RECORDS bigint, --Number of records on the page\n  DATA_SIZE bigint, --Data size of the page in bytes\n  COMPRESSED_SIZE bigint, --Size of the compressed page in bytes, if page is compressed\n  COMPRESSED int, --Indicates whether the page is compressed\n  IO_FIX enum, --Describes the current I/O fix for the page\n  IS_OLD int, --Indicates if the page is in the 'old' sublist of the LRU list\n  FREE_PAGE_CLOCK bigint, --The value of the free page clock when the page was last accessed\n);",
    "INNODB_LOCKS": "CREATE TABLE INNODB_LOCKS (\n  lock_id varchar, --A unique identifier for the lock\n  lock_trx_id bigint, --The transaction identifier associated with the lock\n  lock_mode enum, --The mode of the lock, such as S (shared) or X (exclusive)\n  lock_type enum, --The type of the lock, for example, TABLE, RECORD\n  lock_table varchar, --The name of the table on which the lock is held\n  lock_index varchar, --The name of the index on which the lock is held, if applicable\n  lock_space int, --The tablespace identifier for the lock, if applicable\n  lock_page int, --The page number within the tablespace for the lock, if applicable\n  lock_rec int, --The heap number of the record locked, if applicable\n  lock_data varchar, --The primary key value of the locked row, if it is a record lock\n);",
    "INNODB_FT_INDEX_TABLE": "CREATE TABLE INNODB_FT_INDEX_TABLE (\n  WORD varchar, --The actual word indexed in the FULLTEXT index\n  FIRST_DOC_ID bigint, --The first document ID where the word appears\n  LAST_DOC_ID bigint, --The last document ID where the word appears\n  DOC_COUNT bigint, --The number of documents in which the word appears\n  DOC_ID bigint, --The document ID in the current row, relevant for the INNODB_FT_INDEX_CACHE table\n  POSITION bigint, --The position of the word in the document, relevant for the INNODB_FT_INDEX_CACHE table\n);",
    "INNODB_CMPMEM": "CREATE TABLE INNODB_CMPMEM (\n  page_size int, --Size of the compressed page in bytes.\n  buffer_pool_instance int, --ID of the buffer pool instance where the compression occurred.\n  pages_used int, --Number of pages currently used.\n  pages_free int, --Number of pages currently available.\n  relocation_ops bigint, --Number of relocation operations to make space for other pages.\n  relocation_time int, --Total time in milliseconds spent in relocation operations.\n);",
    "THREAD_POOL_GROUPS": "CREATE TABLE THREAD_POOL_GROUPS (\n  GROUP_ID int, --Uniquely identifies a thread pool group within the THREAD_POOL_GROUPS table.\n  CONNECTIONS int, --Number of current connections associated with the thread pool group.\n  THREADS int, --Total number of threads within the thread pool group.\n  ACTIVE_THREADS int, --Number of threads that are actively processing requests.\n  STANDBY_THREADS int, --Number of threads standing by, ready to handle requests.\n  QUEUE_LENGTH int, --The length of the queue holding tasks waiting to be executed by threads.\n  HAS_LISTENER tinyint, --Indicates whether the thread pool group is listening for new connections (1 for true).\n  IS_STALLED tinyint, --Indicates if the thread pool group is stalled (1 for true).\n);",
    "INNODB_CMP_PER_INDEX_RESET": "CREATE TABLE INNODB_CMP_PER_INDEX_RESET (\n  database_name varchar, --The name of the schema containing the table for which the index compression information applies\n  table_name varchar, --The name of the table for which the index compression information applies\n  index_name varchar, --The name of the index for which the compression information is provided\n  compress_ops int, --Number of times a B-tree page of the index was compressed\n  compress_ops_ok int, --Number of times a B-tree page of the index was successfully compressed\n  compress_time int, --Total time in milliseconds spent in attempts to compress B-tree pages of the index\n  uncompress_ops int, --Number of times a B-tree page of the index was uncompressed\n  uncompress_time int, --Total time in milliseconds spent in operations to uncompress B-tree pages of the index\n);",
    "INNODB_SYS_FOREIGN_COLS": "CREATE TABLE INNODB_SYS_FOREIGN_COLS (\n  ID varchar, --The identifier for the foreign key constraint, matches the ID in the INNODB_SYS_FOREIGN table\n  FOR_COL_NAME varchar, --The name of the column in the table that has the foreign key\n  REF_COL_NAME varchar, --The name of the referenced column in the referenced table\n  POS int, --The position of the column within the key\n);",
    "INNODB_FT_INDEX_CACHE": "CREATE TABLE INNODB_FT_INDEX_CACHE (\n  WORD varchar, --The actual word from the FULLTEXT index.\n  FIRST_DOC_ID bigint, --The smallest document ID where the word was found.\n  LAST_DOC_ID bigint, --The largest document ID where the word was found.\n  DOC_COUNT bigint, --The number of documents containing the word.\n  DOC_ID bigint, --The ID of the document where the word was found.\n  POSITION bigint, --The position of the word within the document.\n);",
    "INNODB_BUFFER_POOL_STATS": "CREATE TABLE INNODB_BUFFER_POOL_STATS (\n  POOL_ID int, --The buffer pool identifier\n  POOL_SIZE bigint, --The size of the buffer pool, in pages\n  FREE_BUFFERS bigint, --The number of free pages in the buffer pool\n  DATABASE_PAGES bigint, --The number of pages used by the database in the buffer pool\n  OLD_DATABASE_PAGES bigint, --The number of pages in the old sublist of the LRU list\n  MODIFIED_DATABASE_PAGES bigint, --The number of pages modified since the last flush\n  PENDING_DECOMPRESS bigint, --The number of pending decompress operations in the buffer pool\n  PENDING_READS bigint, --The number of pending read operations in the buffer pool\n  PENDING_FLUSH_LRU bigint, --The number of pages in the LRU list pending flush\n  PENDING_FLUSH_LIST bigint, --The number of pages in the flush list pending flush\n  PAGES_MADE_YOUNG bigint, --The number of pages made young\n  PAGES_NOT_MADE_YOUNG bigint, --The number of pages that were not made young\n  PAGES_MADE_YOUNG_RATE float, --The rate at which pages are made young per second\n  PAGES_MADE_NOT_YOUNG_RATE float, --The rate at which pages are not made young per second\n  NUMBER_PAGES_READ bigint, --The number of pages read from the buffer pool\n  NUMBER_PAGES_CREATED bigint, --The number of pages created in the buffer pool\n  NUMBER_PAGES_WRITTEN bigint, --The number of pages written from the buffer pool\n  PAGES_READ_RATE float, --The rate at which pages are read per second\n  PAGES_CREATE_RATE float, --The rate at which pages are created per second\n  PAGES_WRITTEN_RATE float, --The rate at which pages are written per second\n  NUMBER_PAGES_GET bigint, --The number of page requests served by the buffer pool\n  HIT_RATE bigint, --The cache hit rate in the buffer pool\n  YOUNG_MAKE_PER_THOUSAND_GETS bigint, --The number of pages made young per thousand gets\n  NOT_YOUNG_MAKE_PER_THOUSAND_GETS bigint, --The number of pages not made young per thousand gets\n  NUMBER_PAGES_READ_AHEAD bigint, --The number of pages read into the buffer pool as part of read-ahead\n  NUMBER_READ_AHEAD_EVICTED bigint, --The number of read-ahead pages that were evicted without being accessed\n  READ_AHEAD_RATE float, --The rate at which pages are read ahead per second\n  READ_AHEAD_EVICTED_RATE float, --The rate at which read-ahead pages are evicted per second\n  LRU_IO_TOTAL bigint, --The total number of input/output operations done as part of LRU maintenance\n  LRU_IO_CURRENT bigint, --The number of current input/output operations done as part of LRU maintenance\n  UNCOMPRESS_TOTAL bigint, --The total number of uncompressed operations in the buffer pool\n  UNCOMPRESS_CURRENT bigint, --The number of current uncompressed operations in the buffer pool\n);",
    "INNODB_FT_BEING_DELETED": "CREATE TABLE INNODB_FT_BEING_DELETED (\n  DOC_ID bigint, --A unique identifier for a document that is being deleted from a FULLTEXT index in the process\n);",
    "INNODB_SYS_FOREIGN": "CREATE TABLE INNODB_SYS_FOREIGN (\n  ID varchar, --Identifier for the foreign key constraint\n  FOR_NAME varchar, --The name of the child table in the foreign key relationship\n  REF_NAME varchar, --The name of the parent table in the foreign key relationship\n  N_COLS int, --Number of columns in the foreign key\n  TYPE int, --Type of the foreign key relationship\n);",
    "INNODB_CMPMEM_RESET": "CREATE TABLE INNODB_CMPMEM_RESET (\n  page_size int, --The compressed page size in bytes.\n  buffer_pool_instance int, --The ID of the buffer pool instance.\n  pages_used int, --Number of pages currently used.\n  pages_free int, --Number of pages currently free.\n  relocation_ops bigint, --Number of times a page was relocated.\n  relocation_time int, --Total time spent in relocating pages, in microseconds.\n);",
    "INNODB_FT_DEFAULT_STOPWORD": "CREATE TABLE INNODB_FT_DEFAULT_STOPWORD (\n  value varchar, --Contains the default stopwords for InnoDB full-text search indexes\n);",
    "INNODB_SYS_TABLES": "CREATE TABLE INNODB_SYS_TABLES (\n  TABLE_ID bigint, --A unique identifier for each table within the InnoDB storage engine\n  NAME varchar, --The name of the table, including the database name\n  FLAG int, --A number that represents certain characteristics of the table, such as whether it's compressed\n  N_COLS int, --The number of columns in the table, including virtual generated columns\n  SPACE int, --The tablespace identifier where the table is stored\n  ROW_FORMAT enum, --The format used to store rows in the table (e.g., Redundant, Compact, Dynamic, Compressed)\n  ZIP_PAGE_SIZE int, --The size of the compressed page, applicable only for tables with ROW_FORMAT=Compressed\n  SPACE_TYPE enum, --The type of the tablespace, indicating whether it\u2019s a system, undo log, or user tablespace\n);",
    "INNODB_SYS_COLUMNS": "CREATE TABLE INNODB_SYS_COLUMNS (\n  TABLE_ID bigint, --An internal identifier for the table, matching the TABLE_ID in INNODB_SYS_TABLES\n  NAME varchar, --The name of the column\n  POS bigint, --The position of the column within the table, starting from 0\n  MTYPE int, --The main datatype of the column, displayed as an integer\n  PRTYPE int, --Precise datatype and flags of the column, encoded as an integer\n  LEN int, --The maximum length of the column in bytes\n);",
    "INNODB_SYS_TABLESPACES": "CREATE TABLE INNODB_SYS_TABLESPACES (\n  SPACE int, --Unique tablespace ID\n  NAME varchar, --The name of the tablespace\n  FLAG int, --Combination of flags that convey information about the tablespace format and storage\n  ROW_FORMAT varchar, --Format of the rows in the tablespace (Compact, Redundant, Dynamic, or Compressed)\n  PAGE_SIZE int, --The page size in bytes for the tablespace\n  FILENAME varchar, --The file path to the tablespace file\n  FS_BLOCK_SIZE int, --File system block size in bytes\n  FILE_SIZE bigint, --The size of the file that contains the tablespace, in bytes\n  ALLOCATED_SIZE bigint, --The size of the space allocated for the tablespace, in bytes\n);",
    "INNODB_SYS_INDEXES": "CREATE TABLE INNODB_SYS_INDEXES (\n  INDEX_ID bigint, --A unique identifier for the index within the database\n  NAME varchar, --The name of the index\n  TABLE_ID bigint, --A unique identifier for the table that the index belongs to\n  TYPE int, --The type of index, indicating if it's clustered or secondary and other characteristics\n  N_FIELDS int, --The number of fields included in the index\n  PAGE_NO int, --The page number in the InnoDB tablespace where the index is stored\n  SPACE int, --The tablespace identifier that the index tablespace resides in\n  MERGE_THRESHOLD int, --The threshold percentage for merging index pages when they become too fragmented\n);",
    "INNODB_BUFFER_PAGE": "CREATE TABLE INNODB_BUFFER_PAGE (\n  POOL_ID int, --Identifier for the buffer pool instance\n  BLOCK_ID bigint, --Block identifier\n  SPACE int, --Tablespace identifier\n  PAGE_NUMBER int, --Page number within the tablespace\n  PAGE_TYPE varchar, --Type of the page (e.g., INDEX, UNDO_LOG, etc.)\n  FLUSH_TYPE int, --Type of flush operation performed on the page\n  FIX_COUNT int, --Number of current page locks\n  IS_HASHED int, --Whether the page is hashed into the buffer pool\n  NEWEST_MODIFICATION bigint, --Log sequence number of the newest modification\n  OLDEST_MODIFICATION bigint, --Log sequence number of the oldest modification\n  ACCESS_TIME bigint, --The last time the page was accessed\n  TABLE_NAME varchar, --Name of the table to which the page belongs\n  INDEX_NAME varchar, --Name of the index to which the page belongs, if applicable\n  NUMBER_RECORDS bigint, --Number of records stored in the page\n  DATA_SIZE bigint, --Data size of the page in bytes\n  COMPRESSED_SIZE bigint, --Compressed size of the page in bytes, if applicable\n  PAGE_STATE enum, --Current state of the page (e.g., FREE, NOT_FREE, etc.)\n  IO_FIX enum, --Current I/O fix for the page (e.g., IO_NONE, IO_READ, etc.)\n  IS_OLD int, --Whether the page is in the old blocks sub-list\n  FREE_PAGE_CLOCK bigint, --Value of the free page clock at the time the page was last made free\n);",
    "INNODB_SYS_VIRTUAL": "CREATE TABLE INNODB_SYS_VIRTUAL (\n  TABLE_ID bigint, --The table ID that owns the virtual column\n  POS int, --The position of the virtual column in the table\n  BASE_POS int, --The base column position that the virtual column is based on\n);",
    "USER_VARIABLES": "CREATE TABLE user_variables (\n  VARIABLE_NAME varchar, --The name of the user-defined variable.\n  VARIABLE_VALUE varchar, --The current value of the user-defined variable.\n  VARIABLE_TYPE varchar, --The type of the variable, such as USER or SESSION.\n  CHARACTER_SET_NAME varchar, --The name of the character set that the variable value is stored in.\n);",
    "INNODB_TABLESPACES_ENCRYPTION": "CREATE TABLE INNODB_TABLESPACES_ENCRYPTION (\n  SPACE int, --The space ID of the tablespace\n  NAME varchar, --Name of the tablespace\n  ENCRYPTION_SCHEME int, --Encryption scheme being used\n  KEYSERVER_REQUESTS int, --Number of requests made to the key server\n  MIN_KEY_VERSION int, --Minimum encryption key version\n  CURRENT_KEY_VERSION int, --Current encryption key version in use\n  KEY_ROTATION_PAGE_NUMBER bigint, --The page number where key rotation is currently happening\n  KEY_ROTATION_MAX_PAGE_NUMBER bigint, --The maximum page number for key rotation\n  CURRENT_KEY_ID int, --The ID of the current encryption key\n  ROTATING_OR_FLUSHING int, --Shows whether a re-encrypt operation or flushing is happening\n);",
    "INNODB_LOCK_WAITS": "CREATE TABLE INNODB_LOCK_WAITS (\n  requesting_trx_id bigint, --The transaction ID of the transaction requesting the lock\n  requested_lock_id varchar, --The lock ID of the lock being requested\n  blocking_trx_id bigint, --The transaction ID of the transaction holding the lock that is blocking the requesting transaction\n  blocking_lock_id varchar, --The lock ID of the lock that is blocking the requesting transaction\n);",
    "THREAD_POOL_STATS": "CREATE TABLE THREAD_POOL_STATS (\n  GROUP_ID int, --Identifies the thread pool group\n  THREAD_CREATIONS bigint, --Number of threads created in the thread pool\n  THREAD_CREATIONS_DUE_TO_STALL bigint, --Count of threads created due to stalls in the thread pool\n  WAKES bigint, --Number of wake events in the thread pool\n  WAKES_DUE_TO_STALL bigint, --Count of wake events caused by stalls in the thread pool\n  THROTTLES bigint, --Number of throttle events in the thread pool\n  STALLS bigint, --Number of stall events in the thread pool\n  POLLS_BY_LISTENER bigint, --Count of polls performed by listeners in the thread pool\n  POLLS_BY_WORKER bigint, --Count of polls performed by workers in the thread pool\n  DEQUEUES_BY_LISTENER bigint, --Number of dequeues performed by listeners in the thread pool\n  DEQUEUES_BY_WORKER bigint, --Number of dequeues performed by workers in the thread pool\n);"
}